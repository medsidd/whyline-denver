{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.8.5", "generated_at": "2025-10-24T00:13:06.448316Z", "invocation_id": "22289ceb-1e67-4fd9-ab1c-9c5e43220000", "env": {}, "project_name": "whylinedenver_dbt", "project_id": "02d4c07ef48d3567509aebbfa77b779d", "user_id": "07188d08-3ff3-4465-b7ea-22a1e2134837", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.whylinedenver_dbt.stg_denver_tracts": {"database": "whyline-denver", "schema": "stg_denver", "name": "stg_denver_tracts", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "staging/stg_denver_tracts.sql", "original_file_path": "models/staging/stg_denver_tracts.sql", "unique_id": "model.whylinedenver_dbt.stg_denver_tracts", "fqn": ["whylinedenver_dbt", "staging", "stg_denver_tracts"], "alias": "stg_denver_tracts", "checksum": {"name": "sha256", "checksum": "9505ef0e1a139f585fb52afba5e961fc67107400451bdea0722460e7f7dbcc0b"}, "config": {"enabled": true, "alias": null, "schema": "stg_denver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"geoid": {"name": "geoid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "aland_m2": {"name": "aland_m2", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geom": {"name": "geom", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "whylinedenver_dbt://models/staging/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "schema": "{{ env_var('BQ_DATASET_STG', 'stg_denver') }}"}, "created_at": 1761260990.726795, "relation_name": "`whyline-denver`.`stg_denver`.`stg_denver_tracts`", "raw_code": "{{ config(materialized='view') }}\n\n{% if target.type == 'bigquery' %}\n    {% set geom_expression = \"ST_GEOGFROMGEOJSON(geometry_geojson, make_valid => true)\" %}\n{% else %}\n    {% set geom_expression = \"ST_GEOGFROMGEOJSON(geometry_geojson)\" %}\n{% endif %}\n\nwith ranked as (\n    select\n        geoid,\n        name,\n        aland_m2,\n        awater_m2,\n        geometry_geojson,\n        _ingested_at,\n        row_number() over (\n            partition by geoid\n            order by _ingested_at desc\n        ) as record_rank\n    from {{ source('raw', 'raw_denver_tracts') }}\n)\n\nselect\n    geoid,\n    name,\n    aland_m2,\n    awater_m2,\n    {{ geom_expression }} as geom\nfrom ranked\nwhere record_rank = 1", "language": "sql", "refs": [], "sources": [["raw", "raw_denver_tracts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.whylinedenver_dbt.raw.raw_denver_tracts"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/stg_denver_tracts.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n\nwith ranked as (\n    select\n        geoid,\n        name,\n        aland_m2,\n        awater_m2,\n        geometry_geojson,\n        _ingested_at,\n        row_number() over (\n            partition by geoid\n            order by _ingested_at desc\n        ) as record_rank\n    from `whyline-denver`.`raw_denver`.`raw_denver_tracts`\n)\n\nselect\n    geoid,\n    name,\n    aland_m2,\n    awater_m2,\n    ST_GEOGFROMGEOJSON(geometry_geojson, make_valid => true) as geom\nfrom ranked\nwhere record_rank = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.stg_weather": {"database": "whyline-denver", "schema": "stg_denver", "name": "stg_weather", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "staging/stg_weather.sql", "original_file_path": "models/staging/stg_weather.sql", "unique_id": "model.whylinedenver_dbt.stg_weather", "fqn": ["whylinedenver_dbt", "staging", "stg_weather"], "alias": "stg_weather", "checksum": {"name": "sha256", "checksum": "74e041703046ddb990ee8e20cb8250ac1f2c4dbaadce97cfef594f11fb135fbf"}, "config": {"enabled": true, "alias": null, "schema": "stg_denver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "station": {"name": "station", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "whylinedenver_dbt://models/staging/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "schema": "{{ env_var('BQ_DATASET_STG', 'stg_denver') }}"}, "created_at": 1761260990.725423, "relation_name": "`whyline-denver`.`stg_denver`.`stg_weather`", "raw_code": "{{ config(materialized='view') }}\n\nwith base as (\n    select\n        date,\n        station,\n        snow_mm,\n        precip_mm,\n        tmin_c,\n        tmax_c,\n        tavg_c,\n        snow_day,\n        precip_bin,\n        _ingested_at\n    from {{ source('raw','raw_weather_daily') }}\n),\ndeduped as (\n    select\n        *,\n        row_number() over (\n            partition by date, station\n            order by _ingested_at desc\n        ) as record_rank\n    from base\n)\n\nselect\n    date,\n    station,\n    snow_mm,\n    precip_mm,\n    tmin_c,\n    tmax_c,\n    tavg_c,\n    snow_day,\n    precip_bin\nfrom deduped\nwhere record_rank = 1", "language": "sql", "refs": [], "sources": [["raw", "raw_weather_daily"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.whylinedenver_dbt.raw.raw_weather_daily"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/stg_weather.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n    select\n        date,\n        station,\n        snow_mm,\n        precip_mm,\n        tmin_c,\n        tmax_c,\n        tavg_c,\n        snow_day,\n        precip_bin,\n        _ingested_at\n    from `whyline-denver`.`raw_denver`.`raw_weather_daily`\n),\ndeduped as (\n    select\n        *,\n        row_number() over (\n            partition by date, station\n            order by _ingested_at desc\n        ) as record_rank\n    from base\n)\n\nselect\n    date,\n    station,\n    snow_mm,\n    precip_mm,\n    tmin_c,\n    tmax_c,\n    tavg_c,\n    snow_day,\n    precip_bin\nfrom deduped\nwhere record_rank = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.stg_sidewalks": {"database": "whyline-denver", "schema": "stg_denver", "name": "stg_sidewalks", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "staging/stg_sidewalks.sql", "original_file_path": "models/staging/stg_sidewalks.sql", "unique_id": "model.whylinedenver_dbt.stg_sidewalks", "fqn": ["whylinedenver_dbt", "staging", "stg_sidewalks"], "alias": "stg_sidewalks", "checksum": {"name": "sha256", "checksum": "1ff14d1c82dd5d86ee9b13f8c8202cd95a4d0ec89370dab34ff03664aa70d32e"}, "config": {"enabled": true, "alias": null, "schema": "stg_denver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"sidewalk_id": {"name": "sidewalk_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geom": {"name": "geom", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "length_m": {"name": "length_m", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "whylinedenver_dbt://models/staging/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "schema": "{{ env_var('BQ_DATASET_STG', 'stg_denver') }}"}, "created_at": 1761260990.72496, "relation_name": "`whyline-denver`.`stg_denver`.`stg_sidewalks`", "raw_code": "{{ config(materialized='view') }}\n\nselect\n    sidewalk_id,\n    class,\n    status,\n    material,\n    year_built,\n    length_m,\n    st_makeline(\n        st_geogpoint(cast(lon_start as float64), cast(lat_start as float64)),\n        st_geogpoint(cast(lon_end as float64), cast(lat_end as float64))\n    ) as geom,\n    st_geogpoint(cast(centroid_lon as float64), cast(centroid_lat as float64)) as centroid\nfrom {{ source('raw','raw_sidewalks') }}", "language": "sql", "refs": [], "sources": [["raw", "raw_sidewalks"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.whylinedenver_dbt.raw.raw_sidewalks"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/stg_sidewalks.sql", "compiled": true, "compiled_code": "\n\nselect\n    sidewalk_id,\n    class,\n    status,\n    material,\n    year_built,\n    length_m,\n    st_makeline(\n        st_geogpoint(cast(lon_start as float64), cast(lat_start as float64)),\n        st_geogpoint(cast(lon_end as float64), cast(lat_end as float64))\n    ) as geom,\n    st_geogpoint(cast(centroid_lon as float64), cast(centroid_lat as float64)) as centroid\nfrom `whyline-denver`.`raw_denver`.`raw_sidewalks`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.stg_denver_crashes": {"database": "whyline-denver", "schema": "stg_denver", "name": "stg_denver_crashes", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "staging/stg_denver_crashes.sql", "original_file_path": "models/staging/stg_denver_crashes.sql", "unique_id": "model.whylinedenver_dbt.stg_denver_crashes", "fqn": ["whylinedenver_dbt", "staging", "stg_denver_crashes"], "alias": "stg_denver_crashes", "checksum": {"name": "sha256", "checksum": "f5e869bed3a99882bc991cfb388b73e78aaefec8bfb2ffded19078132d1e90a4"}, "config": {"enabled": true, "alias": null, "schema": "stg_denver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"crash_id": {"name": "crash_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_ts_utc": {"name": "event_ts_utc", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geom": {"name": "geom", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "whylinedenver_dbt://models/staging/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "schema": "{{ env_var('BQ_DATASET_STG', 'stg_denver') }}"}, "created_at": 1761260990.724478, "relation_name": "`whyline-denver`.`stg_denver`.`stg_denver_crashes`", "raw_code": "{{ config(materialized='view') }}\n\nwith base as (\n    select\n        crash_id,\n        event_ts_utc,\n        severity,\n        severity_text,\n        lon,\n        lat,\n        roadway_name,\n        on_route,\n        off_route,\n        bike_involved,\n        ped_involved\n    from {{ source('raw', 'raw_crashes') }}\n    where lon is not null\n      and lat is not null\n),\ndeduped as (\n    select\n        *,\n        row_number() over (\n            partition by crash_id\n            order by event_ts_utc desc, severity desc\n        ) as crash_rank\n    from base\n)\nselect\n    crash_id,\n    event_ts_utc,\n    severity,\n    severity_text,\n    {{ make_point('lon', 'lat') }} as geom,\n    roadway_name,\n    on_route,\n    off_route,\n    bike_involved,\n    ped_involved,\n    {{ date_mst('event_ts_utc') }} as event_date_mst,\n    {{ hour_mst('event_ts_utc') }} as event_hour_mst\nfrom deduped\nwhere crash_rank = 1", "language": "sql", "refs": [], "sources": [["raw", "raw_crashes"]], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.make_point", "macro.whylinedenver_dbt.date_mst", "macro.whylinedenver_dbt.hour_mst"], "nodes": ["source.whylinedenver_dbt.raw.raw_crashes"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/stg_denver_crashes.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n    select\n        crash_id,\n        event_ts_utc,\n        severity,\n        severity_text,\n        lon,\n        lat,\n        roadway_name,\n        on_route,\n        off_route,\n        bike_involved,\n        ped_involved\n    from `whyline-denver`.`raw_denver`.`raw_crashes`\n    where lon is not null\n      and lat is not null\n),\ndeduped as (\n    select\n        *,\n        row_number() over (\n            partition by crash_id\n            order by event_ts_utc desc, severity desc\n        ) as crash_rank\n    from base\n)\nselect\n    crash_id,\n    event_ts_utc,\n    severity,\n    severity_text,\n    \n    ST_GEOGPOINT(CAST(lon AS FLOAT64), CAST(lat AS FLOAT64))\n as geom,\n    roadway_name,\n    on_route,\n    off_route,\n    bike_involved,\n    ped_involved,\n    \n    DATE(event_ts_utc, \"America/Denver\")\n as event_date_mst,\n    \n    EXTRACT(HOUR FROM DATETIME(event_ts_utc, \"America/Denver\"))\n as event_hour_mst\nfrom deduped\nwhere crash_rank = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.stg_gtfs_trips": {"database": "whyline-denver", "schema": "stg_denver", "name": "stg_gtfs_trips", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "staging/stg_gtfs_trips.sql", "original_file_path": "models/staging/stg_gtfs_trips.sql", "unique_id": "model.whylinedenver_dbt.stg_gtfs_trips", "fqn": ["whylinedenver_dbt", "staging", "stg_gtfs_trips"], "alias": "stg_gtfs_trips", "checksum": {"name": "sha256", "checksum": "dff4e55d48ddfedeeb585dbf4079731e99b5543b3854246af88272e96dc13859"}, "config": {"enabled": true, "alias": null, "schema": "stg_denver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"trip_id": {"name": "trip_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "route_id": {"name": "route_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "whylinedenver_dbt://models/staging/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "schema": "{{ env_var('BQ_DATASET_STG', 'stg_denver') }}"}, "created_at": 1761260990.723169, "relation_name": "`whyline-denver`.`stg_denver`.`stg_gtfs_trips`", "raw_code": "{{ config(materialized='view') }}\n\nwith cal as (\n    select\n        service_id,\n        start_date,\n        end_date,\n        monday,\n        tuesday,\n        wednesday,\n        thursday,\n        friday,\n        saturday,\n        sunday\n    from {{ source('raw','raw_gtfs_calendar') }}\n),\nex as (\n    select\n        service_id,\n        array_agg(case when exception_type = 1 then date end ignore nulls) as added_service_dates,\n        array_agg(case when exception_type = 2 then date end ignore nulls) as removed_service_dates\n    from {{ source('raw','raw_gtfs_calendar_dates') }}\n    group by service_id\n),\ntr as (\n    select\n        trip_id,\n        route_id,\n        service_id,\n        direction_id,\n        shape_id,\n        trip_headsign\n    from {{ source('raw','raw_gtfs_trips') }}\n)\nselect\n    tr.trip_id,\n    tr.route_id,\n    tr.service_id,\n    tr.direction_id,\n    tr.shape_id,\n    tr.trip_headsign,\n    cal.start_date,\n    cal.end_date,\n    cal.monday,\n    cal.tuesday,\n    cal.wednesday,\n    cal.thursday,\n    cal.friday,\n    cal.saturday,\n    cal.sunday,\n    ex.added_service_dates,\n    ex.removed_service_dates\nfrom tr\nleft join cal using (service_id)\nleft join ex using (service_id)", "language": "sql", "refs": [], "sources": [["raw", "raw_gtfs_calendar_dates"], ["raw", "raw_gtfs_trips"], ["raw", "raw_gtfs_calendar"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.whylinedenver_dbt.raw.raw_gtfs_calendar_dates", "source.whylinedenver_dbt.raw.raw_gtfs_trips", "source.whylinedenver_dbt.raw.raw_gtfs_calendar"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/stg_gtfs_trips.sql", "compiled": true, "compiled_code": "\n\nwith cal as (\n    select\n        service_id,\n        start_date,\n        end_date,\n        monday,\n        tuesday,\n        wednesday,\n        thursday,\n        friday,\n        saturday,\n        sunday\n    from `whyline-denver`.`raw_denver`.`raw_gtfs_calendar`\n),\nex as (\n    select\n        service_id,\n        array_agg(case when exception_type = 1 then date end ignore nulls) as added_service_dates,\n        array_agg(case when exception_type = 2 then date end ignore nulls) as removed_service_dates\n    from `whyline-denver`.`raw_denver`.`raw_gtfs_calendar_dates`\n    group by service_id\n),\ntr as (\n    select\n        trip_id,\n        route_id,\n        service_id,\n        direction_id,\n        shape_id,\n        trip_headsign\n    from `whyline-denver`.`raw_denver`.`raw_gtfs_trips`\n)\nselect\n    tr.trip_id,\n    tr.route_id,\n    tr.service_id,\n    tr.direction_id,\n    tr.shape_id,\n    tr.trip_headsign,\n    cal.start_date,\n    cal.end_date,\n    cal.monday,\n    cal.tuesday,\n    cal.wednesday,\n    cal.thursday,\n    cal.friday,\n    cal.saturday,\n    cal.sunday,\n    ex.added_service_dates,\n    ex.removed_service_dates\nfrom tr\nleft join cal using (service_id)\nleft join ex using (service_id)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.stg_gtfs_routes": {"database": "whyline-denver", "schema": "stg_denver", "name": "stg_gtfs_routes", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "staging/stg_gtfs_routes.sql", "original_file_path": "models/staging/stg_gtfs_routes.sql", "unique_id": "model.whylinedenver_dbt.stg_gtfs_routes", "fqn": ["whylinedenver_dbt", "staging", "stg_gtfs_routes"], "alias": "stg_gtfs_routes", "checksum": {"name": "sha256", "checksum": "f2a2e26295ce2b731dde450bfde914364f82f992e223d090582f837ddc5a4f25"}, "config": {"enabled": true, "alias": null, "schema": "stg_denver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"route_id": {"name": "route_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "whylinedenver_dbt://models/staging/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "schema": "{{ env_var('BQ_DATASET_STG', 'stg_denver') }}"}, "created_at": 1761260990.7221818, "relation_name": "`whyline-denver`.`stg_denver`.`stg_gtfs_routes`", "raw_code": "{{ config(materialized='view') }}\n\nwith deduped as (\n    select\n        route_id,\n        coalesce(nullif(route_short_name, ''), route_long_name) as route_name,\n        route_long_name,\n        route_type,\n        route_desc,\n        {{ 'TRUE' if execute else 'TRUE' }} as is_active,\n        row_number() over (\n            partition by route_id\n            order by route_long_name, route_desc, route_short_name\n        ) as route_rank\n    from {{ source('raw', 'raw_gtfs_routes') }}\n)\n\nselect\n    route_id,\n    route_name,\n    route_long_name,\n    route_type,\n    route_desc,\n    is_active\nfrom deduped\nwhere route_rank = 1", "language": "sql", "refs": [], "sources": [["raw", "raw_gtfs_routes"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.whylinedenver_dbt.raw.raw_gtfs_routes"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/stg_gtfs_routes.sql", "compiled": true, "compiled_code": "\n\nwith deduped as (\n    select\n        route_id,\n        coalesce(nullif(route_short_name, ''), route_long_name) as route_name,\n        route_long_name,\n        route_type,\n        route_desc,\n        TRUE as is_active,\n        row_number() over (\n            partition by route_id\n            order by route_long_name, route_desc, route_short_name\n        ) as route_rank\n    from `whyline-denver`.`raw_denver`.`raw_gtfs_routes`\n)\n\nselect\n    route_id,\n    route_name,\n    route_long_name,\n    route_type,\n    route_desc,\n    is_active\nfrom deduped\nwhere route_rank = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.stg_rt_events_daily_stats": {"database": "whyline-denver", "schema": "stg_denver", "name": "stg_rt_events_daily_stats", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "staging/stg_rt_events_daily_stats.sql", "original_file_path": "models/staging/stg_rt_events_daily_stats.sql", "unique_id": "model.whylinedenver_dbt.stg_rt_events_daily_stats", "fqn": ["whylinedenver_dbt", "staging", "stg_rt_events_daily_stats"], "alias": "stg_rt_events_daily_stats", "checksum": {"name": "sha256", "checksum": "dd8e0d792a90eefc7996d71381898744808b9d8f79cbdcab1cf26e326073cefa"}, "config": {"enabled": true, "alias": null, "schema": "stg_denver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "{{ env_var('BQ_DATASET_STG', 'stg_denver') }}"}, "created_at": 1761260990.592854, "relation_name": "`whyline-denver`.`stg_denver`.`stg_rt_events_daily_stats`", "raw_code": "{{ config(materialized='view') }}\n\nselect\n    {{ date_mst('feed_ts_utc') }} as feed_date_mst,\n    count(*) as event_rows,\n    count(distinct trip_id) as trips_observed,\n    count(distinct route_id) as routes_observed,\n    min(feed_ts_utc) as first_feed_ts_utc,\n    max(feed_ts_utc) as last_feed_ts_utc\nfrom {{ ref('stg_rt_events') }}\ngroup by 1", "language": "sql", "refs": [{"name": "stg_rt_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.date_mst"], "nodes": ["model.whylinedenver_dbt.stg_rt_events"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/stg_rt_events_daily_stats.sql", "compiled": true, "compiled_code": "\n\nselect\n    \n    DATE(feed_ts_utc, \"America/Denver\")\n as feed_date_mst,\n    count(*) as event_rows,\n    count(distinct trip_id) as trips_observed,\n    count(distinct route_id) as routes_observed,\n    min(feed_ts_utc) as first_feed_ts_utc,\n    max(feed_ts_utc) as last_feed_ts_utc\nfrom `whyline-denver`.`stg_denver`.`stg_rt_events`\ngroup by 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.stg_rt_events": {"database": "whyline-denver", "schema": "stg_denver", "name": "stg_rt_events", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "staging/stg_rt_events.sql", "original_file_path": "models/staging/stg_rt_events.sql", "unique_id": "model.whylinedenver_dbt.stg_rt_events", "fqn": ["whylinedenver_dbt", "staging", "stg_rt_events"], "alias": "stg_rt_events", "checksum": {"name": "sha256", "checksum": "048bc54c4458cd506c5c5855a2ebe26595c29130bc37a6aa0169a8f0a422dfd3"}, "config": {"enabled": true, "alias": null, "schema": "stg_denver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"feed_ts_utc": {"name": "feed_ts_utc", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "route_id": {"name": "route_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trip_id": {"name": "trip_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_ts_utc": {"name": "event_ts_utc", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "whylinedenver_dbt://models/staging/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "schema": "{{ env_var('BQ_DATASET_STG', 'stg_denver') }}"}, "created_at": 1761260990.7240791, "relation_name": "`whyline-denver`.`stg_denver`.`stg_rt_events`", "raw_code": "{{ config(materialized='view') }}\n\nwith trips as (\n    select\n        trip_id,\n        direction_id,\n        trip_headsign\n    from {{ ref('stg_gtfs_trips') }}\n),\ntu as (\n    select\n        feed_ts_utc,\n        entity_id as tu_entity_id,\n        trip_id,\n        route_id,\n        stop_id,\n        stop_sequence,\n        arrival_delay_sec,\n        departure_delay_sec,\n        schedule_relationship,\n        event_ts_utc as tu_event_ts_utc\n    from {{ source('raw','raw_gtfsrt_trip_updates') }}\n),\nvp as (\n    select\n        feed_ts_utc,\n        entity_id as vp_entity_id,\n        trip_id,\n        route_id,\n        vehicle_id,\n        vehicle_label,\n        lon,\n        lat,\n        bearing,\n        speed_mps,\n        event_ts_utc as vp_event_ts_utc\n    from {{ source('raw','raw_gtfsrt_vehicle_positions') }}\n),\nj as (\n    select\n        coalesce(tu.feed_ts_utc, vp.feed_ts_utc) as feed_ts_utc,\n        coalesce(tu.trip_id, vp.trip_id) as trip_id,\n        coalesce(tu.route_id, vp.route_id) as route_id,\n        tu.tu_entity_id,\n        vp.vp_entity_id,\n        tu.stop_id,\n        tu.stop_sequence,\n        tu.arrival_delay_sec,\n        tu.departure_delay_sec,\n        tu.schedule_relationship,\n        vp.vehicle_id,\n        vp.vehicle_label,\n        vp.lon,\n        vp.lat,\n        vp.bearing,\n        vp.speed_mps,\n        {{ make_point('vp.lon','vp.lat') }} as geom,\n        coalesce(tu.tu_event_ts_utc, vp.vp_event_ts_utc, coalesce(tu.feed_ts_utc, vp.feed_ts_utc)) as event_ts_utc\n    from tu\n    full outer join vp\n        on tu.feed_ts_utc = vp.feed_ts_utc\n        and tu.trip_id = vp.trip_id\n        and tu.route_id = vp.route_id\n),\nranked as (\n    select\n        *,\n        row_number() over (\n            partition by feed_ts_utc, trip_id\n            order by event_ts_utc desc, tu_entity_id desc, vp_entity_id desc\n        ) as trip_rank\n    from j\n)\nselect\n    r.feed_ts_utc,\n    r.trip_id,\n    r.route_id,\n    r.tu_entity_id,\n    r.vp_entity_id,\n    r.stop_id,\n    r.stop_sequence,\n    r.arrival_delay_sec,\n    r.departure_delay_sec,\n    r.schedule_relationship,\n    r.vehicle_id,\n    r.vehicle_label,\n    r.lon,\n    r.lat,\n    r.bearing,\n    r.speed_mps,\n    r.geom,\n    r.event_ts_utc,\n    t.direction_id,\n    t.trip_headsign,\n    {{ date_mst('r.event_ts_utc') }} as event_date_mst,\n    {{ hour_mst('r.event_ts_utc') }} as event_hour_mst\nfrom ranked as r\nleft join trips as t\n    on r.trip_id = t.trip_id\nwhere r.trip_rank = 1", "language": "sql", "refs": [{"name": "stg_gtfs_trips", "package": null, "version": null}], "sources": [["raw", "raw_gtfsrt_trip_updates"], ["raw", "raw_gtfsrt_vehicle_positions"]], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.make_point", "macro.whylinedenver_dbt.date_mst", "macro.whylinedenver_dbt.hour_mst"], "nodes": ["source.whylinedenver_dbt.raw.raw_gtfsrt_trip_updates", "source.whylinedenver_dbt.raw.raw_gtfsrt_vehicle_positions", "model.whylinedenver_dbt.stg_gtfs_trips"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/stg_rt_events.sql", "compiled": true, "compiled_code": "\n\nwith trips as (\n    select\n        trip_id,\n        direction_id,\n        trip_headsign\n    from `whyline-denver`.`stg_denver`.`stg_gtfs_trips`\n),\ntu as (\n    select\n        feed_ts_utc,\n        entity_id as tu_entity_id,\n        trip_id,\n        route_id,\n        stop_id,\n        stop_sequence,\n        arrival_delay_sec,\n        departure_delay_sec,\n        schedule_relationship,\n        event_ts_utc as tu_event_ts_utc\n    from `whyline-denver`.`raw_denver`.`raw_gtfsrt_trip_updates`\n),\nvp as (\n    select\n        feed_ts_utc,\n        entity_id as vp_entity_id,\n        trip_id,\n        route_id,\n        vehicle_id,\n        vehicle_label,\n        lon,\n        lat,\n        bearing,\n        speed_mps,\n        event_ts_utc as vp_event_ts_utc\n    from `whyline-denver`.`raw_denver`.`raw_gtfsrt_vehicle_positions`\n),\nj as (\n    select\n        coalesce(tu.feed_ts_utc, vp.feed_ts_utc) as feed_ts_utc,\n        coalesce(tu.trip_id, vp.trip_id) as trip_id,\n        coalesce(tu.route_id, vp.route_id) as route_id,\n        tu.tu_entity_id,\n        vp.vp_entity_id,\n        tu.stop_id,\n        tu.stop_sequence,\n        tu.arrival_delay_sec,\n        tu.departure_delay_sec,\n        tu.schedule_relationship,\n        vp.vehicle_id,\n        vp.vehicle_label,\n        vp.lon,\n        vp.lat,\n        vp.bearing,\n        vp.speed_mps,\n        \n    ST_GEOGPOINT(CAST(vp.lon AS FLOAT64), CAST(vp.lat AS FLOAT64))\n as geom,\n        coalesce(tu.tu_event_ts_utc, vp.vp_event_ts_utc, coalesce(tu.feed_ts_utc, vp.feed_ts_utc)) as event_ts_utc\n    from tu\n    full outer join vp\n        on tu.feed_ts_utc = vp.feed_ts_utc\n        and tu.trip_id = vp.trip_id\n        and tu.route_id = vp.route_id\n),\nranked as (\n    select\n        *,\n        row_number() over (\n            partition by feed_ts_utc, trip_id\n            order by event_ts_utc desc, tu_entity_id desc, vp_entity_id desc\n        ) as trip_rank\n    from j\n)\nselect\n    r.feed_ts_utc,\n    r.trip_id,\n    r.route_id,\n    r.tu_entity_id,\n    r.vp_entity_id,\n    r.stop_id,\n    r.stop_sequence,\n    r.arrival_delay_sec,\n    r.departure_delay_sec,\n    r.schedule_relationship,\n    r.vehicle_id,\n    r.vehicle_label,\n    r.lon,\n    r.lat,\n    r.bearing,\n    r.speed_mps,\n    r.geom,\n    r.event_ts_utc,\n    t.direction_id,\n    t.trip_headsign,\n    \n    DATE(r.event_ts_utc, \"America/Denver\")\n as event_date_mst,\n    \n    EXTRACT(HOUR FROM DATETIME(r.event_ts_utc, \"America/Denver\"))\n as event_hour_mst\nfrom ranked as r\nleft join trips as t\n    on r.trip_id = t.trip_id\nwhere r.trip_rank = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.stg_gtfs_stops": {"database": "whyline-denver", "schema": "stg_denver", "name": "stg_gtfs_stops", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "staging/stg_gtfs_stops.sql", "original_file_path": "models/staging/stg_gtfs_stops.sql", "unique_id": "model.whylinedenver_dbt.stg_gtfs_stops", "fqn": ["whylinedenver_dbt", "staging", "stg_gtfs_stops"], "alias": "stg_gtfs_stops", "checksum": {"name": "sha256", "checksum": "01c09a64451bed7a4e958fd89eae36a09f40f84c4fba59684c591aa7ec969b45"}, "config": {"enabled": true, "alias": null, "schema": "stg_denver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"stop_id": {"name": "stop_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geom": {"name": "geom", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "whylinedenver_dbt://models/staging/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "schema": "{{ env_var('BQ_DATASET_STG', 'stg_denver') }}"}, "created_at": 1761260990.722781, "relation_name": "`whyline-denver`.`stg_denver`.`stg_gtfs_stops`", "raw_code": "{{ config(materialized='view') }}\n\nwith ranked_stops as (\n    select\n        stop_id,\n        stop_name,\n        stop_lat,\n        stop_lon,\n        {{ make_point('stop_lon', 'stop_lat') }} as geom,\n        {{ safe_int('wheelchair_boarding') }} as wheelchair_boarding,\n        row_number() over (\n            partition by stop_id\n            order by stop_name, stop_lat, stop_lon\n        ) as stop_rank\n    from {{ source('raw', 'raw_gtfs_stops') }}\n)\n\nselect\n    stop_id,\n    stop_name,\n    stop_lat,\n    stop_lon,\n    geom,\n    wheelchair_boarding\nfrom ranked_stops\nwhere stop_rank = 1", "language": "sql", "refs": [], "sources": [["raw", "raw_gtfs_stops"]], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.make_point", "macro.whylinedenver_dbt.safe_int"], "nodes": ["source.whylinedenver_dbt.raw.raw_gtfs_stops"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/stg_gtfs_stops.sql", "compiled": true, "compiled_code": "\n\nwith ranked_stops as (\n    select\n        stop_id,\n        stop_name,\n        stop_lat,\n        stop_lon,\n        \n    ST_GEOGPOINT(CAST(stop_lon AS FLOAT64), CAST(stop_lat AS FLOAT64))\n as geom,\n        \n    SAFE_CAST(wheelchair_boarding AS INT64)\n as wheelchair_boarding,\n        row_number() over (\n            partition by stop_id\n            order by stop_name, stop_lat, stop_lon\n        ) as stop_rank\n    from `whyline-denver`.`raw_denver`.`raw_gtfs_stops`\n)\n\nselect\n    stop_id,\n    stop_name,\n    stop_lat,\n    stop_lon,\n    geom,\n    wheelchair_boarding\nfrom ranked_stops\nwhere stop_rank = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.stg_gtfs_stop_times": {"database": "whyline-denver", "schema": "stg_denver", "name": "stg_gtfs_stop_times", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "staging/stg_gtfs_stop_times.sql", "original_file_path": "models/staging/stg_gtfs_stop_times.sql", "unique_id": "model.whylinedenver_dbt.stg_gtfs_stop_times", "fqn": ["whylinedenver_dbt", "staging", "stg_gtfs_stop_times"], "alias": "stg_gtfs_stop_times", "checksum": {"name": "sha256", "checksum": "ffbd0541f879bd9867b6fbc2275265aa8576654599f7e5ae9fea69cc2f52642a"}, "config": {"enabled": true, "alias": null, "schema": "stg_denver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"trip_id": {"name": "trip_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stop_id": {"name": "stop_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "whylinedenver_dbt://models/staging/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "schema": "{{ env_var('BQ_DATASET_STG', 'stg_denver') }}"}, "created_at": 1761260990.723428, "relation_name": "`whyline-denver`.`stg_denver`.`stg_gtfs_stop_times`", "raw_code": "{{ config(materialized='view') }}\n\nwith base as (\n    select\n        trip_id,\n        stop_id,\n        stop_sequence,\n        arrival_time,\n        departure_time\n    from {{ source('raw','raw_gtfs_stop_times') }}\n),\nnorm as (\n    select\n        *,\n        split(arrival_time, ':')[offset(0)] as a_h,\n        split(arrival_time, ':')[offset(1)] as a_m,\n        split(arrival_time, ':')[offset(2)] as a_s,\n        split(departure_time, ':')[offset(0)] as d_h,\n        split(departure_time, ':')[offset(1)] as d_m,\n        split(departure_time, ':')[offset(2)] as d_s\n    from base\n)\nselect\n    trip_id,\n    stop_id,\n    stop_sequence,\n    arrival_time,\n    departure_time,\n    cast(a_h as int64) as arr_hour_gtfs,\n    cast(d_h as int64) as dep_hour_gtfs,\n    case\n        when cast(a_h as int64) is null then null\n        else cast(a_h as int64)\n    end as arr_hour_bucket\nfrom norm", "language": "sql", "refs": [], "sources": [["raw", "raw_gtfs_stop_times"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.whylinedenver_dbt.raw.raw_gtfs_stop_times"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/stg_gtfs_stop_times.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n    select\n        trip_id,\n        stop_id,\n        stop_sequence,\n        arrival_time,\n        departure_time\n    from `whyline-denver`.`raw_denver`.`raw_gtfs_stop_times`\n),\nnorm as (\n    select\n        *,\n        split(arrival_time, ':')[offset(0)] as a_h,\n        split(arrival_time, ':')[offset(1)] as a_m,\n        split(arrival_time, ':')[offset(2)] as a_s,\n        split(departure_time, ':')[offset(0)] as d_h,\n        split(departure_time, ':')[offset(1)] as d_m,\n        split(departure_time, ':')[offset(2)] as d_s\n    from base\n)\nselect\n    trip_id,\n    stop_id,\n    stop_sequence,\n    arrival_time,\n    departure_time,\n    cast(a_h as int64) as arr_hour_gtfs,\n    cast(d_h as int64) as dep_hour_gtfs,\n    case\n        when cast(a_h as int64) is null then null\n        else cast(a_h as int64)\n    end as arr_hour_bucket\nfrom norm", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.stg_acs_geo": {"database": "whyline-denver", "schema": "stg_denver", "name": "stg_acs_geo", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "staging/stg_acs_geo.sql", "original_file_path": "models/staging/stg_acs_geo.sql", "unique_id": "model.whylinedenver_dbt.stg_acs_geo", "fqn": ["whylinedenver_dbt", "staging", "stg_acs_geo"], "alias": "stg_acs_geo", "checksum": {"name": "sha256", "checksum": "a656bccb11516f48df8aef45dd2c2c4b85db6125178c98c468ce35b44e12e95d"}, "config": {"enabled": true, "alias": null, "schema": "stg_denver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"geoid": {"name": "geoid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pct_hh_no_vehicle": {"name": "pct_hh_no_vehicle", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pct_transit_commute": {"name": "pct_transit_commute", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pct_poverty": {"name": "pct_poverty", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "whylinedenver_dbt://models/staging/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "schema": "{{ env_var('BQ_DATASET_STG', 'stg_denver') }}"}, "created_at": 1761260990.726149, "relation_name": "`whyline-denver`.`stg_denver`.`stg_acs_geo`", "raw_code": "{{ config(materialized='view') }}\n\nwith base as (\n    select\n        geoid,\n        name,\n        year,\n        hh_no_vehicle,\n        hh_total,\n        workers_transit,\n        workers_total,\n        persons_poverty,\n        pop_total,\n        pct_hh_no_vehicle,\n        pct_transit_commute,\n        pct_poverty,\n        _ingested_at\n    from {{ source('raw', 'raw_acs_tract') }}\n),\ndeduped as (\n    select\n        *,\n        row_number() over (\n            partition by geoid\n            order by year desc, _ingested_at desc\n        ) as tract_rank\n    from base\n)\n\nselect\n    geoid,\n    name,\n    year,\n    hh_no_vehicle,\n    hh_total,\n    workers_transit,\n    workers_total,\n    persons_poverty,\n    pop_total,\n    pct_hh_no_vehicle,\n    pct_transit_commute,\n    pct_poverty\nfrom deduped\nwhere tract_rank = 1", "language": "sql", "refs": [], "sources": [["raw", "raw_acs_tract"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.whylinedenver_dbt.raw.raw_acs_tract"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/stg_acs_geo.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n    select\n        geoid,\n        name,\n        year,\n        hh_no_vehicle,\n        hh_total,\n        workers_transit,\n        workers_total,\n        persons_poverty,\n        pop_total,\n        pct_hh_no_vehicle,\n        pct_transit_commute,\n        pct_poverty,\n        _ingested_at\n    from `whyline-denver`.`raw_denver`.`raw_acs_tract`\n),\ndeduped as (\n    select\n        *,\n        row_number() over (\n            partition by geoid\n            order by year desc, _ingested_at desc\n        ) as tract_rank\n    from base\n)\n\nselect\n    geoid,\n    name,\n    year,\n    hh_no_vehicle,\n    hh_total,\n    workers_transit,\n    workers_total,\n    persons_poverty,\n    pop_total,\n    pct_hh_no_vehicle,\n    pct_transit_commute,\n    pct_poverty\nfrom deduped\nwhere tract_rank = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.mart_access_score_by_stop": {"database": "whyline-denver", "schema": "mart_denver", "name": "mart_access_score_by_stop", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "marts/access/mart_access_score_by_stop.sql", "original_file_path": "models/marts/access/mart_access_score_by_stop.sql", "unique_id": "model.whylinedenver_dbt.mart_access_score_by_stop", "fqn": ["whylinedenver_dbt", "marts", "access", "mart_access_score_by_stop"], "alias": "mart_access_score_by_stop", "checksum": {"name": "sha256", "checksum": "38ffd7114018de236786ceaa493807652935559f4b6bf4d8215407bd5e728d47"}, "config": {"enabled": true, "alias": null, "schema": "mart_denver", "database": null, "tags": ["marts"], "meta": {"allow_in_app": true}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["marts"], "description": "Sidewalk length and normalized access score using a 200 m buffer per stop (one row per stop).", "columns": {"stop_id": {"name": "stop_id", "description": "GTFS stop identifier; joins to stg_gtfs_stops.stop_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sidewalk_len_m_within_200m": {"name": "sidewalk_len_m_within_200m", "description": "Total length (meters) of sidewalks intersecting the 200 m stop buffer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "access_score_0_100": {"name": "access_score_0_100", "description": "Min\u2013max normalized sidewalk length score for the stop (0 = least, 100 = most sidewalk coverage).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"allow_in_app": true}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "whylinedenver_dbt://models/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "{{ env_var('BQ_DATASET_MART', 'mart_denver') }}", "tags": ["marts"], "meta": {"allow_in_app": true}}, "created_at": 1761260990.798194, "relation_name": "`whyline-denver`.`mart_denver`.`mart_access_score_by_stop`", "raw_code": "{{ config(materialized='table', meta={\"allow_in_app\": true}) }}\n\nwith buffers as (\n    select\n        stop_id,\n        st_buffer(geom, 200) as buf\n    from {{ ref('stg_gtfs_stops') }}\n),\nsidewalk_len as (\n    select\n        b.stop_id,\n        sum(st_length(st_intersection(sw.geom, b.buf))) as tot_len_m\n    from buffers as b\n    join {{ ref('stg_sidewalks') }} as sw\n        on st_intersects(sw.geom, b.buf)\n    group by\n        b.stop_id\n),\nstops as (\n    select\n        b.stop_id,\n        200 as buffer_m,\n        coalesce(s.tot_len_m, 0) as sidewalk_len_m_within_200m\n    from buffers as b\n    left join sidewalk_len as s\n        using (stop_id)\n)\n\nselect\n    stop_id,\n    buffer_m,\n    sidewalk_len_m_within_200m,\n    cast(\n        round(\n            case\n                when max(sidewalk_len_m_within_200m) over () = min(sidewalk_len_m_within_200m) over ()\n                    then 100\n                else (\n                    (sidewalk_len_m_within_200m - min(sidewalk_len_m_within_200m) over ()) /\n                    nullif(\n                        max(sidewalk_len_m_within_200m) over () - min(sidewalk_len_m_within_200m) over (),\n                        0\n                    ) * 100\n                )\n            end,\n            1\n        ) as float64\n    ) as access_score_0_100,\n    current_timestamp() as build_run_at\nfrom stops", "language": "sql", "refs": [{"name": "stg_gtfs_stops", "package": null, "version": null}, {"name": "stg_sidewalks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.whylinedenver_dbt.stg_gtfs_stops", "model.whylinedenver_dbt.stg_sidewalks"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/access/mart_access_score_by_stop.sql", "compiled": true, "compiled_code": "\n\nwith buffers as (\n    select\n        stop_id,\n        st_buffer(geom, 200) as buf\n    from `whyline-denver`.`stg_denver`.`stg_gtfs_stops`\n),\nsidewalk_len as (\n    select\n        b.stop_id,\n        sum(st_length(st_intersection(sw.geom, b.buf))) as tot_len_m\n    from buffers as b\n    join `whyline-denver`.`stg_denver`.`stg_sidewalks` as sw\n        on st_intersects(sw.geom, b.buf)\n    group by\n        b.stop_id\n),\nstops as (\n    select\n        b.stop_id,\n        200 as buffer_m,\n        coalesce(s.tot_len_m, 0) as sidewalk_len_m_within_200m\n    from buffers as b\n    left join sidewalk_len as s\n        using (stop_id)\n)\n\nselect\n    stop_id,\n    buffer_m,\n    sidewalk_len_m_within_200m,\n    cast(\n        round(\n            case\n                when max(sidewalk_len_m_within_200m) over () = min(sidewalk_len_m_within_200m) over ()\n                    then 100\n                else (\n                    (sidewalk_len_m_within_200m - min(sidewalk_len_m_within_200m) over ()) /\n                    nullif(\n                        max(sidewalk_len_m_within_200m) over () - min(sidewalk_len_m_within_200m) over (),\n                        0\n                    ) * 100\n                )\n            end,\n            1\n        ) as float64\n    ) as access_score_0_100,\n    current_timestamp() as build_run_at\nfrom stops", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.mart_crash_proximity_by_stop": {"database": "whyline-denver", "schema": "mart_denver", "name": "mart_crash_proximity_by_stop", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "marts/safety/mart_crash_proximity_by_stop.sql", "original_file_path": "models/marts/safety/mart_crash_proximity_by_stop.sql", "unique_id": "model.whylinedenver_dbt.mart_crash_proximity_by_stop", "fqn": ["whylinedenver_dbt", "marts", "safety", "mart_crash_proximity_by_stop"], "alias": "mart_crash_proximity_by_stop", "checksum": {"name": "sha256", "checksum": "52b0cda887b8aacfa9a33e61b6b341c50df144004460206d1e154d41bd410789"}, "config": {"enabled": true, "alias": null, "schema": "mart_denver", "database": null, "tags": ["marts"], "meta": {"allow_in_app": true}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["marts"], "description": "Crash counts within 100 m and 250 m buffers for each stop (one row per stop).", "columns": {"stop_id": {"name": "stop_id", "description": "GTFS stop identifier; joins to stg_gtfs_stops.stop_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "crash_100m_cnt": {"name": "crash_100m_cnt", "description": "Number of police-reported crashes within 100 meters of the stop during the snapshot window.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "crash_250m_cnt": {"name": "crash_250m_cnt", "description": "Number of crashes within 250 meters of the stop during the snapshot window.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"allow_in_app": true}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "whylinedenver_dbt://models/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "{{ env_var('BQ_DATASET_MART', 'mart_denver') }}", "tags": ["marts"], "meta": {"allow_in_app": true}}, "created_at": 1761260990.7975569, "relation_name": "`whyline-denver`.`mart_denver`.`mart_crash_proximity_by_stop`", "raw_code": "{{ config(materialized='table', meta={\"allow_in_app\": true}) }}\n\nwith params as (\n    select\n        max(date(event_ts_utc)) as as_of_date,\n        365 as window_days\n    from {{ ref('stg_denver_crashes') }}\n),\nst as (\n    select\n        stop_id,\n        geom\n    from {{ ref('stg_gtfs_stops') }}\n),\ncr as (\n    select\n        event_ts_utc,\n        geom,\n        severity\n    from {{ ref('stg_denver_crashes') }}\n    cross join params\n    where date(event_ts_utc) between date_sub(params.as_of_date, interval params.window_days day) and params.as_of_date\n),\nstop_crash as (\n    select\n        s.stop_id,\n        params.as_of_date,\n        params.window_days,\n        cr.severity,\n        st_distance(s.geom, cr.geom) as distance_m\n    from params\n    cross join st as s\n    join cr\n        on st_dwithin(s.geom, cr.geom, 250)\n),\nagg as (\n    select\n        stop_id,\n        as_of_date,\n        window_days,\n        countif(distance_m <= 100) as crash_100m_cnt,\n        countif(distance_m <= 100 and severity >= 3) as severe_100m_cnt,\n        countif(distance_m <= 100 and severity = 4) as fatal_100m_cnt,\n        count(*) as crash_250m_cnt,\n        countif(severity >= 3) as severe_250m_cnt,\n        countif(severity = 4) as fatal_250m_cnt\n    from stop_crash\n    group by\n        stop_id,\n        as_of_date,\n        window_days\n)\n\nselect\n    s.stop_id,\n    params.as_of_date as as_of_date,\n    params.window_days as window_days,\n    coalesce(a.crash_100m_cnt, 0) as crash_100m_cnt,\n    coalesce(a.severe_100m_cnt, 0) as severe_100m_cnt,\n    coalesce(a.fatal_100m_cnt, 0) as fatal_100m_cnt,\n    coalesce(a.crash_250m_cnt, 0) as crash_250m_cnt,\n    coalesce(a.severe_250m_cnt, 0) as severe_250m_cnt,\n    coalesce(a.fatal_250m_cnt, 0) as fatal_250m_cnt,\n    current_timestamp() as build_run_at\nfrom st as s\ncross join params\nleft join agg as a\n    on s.stop_id = a.stop_id\n    and params.as_of_date = a.as_of_date\n    and params.window_days = a.window_days", "language": "sql", "refs": [{"name": "stg_denver_crashes", "package": null, "version": null}, {"name": "stg_gtfs_stops", "package": null, "version": null}, {"name": "stg_denver_crashes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.whylinedenver_dbt.stg_denver_crashes", "model.whylinedenver_dbt.stg_gtfs_stops"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/safety/mart_crash_proximity_by_stop.sql", "compiled": true, "compiled_code": "\n\nwith params as (\n    select\n        max(date(event_ts_utc)) as as_of_date,\n        365 as window_days\n    from `whyline-denver`.`stg_denver`.`stg_denver_crashes`\n),\nst as (\n    select\n        stop_id,\n        geom\n    from `whyline-denver`.`stg_denver`.`stg_gtfs_stops`\n),\ncr as (\n    select\n        event_ts_utc,\n        geom,\n        severity\n    from `whyline-denver`.`stg_denver`.`stg_denver_crashes`\n    cross join params\n    where date(event_ts_utc) between date_sub(params.as_of_date, interval params.window_days day) and params.as_of_date\n),\nstop_crash as (\n    select\n        s.stop_id,\n        params.as_of_date,\n        params.window_days,\n        cr.severity,\n        st_distance(s.geom, cr.geom) as distance_m\n    from params\n    cross join st as s\n    join cr\n        on st_dwithin(s.geom, cr.geom, 250)\n),\nagg as (\n    select\n        stop_id,\n        as_of_date,\n        window_days,\n        countif(distance_m <= 100) as crash_100m_cnt,\n        countif(distance_m <= 100 and severity >= 3) as severe_100m_cnt,\n        countif(distance_m <= 100 and severity = 4) as fatal_100m_cnt,\n        count(*) as crash_250m_cnt,\n        countif(severity >= 3) as severe_250m_cnt,\n        countif(severity = 4) as fatal_250m_cnt\n    from stop_crash\n    group by\n        stop_id,\n        as_of_date,\n        window_days\n)\n\nselect\n    s.stop_id,\n    params.as_of_date as as_of_date,\n    params.window_days as window_days,\n    coalesce(a.crash_100m_cnt, 0) as crash_100m_cnt,\n    coalesce(a.severe_100m_cnt, 0) as severe_100m_cnt,\n    coalesce(a.fatal_100m_cnt, 0) as fatal_100m_cnt,\n    coalesce(a.crash_250m_cnt, 0) as crash_250m_cnt,\n    coalesce(a.severe_250m_cnt, 0) as severe_250m_cnt,\n    coalesce(a.fatal_250m_cnt, 0) as fatal_250m_cnt,\n    current_timestamp() as build_run_at\nfrom st as s\ncross join params\nleft join agg as a\n    on s.stop_id = a.stop_id\n    and params.as_of_date = a.as_of_date\n    and params.window_days = a.window_days", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.mart_reliability_by_route_day": {"database": "whyline-denver", "schema": "mart_denver", "name": "mart_reliability_by_route_day", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "marts/reliability/mart_reliability_by_route_day.sql", "original_file_path": "models/marts/reliability/mart_reliability_by_route_day.sql", "unique_id": "model.whylinedenver_dbt.mart_reliability_by_route_day", "fqn": ["whylinedenver_dbt", "marts", "reliability", "mart_reliability_by_route_day"], "alias": "mart_reliability_by_route_day", "checksum": {"name": "sha256", "checksum": "8799cf6bb5354feb5e822c5a0c3b1e0fedc85ebe1a72ba1b484ec62db1a9d265"}, "config": {"enabled": true, "alias": null, "schema": "mart_denver", "database": null, "tags": ["marts"], "meta": {"allow_in_app": true}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["route_id"], "partition_by": {"field": "service_date_mst", "data_type": "date"}}, "tags": ["marts"], "description": "Daily reliability metrics per GTFS route with precipitation context; one row per (route_id, service date, precip_bin).", "columns": {"route_id": {"name": "route_id", "description": "GTFS route identifier; joins to stg_gtfs_routes.route_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_date_mst": {"name": "service_date_mst", "description": "Service date in Mountain Time (America/Denver).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "precip_bin": {"name": "precip_bin", "description": "Precipitation bucket for the service day (e.g., none, rain, snow).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pct_on_time": {"name": "pct_on_time", "description": "Share of realtime events for the route/day that are within the configured on-time threshold (0\u20131).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"allow_in_app": true}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "whylinedenver_dbt://models/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "incremental", "schema": "{{ env_var('BQ_DATASET_MART', 'mart_denver') }}", "tags": ["marts"], "partition_by": {"field": "service_date_mst", "data_type": "date"}, "cluster_by": ["route_id"], "meta": {"allow_in_app": true}}, "created_at": 1761260990.796604, "relation_name": "`whyline-denver`.`mart_denver`.`mart_reliability_by_route_day`", "raw_code": "{{ config(\n    materialized='incremental',\n    partition_by={\"field\": \"service_date_mst\", \"data_type\": \"date\"},\n    cluster_by=[\"route_id\"],\n    meta={\"allow_in_app\": true}\n) }}\n\nwith e as (\n    select\n        route_id,\n        service_date_mst,\n        delay_sec,\n        delay_sec_raw\n    from {{ ref('int_rt_events_resolved') }}\n    where true\n    {% if is_incremental() %}\n        and service_date_mst >= (\n            select ifnull(\n                max(service_date_mst),\n                date_sub(current_date(\"America/Denver\"), interval 35 day)\n            )\n            from {{ this }}\n        )\n    {% endif %}\n),\nw as (\n    select\n        service_date_mst,\n        precip_bin,\n        snow_day\n    from {{ ref('int_weather_by_date') }}\n)\n\nselect\n    e.route_id,\n    e.service_date_mst,\n    coalesce(w.precip_bin, 'none') as precip_bin,\n    coalesce(w.snow_day, false) as snow_day,\n    count(*) as n_events,\n    countif(delay_sec_raw is not null) as n_reported_events,\n    avg(case when abs(delay_sec) <= {{ var('on_time_sec', 300) }} then 1 else 0 end) as pct_on_time,\n    avg(delay_sec) as mean_delay_sec,\n    approx_quantiles(delay_sec, 100)[offset(50)] as median_delay_sec,\n    approx_quantiles(delay_sec, 100)[offset(90)] as p90_delay_sec,\n    current_timestamp() as build_run_at\nfrom e\nleft join w\n    using (service_date_mst)\ngroup by\n    route_id,\n    service_date_mst,\n    precip_bin,\n    snow_day", "language": "sql", "refs": [{"name": "int_rt_events_resolved", "package": null, "version": null}, {"name": "int_weather_by_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.whylinedenver_dbt.int_rt_events_resolved", "model.whylinedenver_dbt.int_weather_by_date"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/reliability/mart_reliability_by_route_day.sql", "compiled": true, "compiled_code": "\n\nwith e as (\n    select\n        route_id,\n        service_date_mst,\n        delay_sec,\n        delay_sec_raw\n    from `whyline-denver`.`stg_denver`.`int_rt_events_resolved`\n    where true\n    \n        and service_date_mst >= (\n            select ifnull(\n                max(service_date_mst),\n                date_sub(current_date(\"America/Denver\"), interval 35 day)\n            )\n            from `whyline-denver`.`mart_denver`.`mart_reliability_by_route_day`\n        )\n    \n),\nw as (\n    select\n        service_date_mst,\n        precip_bin,\n        snow_day\n    from `whyline-denver`.`stg_denver`.`int_weather_by_date`\n)\n\nselect\n    e.route_id,\n    e.service_date_mst,\n    coalesce(w.precip_bin, 'none') as precip_bin,\n    coalesce(w.snow_day, false) as snow_day,\n    count(*) as n_events,\n    countif(delay_sec_raw is not null) as n_reported_events,\n    avg(case when abs(delay_sec) <= 300 then 1 else 0 end) as pct_on_time,\n    avg(delay_sec) as mean_delay_sec,\n    approx_quantiles(delay_sec, 100)[offset(50)] as median_delay_sec,\n    approx_quantiles(delay_sec, 100)[offset(90)] as p90_delay_sec,\n    current_timestamp() as build_run_at\nfrom e\nleft join w\n    using (service_date_mst)\ngroup by\n    route_id,\n    service_date_mst,\n    precip_bin,\n    snow_day", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.mart_weather_impacts": {"database": "whyline-denver", "schema": "mart_denver", "name": "mart_weather_impacts", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "marts/reliability/mart_weather_impacts.sql", "original_file_path": "models/marts/reliability/mart_weather_impacts.sql", "unique_id": "model.whylinedenver_dbt.mart_weather_impacts", "fqn": ["whylinedenver_dbt", "marts", "reliability", "mart_weather_impacts"], "alias": "mart_weather_impacts", "checksum": {"name": "sha256", "checksum": "be81370a12bac9872b1c95925b2b6ba80648bd16539955bcd357c1411ccc8aa7"}, "config": {"enabled": true, "alias": null, "schema": "mart_denver", "database": null, "tags": ["marts"], "meta": {"allow_in_app": true}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["marts"], "description": "Average on-time performance by precipitation bin with deltas against dry days (one row per route/bin).", "columns": {"route_id": {"name": "route_id", "description": "GTFS route identifier; joins to stg_gtfs_routes.route_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "precip_bin": {"name": "precip_bin", "description": "Precipitation bucket (e.g., none, rain, snow).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pct_on_time_avg": {"name": "pct_on_time_avg", "description": "Average on-time share for the route within the precipitation bin (0\u20131).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pct_on_time_normal": {"name": "pct_on_time_normal", "description": "Average on-time share on dry days (precip_bin = 'none') for the same route (0\u20131).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"allow_in_app": true}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "whylinedenver_dbt://models/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "{{ env_var('BQ_DATASET_MART', 'mart_denver') }}", "tags": ["marts"], "meta": {"allow_in_app": true}}, "created_at": 1761260990.799859, "relation_name": "`whyline-denver`.`mart_denver`.`mart_weather_impacts`", "raw_code": "{{ config(materialized='table', meta={\"allow_in_app\": true}) }}\n\nwith base as (\n    select\n        route_id,\n        precip_bin,\n        pct_on_time\n    from {{ ref('mart_reliability_by_route_day') }}\n),\navgd as (\n    select\n        route_id,\n        precip_bin,\n        avg(pct_on_time) as pct_on_time_avg\n    from base\n    group by\n        route_id,\n        precip_bin\n),\nnorm as (\n    select\n        a.route_id,\n        a.precip_bin,\n        a.pct_on_time_avg,\n        n.pct_on_time_avg as pct_on_time_normal\n    from avgd as a\n    left join avgd as n\n        on a.route_id = n.route_id\n        and n.precip_bin = 'none'\n)\n\nselect\n    route_id,\n    precip_bin,\n    pct_on_time_avg,\n    pct_on_time_normal,\n    pct_on_time_avg - pct_on_time_normal as delta_pct_on_time,\n    current_timestamp() as build_run_at\nfrom norm", "language": "sql", "refs": [{"name": "mart_reliability_by_route_day", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.whylinedenver_dbt.mart_reliability_by_route_day"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/reliability/mart_weather_impacts.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n    select\n        route_id,\n        precip_bin,\n        pct_on_time\n    from `whyline-denver`.`mart_denver`.`mart_reliability_by_route_day`\n),\navgd as (\n    select\n        route_id,\n        precip_bin,\n        avg(pct_on_time) as pct_on_time_avg\n    from base\n    group by\n        route_id,\n        precip_bin\n),\nnorm as (\n    select\n        a.route_id,\n        a.precip_bin,\n        a.pct_on_time_avg,\n        n.pct_on_time_avg as pct_on_time_normal\n    from avgd as a\n    left join avgd as n\n        on a.route_id = n.route_id\n        and n.precip_bin = 'none'\n)\n\nselect\n    route_id,\n    precip_bin,\n    pct_on_time_avg,\n    pct_on_time_normal,\n    pct_on_time_avg - pct_on_time_normal as delta_pct_on_time,\n    current_timestamp() as build_run_at\nfrom norm", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.mart_reliability_by_stop_hour": {"database": "whyline-denver", "schema": "mart_denver", "name": "mart_reliability_by_stop_hour", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "marts/reliability/mart_reliability_by_stop_hour.sql", "original_file_path": "models/marts/reliability/mart_reliability_by_stop_hour.sql", "unique_id": "model.whylinedenver_dbt.mart_reliability_by_stop_hour", "fqn": ["whylinedenver_dbt", "marts", "reliability", "mart_reliability_by_stop_hour"], "alias": "mart_reliability_by_stop_hour", "checksum": {"name": "sha256", "checksum": "739edbc62c0dcab4085b4956ad6bccf1a54d9e09ea30e861ad0160459a73a5e9"}, "config": {"enabled": true, "alias": null, "schema": "mart_denver", "database": null, "tags": ["marts"], "meta": {"allow_in_app": true}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["stop_id"], "partition_by": {"field": "service_date_mst", "data_type": "date"}}, "tags": ["marts"], "description": "Hourly reliability metrics per stop (one row per stop_id, service date, hour) including headway adherence summaries.", "columns": {"stop_id": {"name": "stop_id", "description": "GTFS stop identifier; joins to stg_gtfs_stops.stop_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_date_mst": {"name": "service_date_mst", "description": "Service date in Mountain Time (America/Denver).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_hour_mst": {"name": "event_hour_mst", "description": "Service hour (0\u201323) in Mountain Time.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pct_on_time": {"name": "pct_on_time", "description": "Share of realtime events in the stop/hour that are on time (0\u20131).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"allow_in_app": true}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "whylinedenver_dbt://models/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "incremental", "schema": "{{ env_var('BQ_DATASET_MART', 'mart_denver') }}", "tags": ["marts"], "partition_by": {"field": "service_date_mst", "data_type": "date"}, "cluster_by": ["stop_id"], "meta": {"allow_in_app": true}}, "created_at": 1761260990.7970428, "relation_name": "`whyline-denver`.`mart_denver`.`mart_reliability_by_stop_hour`", "raw_code": "{{ config(\n    materialized='incremental',\n    partition_by={\"field\": \"service_date_mst\", \"data_type\": \"date\"},\n    cluster_by=[\"stop_id\"],\n    meta={\"allow_in_app\": true}\n) }}\n\nwith base as (\n    select\n        stop_id,\n        route_id,\n        service_date_mst,\n        event_hour_mst,\n        delay_sec\n    from {{ ref('int_rt_events_resolved') }}\n    where stop_id is not null\n    {% if is_incremental() %}\n        and service_date_mst >= (\n            select ifnull(\n                max(service_date_mst),\n                date_sub(current_date(\"America/Denver\"), interval 35 day)\n            )\n            from {{ this }}\n        )\n    {% endif %}\n),\nhead AS (\n    select\n        stop_id,\n        service_date_mst,\n        extract(hour from event_ts_utc at time zone \"America/Denver\") as event_hour_mst,\n        avg(headway_adherent) as headway_adherence_rate,\n        approx_quantiles(obs_headway_sec, 100)[offset(50)] as obs_headway_sec_p50,\n        approx_quantiles(obs_headway_sec, 100)[offset(90)] as obs_headway_sec_p90\n    from {{ ref('int_headway_adherence') }}\n    group by\n        stop_id,\n        service_date_mst,\n        event_hour_mst\n),\nagg as (\n    select\n        stop_id,\n        service_date_mst,\n        event_hour_mst,\n        count(*) as n_events,\n        avg(case when abs(delay_sec) <= {{ var('on_time_sec', 300) }} then 1 else 0 end) as pct_on_time,\n        avg(delay_sec) as mean_delay_sec,\n        approx_quantiles(delay_sec, 100)[offset(90)] as p90_delay_sec\n    from base\n    group by\n        stop_id,\n        service_date_mst,\n        event_hour_mst\n),\nroute_mode as (\n    select\n        stop_id,\n        service_date_mst,\n        event_hour_mst,\n        array_agg(route_id order by route_events desc, route_id limit 1)[offset(0)] as route_id_mode\n    from (\n        select\n            stop_id,\n            service_date_mst,\n            event_hour_mst,\n            route_id,\n            count(*) as route_events\n        from base\n        where route_id is not null\n        group by\n            stop_id,\n            service_date_mst,\n            event_hour_mst,\n            route_id\n    )\n    group by\n        stop_id,\n        service_date_mst,\n        event_hour_mst\n)\n\nselect\n    a.stop_id,\n    a.service_date_mst,\n    a.event_hour_mst,\n    a.n_events,\n    a.pct_on_time,\n    a.mean_delay_sec,\n    a.p90_delay_sec,\n    coalesce(rm.route_id_mode, 'unknown') as route_id_mode,\n    h.headway_adherence_rate,\n    h.obs_headway_sec_p50,\n    h.obs_headway_sec_p90,\n    current_timestamp() as build_run_at\nfrom agg as a\nleft join head as h\n    using (stop_id, service_date_mst, event_hour_mst)\nleft join route_mode as rm\n    using (stop_id, service_date_mst, event_hour_mst)", "language": "sql", "refs": [{"name": "int_rt_events_resolved", "package": null, "version": null}, {"name": "int_headway_adherence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.whylinedenver_dbt.int_rt_events_resolved", "model.whylinedenver_dbt.int_headway_adherence"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/reliability/mart_reliability_by_stop_hour.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n    select\n        stop_id,\n        route_id,\n        service_date_mst,\n        event_hour_mst,\n        delay_sec\n    from `whyline-denver`.`stg_denver`.`int_rt_events_resolved`\n    where stop_id is not null\n    \n        and service_date_mst >= (\n            select ifnull(\n                max(service_date_mst),\n                date_sub(current_date(\"America/Denver\"), interval 35 day)\n            )\n            from `whyline-denver`.`mart_denver`.`mart_reliability_by_stop_hour`\n        )\n    \n),\nhead AS (\n    select\n        stop_id,\n        service_date_mst,\n        extract(hour from event_ts_utc at time zone \"America/Denver\") as event_hour_mst,\n        avg(headway_adherent) as headway_adherence_rate,\n        approx_quantiles(obs_headway_sec, 100)[offset(50)] as obs_headway_sec_p50,\n        approx_quantiles(obs_headway_sec, 100)[offset(90)] as obs_headway_sec_p90\n    from `whyline-denver`.`stg_denver`.`int_headway_adherence`\n    group by\n        stop_id,\n        service_date_mst,\n        event_hour_mst\n),\nagg as (\n    select\n        stop_id,\n        service_date_mst,\n        event_hour_mst,\n        count(*) as n_events,\n        avg(case when abs(delay_sec) <= 300 then 1 else 0 end) as pct_on_time,\n        avg(delay_sec) as mean_delay_sec,\n        approx_quantiles(delay_sec, 100)[offset(90)] as p90_delay_sec\n    from base\n    group by\n        stop_id,\n        service_date_mst,\n        event_hour_mst\n),\nroute_mode as (\n    select\n        stop_id,\n        service_date_mst,\n        event_hour_mst,\n        array_agg(route_id order by route_events desc, route_id limit 1)[offset(0)] as route_id_mode\n    from (\n        select\n            stop_id,\n            service_date_mst,\n            event_hour_mst,\n            route_id,\n            count(*) as route_events\n        from base\n        where route_id is not null\n        group by\n            stop_id,\n            service_date_mst,\n            event_hour_mst,\n            route_id\n    )\n    group by\n        stop_id,\n        service_date_mst,\n        event_hour_mst\n)\n\nselect\n    a.stop_id,\n    a.service_date_mst,\n    a.event_hour_mst,\n    a.n_events,\n    a.pct_on_time,\n    a.mean_delay_sec,\n    a.p90_delay_sec,\n    coalesce(rm.route_id_mode, 'unknown') as route_id_mode,\n    h.headway_adherence_rate,\n    h.obs_headway_sec_p50,\n    h.obs_headway_sec_p90,\n    current_timestamp() as build_run_at\nfrom agg as a\nleft join head as h\n    using (stop_id, service_date_mst, event_hour_mst)\nleft join route_mode as rm\n    using (stop_id, service_date_mst, event_hour_mst)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.mart_priority_hotspots": {"database": "whyline-denver", "schema": "mart_denver", "name": "mart_priority_hotspots", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "marts/equity/mart_priority_hotspots.sql", "original_file_path": "models/marts/equity/mart_priority_hotspots.sql", "unique_id": "model.whylinedenver_dbt.mart_priority_hotspots", "fqn": ["whylinedenver_dbt", "marts", "equity", "mart_priority_hotspots"], "alias": "mart_priority_hotspots", "checksum": {"name": "sha256", "checksum": "ea1d5c3cb06ca69c0b6a67ae898b04730f122d120a6f8223aed0bc7b8055ac15"}, "config": {"enabled": true, "alias": null, "schema": "mart_denver", "database": null, "tags": ["marts"], "meta": {"allow_in_app": true}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["marts"], "description": "Composite priority ranking per stop that blends vulnerability, crash exposure, and reliability problems.", "columns": {"stop_id": {"name": "stop_id", "description": "GTFS stop identifier; joins to stg_gtfs_stops.stop_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "priority_score": {"name": "priority_score", "description": "Weighted priority score (0+), computed as 0.5*vulnerability + 0.3*crash + 0.2*reliability.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"allow_in_app": true}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "whylinedenver_dbt://models/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "{{ env_var('BQ_DATASET_MART', 'mart_denver') }}", "tags": ["marts"], "meta": {"allow_in_app": true}}, "created_at": 1761260990.799338, "relation_name": "`whyline-denver`.`mart_denver`.`mart_priority_hotspots`", "raw_code": "{{ config(materialized='table', meta={\"allow_in_app\": true}) }}\n\nwith rel as (\n    select\n        stop_id,\n        100.0 * (1 - avg(pct_on_time)) as reliability_score_0_100\n    from {{ ref('mart_reliability_by_stop_hour') }}\n    where service_date_mst >= date_sub(current_date(\"America/Denver\"), interval 35 day)\n    group by stop_id\n),\ncr as (\n    select\n        stop_id,\n        cast(\n            round(\n                (crash_250m_cnt - min(crash_250m_cnt) over ()) /\n                nullif(\n                    max(crash_250m_cnt) over () - min(crash_250m_cnt) over (),\n                    0\n                ) * 100,\n                1\n            ) as float64\n        ) as crash_score_0_100\n    from {{ ref('mart_crash_proximity_by_stop') }}\n),\nv as (\n    select\n        stop_id,\n        vuln_score_0_100\n    from {{ ref('mart_vulnerability_by_stop') }}\n),\njoined as (\n    select\n        coalesce(v.stop_id, cr.stop_id, rel.stop_id) as stop_id,\n        v.vuln_score_0_100,\n        cr.crash_score_0_100,\n        rel.reliability_score_0_100\n    from v\n    full outer join cr\n        using (stop_id)\n    full outer join rel\n        using (stop_id)\n),\nscored as (\n    select\n        stop_id,\n        vuln_score_0_100,\n        crash_score_0_100,\n        reliability_score_0_100,\n        0.5 * coalesce(vuln_score_0_100, 0)\n        + 0.3 * coalesce(crash_score_0_100, 0)\n        + 0.2 * coalesce(reliability_score_0_100, 0) as priority_score\n    from joined\n)\n\nselect\n    stop_id,\n    vuln_score_0_100,\n    crash_score_0_100,\n    reliability_score_0_100,\n    priority_score,\n    dense_rank() over (order by priority_score desc) as priority_rank,\n    current_timestamp() as build_run_at\nfrom scored\nwhere stop_id is not null", "language": "sql", "refs": [{"name": "mart_reliability_by_stop_hour", "package": null, "version": null}, {"name": "mart_crash_proximity_by_stop", "package": null, "version": null}, {"name": "mart_vulnerability_by_stop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.whylinedenver_dbt.mart_reliability_by_stop_hour", "model.whylinedenver_dbt.mart_crash_proximity_by_stop", "model.whylinedenver_dbt.mart_vulnerability_by_stop"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/equity/mart_priority_hotspots.sql", "compiled": true, "compiled_code": "\n\nwith rel as (\n    select\n        stop_id,\n        100.0 * (1 - avg(pct_on_time)) as reliability_score_0_100\n    from `whyline-denver`.`mart_denver`.`mart_reliability_by_stop_hour`\n    where service_date_mst >= date_sub(current_date(\"America/Denver\"), interval 35 day)\n    group by stop_id\n),\ncr as (\n    select\n        stop_id,\n        cast(\n            round(\n                (crash_250m_cnt - min(crash_250m_cnt) over ()) /\n                nullif(\n                    max(crash_250m_cnt) over () - min(crash_250m_cnt) over (),\n                    0\n                ) * 100,\n                1\n            ) as float64\n        ) as crash_score_0_100\n    from `whyline-denver`.`mart_denver`.`mart_crash_proximity_by_stop`\n),\nv as (\n    select\n        stop_id,\n        vuln_score_0_100\n    from `whyline-denver`.`mart_denver`.`mart_vulnerability_by_stop`\n),\njoined as (\n    select\n        coalesce(v.stop_id, cr.stop_id, rel.stop_id) as stop_id,\n        v.vuln_score_0_100,\n        cr.crash_score_0_100,\n        rel.reliability_score_0_100\n    from v\n    full outer join cr\n        using (stop_id)\n    full outer join rel\n        using (stop_id)\n),\nscored as (\n    select\n        stop_id,\n        vuln_score_0_100,\n        crash_score_0_100,\n        reliability_score_0_100,\n        0.5 * coalesce(vuln_score_0_100, 0)\n        + 0.3 * coalesce(crash_score_0_100, 0)\n        + 0.2 * coalesce(reliability_score_0_100, 0) as priority_score\n    from joined\n)\n\nselect\n    stop_id,\n    vuln_score_0_100,\n    crash_score_0_100,\n    reliability_score_0_100,\n    priority_score,\n    dense_rank() over (order by priority_score desc) as priority_rank,\n    current_timestamp() as build_run_at\nfrom scored\nwhere stop_id is not null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.mart_vulnerability_by_stop": {"database": "whyline-denver", "schema": "mart_denver", "name": "mart_vulnerability_by_stop", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "marts/equity/mart_vulnerability_by_stop.sql", "original_file_path": "models/marts/equity/mart_vulnerability_by_stop.sql", "unique_id": "model.whylinedenver_dbt.mart_vulnerability_by_stop", "fqn": ["whylinedenver_dbt", "marts", "equity", "mart_vulnerability_by_stop"], "alias": "mart_vulnerability_by_stop", "checksum": {"name": "sha256", "checksum": "3c9e2d568f71375549f1842e3b0738c065c8c6415832cb03499b2e2b822643b4"}, "config": {"enabled": true, "alias": null, "schema": "mart_denver", "database": null, "tags": ["marts"], "meta": {"allow_in_app": true}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["marts"], "description": "Population-weighted ACS vulnerability indicators near each stop using tracts within ~0.5 miles.", "columns": {"stop_id": {"name": "stop_id", "description": "GTFS stop identifier; joins to stg_gtfs_stops.stop_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pct_hh_no_vehicle_w": {"name": "pct_hh_no_vehicle_w", "description": "Population-weighted share of households without a vehicle within the catchment (0\u20131).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pct_transit_commute_w": {"name": "pct_transit_commute_w", "description": "Population-weighted share of workers commuting by transit within the catchment (0\u20131).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pct_poverty_w": {"name": "pct_poverty_w", "description": "Population-weighted share of residents below poverty within the catchment (0\u20131).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vuln_score_0_100": {"name": "vuln_score_0_100", "description": "Composite vulnerability index (0\u2013100) averaging the weighted indicators.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"allow_in_app": true}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "whylinedenver_dbt://models/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "{{ env_var('BQ_DATASET_MART', 'mart_denver') }}", "tags": ["marts"], "meta": {"allow_in_app": true}}, "created_at": 1761260990.7989619, "relation_name": "`whyline-denver`.`mart_denver`.`mart_vulnerability_by_stop`", "raw_code": "{{ config(materialized='table', meta={\"allow_in_app\": true}) }}\n\nwith stops as (\n    select\n        stop_id,\n        geom\n    from {{ ref('stg_gtfs_stops') }}\n),\ntracts as (\n    select\n        geoid,\n        geom\n    from {{ ref('stg_denver_tracts') }}\n),\nacs as (\n    select\n        regexp_replace(geoid, '^14000US', '') as geoid,\n        pop_total,\n        pct_hh_no_vehicle,\n        pct_transit_commute,\n        pct_poverty\n    from {{ ref('stg_acs_geo') }}\n    where pop_total > 0\n),\nnear as (\n    select\n        s.stop_id,\n        t.geoid\n    from stops as s\n    join tracts as t\n        -- 804.672 meters is approximately 0.5 miles, a standard walkable catchment distance in transit equity analysis.\n        -- This distance is used to associate each stop with nearby census tracts for vulnerability analysis, reflecting typical access/walkshed studies.\n        on st_dwithin(s.geom, t.geom, 804.672)\n),\nw as (\n    select\n        n.stop_id,\n        a.geoid,\n        a.pop_total,\n        a.pct_hh_no_vehicle,\n        a.pct_transit_commute,\n        a.pct_poverty\n    from near as n\n    join acs as a\n        using (geoid)\n),\nnorm as (\n    select\n        stop_id,\n        sum(pop_total) as pop_sum,\n        sum(pct_hh_no_vehicle * pop_total) / nullif(sum(pop_total), 0) as pct_hh_no_vehicle_w,\n        sum(pct_transit_commute * pop_total) / nullif(sum(pop_total), 0) as pct_transit_commute_w,\n        sum(pct_poverty * pop_total) / nullif(sum(pop_total), 0) as pct_poverty_w\n    from w\n    group by\n        stop_id\n),\nscore as (\n    select\n        *,\n        (pct_hh_no_vehicle_w + pct_transit_commute_w + pct_poverty_w) / 3.0 as vuln_raw\n    from norm\n),\njoined as (\n    select\n        s.stop_id,\n        n.pct_hh_no_vehicle_w,\n        n.pct_transit_commute_w,\n        n.pct_poverty_w,\n        n.vuln_raw\n    from stops as s\n    left join score as n\n        using (stop_id)\n)\n\nselect\n    stop_id,\n    pct_hh_no_vehicle_w,\n    pct_transit_commute_w,\n    pct_poverty_w,\n    cast(\n        round(\n            case\n                when max(vuln_raw) over () = min(vuln_raw) over () then 100\n                else (\n                    (vuln_raw - min(vuln_raw) over ()) /\n                    nullif(\n                        max(vuln_raw) over () - min(vuln_raw) over (),\n                        0\n                    ) * 100\n                )\n            end,\n            1\n        ) as float64\n    ) as vuln_score_0_100,\n    current_timestamp() as build_run_at\nfrom joined", "language": "sql", "refs": [{"name": "stg_gtfs_stops", "package": null, "version": null}, {"name": "stg_denver_tracts", "package": null, "version": null}, {"name": "stg_acs_geo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.whylinedenver_dbt.stg_gtfs_stops", "model.whylinedenver_dbt.stg_denver_tracts", "model.whylinedenver_dbt.stg_acs_geo"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/equity/mart_vulnerability_by_stop.sql", "compiled": true, "compiled_code": "\n\nwith stops as (\n    select\n        stop_id,\n        geom\n    from `whyline-denver`.`stg_denver`.`stg_gtfs_stops`\n),\ntracts as (\n    select\n        geoid,\n        geom\n    from `whyline-denver`.`stg_denver`.`stg_denver_tracts`\n),\nacs as (\n    select\n        regexp_replace(geoid, '^14000US', '') as geoid,\n        pop_total,\n        pct_hh_no_vehicle,\n        pct_transit_commute,\n        pct_poverty\n    from `whyline-denver`.`stg_denver`.`stg_acs_geo`\n    where pop_total > 0\n),\nnear as (\n    select\n        s.stop_id,\n        t.geoid\n    from stops as s\n    join tracts as t\n        -- 804.672 meters is approximately 0.5 miles, a standard walkable catchment distance in transit equity analysis.\n        -- This distance is used to associate each stop with nearby census tracts for vulnerability analysis, reflecting typical access/walkshed studies.\n        on st_dwithin(s.geom, t.geom, 804.672)\n),\nw as (\n    select\n        n.stop_id,\n        a.geoid,\n        a.pop_total,\n        a.pct_hh_no_vehicle,\n        a.pct_transit_commute,\n        a.pct_poverty\n    from near as n\n    join acs as a\n        using (geoid)\n),\nnorm as (\n    select\n        stop_id,\n        sum(pop_total) as pop_sum,\n        sum(pct_hh_no_vehicle * pop_total) / nullif(sum(pop_total), 0) as pct_hh_no_vehicle_w,\n        sum(pct_transit_commute * pop_total) / nullif(sum(pop_total), 0) as pct_transit_commute_w,\n        sum(pct_poverty * pop_total) / nullif(sum(pop_total), 0) as pct_poverty_w\n    from w\n    group by\n        stop_id\n),\nscore as (\n    select\n        *,\n        (pct_hh_no_vehicle_w + pct_transit_commute_w + pct_poverty_w) / 3.0 as vuln_raw\n    from norm\n),\njoined as (\n    select\n        s.stop_id,\n        n.pct_hh_no_vehicle_w,\n        n.pct_transit_commute_w,\n        n.pct_poverty_w,\n        n.vuln_raw\n    from stops as s\n    left join score as n\n        using (stop_id)\n)\n\nselect\n    stop_id,\n    pct_hh_no_vehicle_w,\n    pct_transit_commute_w,\n    pct_poverty_w,\n    cast(\n        round(\n            case\n                when max(vuln_raw) over () = min(vuln_raw) over () then 100\n                else (\n                    (vuln_raw - min(vuln_raw) over ()) /\n                    nullif(\n                        max(vuln_raw) over () - min(vuln_raw) over (),\n                        0\n                    ) * 100\n                )\n            end,\n            1\n        ) as float64\n    ) as vuln_score_0_100,\n    current_timestamp() as build_run_at\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.int_stop_headways_observed": {"database": "whyline-denver", "schema": "stg_denver", "name": "int_stop_headways_observed", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "intermediate/int_stop_headways_observed.sql", "original_file_path": "models/intermediate/int_stop_headways_observed.sql", "unique_id": "model.whylinedenver_dbt.int_stop_headways_observed", "fqn": ["whylinedenver_dbt", "intermediate", "int_stop_headways_observed"], "alias": "int_stop_headways_observed", "checksum": {"name": "sha256", "checksum": "f92a19ca33e63b437dbd660596b8eadd84c3de11cc1f19deffc2401fb46e3b12"}, "config": {"enabled": true, "alias": null, "schema": "stg_denver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "{{ env_var('BQ_DATASET_STG', 'stg_denver') }}"}, "created_at": 1761260990.625344, "relation_name": "`whyline-denver`.`stg_denver`.`int_stop_headways_observed`", "raw_code": "{{ config(materialized='view') }}\n\nwith base as (\n    select\n        route_id,\n        direction_id,\n        stop_id,\n        service_date_mst,\n        event_ts_utc\n    from {{ ref('int_rt_events_resolved') }}\n    where event_ts_utc is not null\n),\ndeduped as (\n    select\n        route_id,\n        direction_id,\n        stop_id,\n        service_date_mst,\n        event_ts_utc\n    from (\n        select\n            *,\n            row_number() over (\n                partition by route_id, direction_id, stop_id, service_date_mst, event_ts_utc\n                order by event_ts_utc\n            ) as event_rank\n        from base\n    )\n    where event_rank = 1\n)\n\nselect\n    route_id,\n    direction_id,\n    stop_id,\n    service_date_mst,\n    event_ts_utc,\n    timestamp_diff(\n        event_ts_utc,\n        lag(event_ts_utc) over (\n            partition by route_id, direction_id, stop_id, service_date_mst\n            order by event_ts_utc\n        ),\n        second\n    ) as obs_headway_sec\nfrom deduped", "language": "sql", "refs": [{"name": "int_rt_events_resolved", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.whylinedenver_dbt.int_rt_events_resolved"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/intermediate/int_stop_headways_observed.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n    select\n        route_id,\n        direction_id,\n        stop_id,\n        service_date_mst,\n        event_ts_utc\n    from `whyline-denver`.`stg_denver`.`int_rt_events_resolved`\n    where event_ts_utc is not null\n),\ndeduped as (\n    select\n        route_id,\n        direction_id,\n        stop_id,\n        service_date_mst,\n        event_ts_utc\n    from (\n        select\n            *,\n            row_number() over (\n                partition by route_id, direction_id, stop_id, service_date_mst, event_ts_utc\n                order by event_ts_utc\n            ) as event_rank\n        from base\n    )\n    where event_rank = 1\n)\n\nselect\n    route_id,\n    direction_id,\n    stop_id,\n    service_date_mst,\n    event_ts_utc,\n    timestamp_diff(\n        event_ts_utc,\n        lag(event_ts_utc) over (\n            partition by route_id, direction_id, stop_id, service_date_mst\n            order by event_ts_utc\n        ),\n        second\n    ) as obs_headway_sec\nfrom deduped", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.int_headway_adherence": {"database": "whyline-denver", "schema": "stg_denver", "name": "int_headway_adherence", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "intermediate/int_headway_adherence.sql", "original_file_path": "models/intermediate/int_headway_adherence.sql", "unique_id": "model.whylinedenver_dbt.int_headway_adherence", "fqn": ["whylinedenver_dbt", "intermediate", "int_headway_adherence"], "alias": "int_headway_adherence", "checksum": {"name": "sha256", "checksum": "2e060c15bcfe5046bf905c5550c72fe21369a6ac2cce51baaee9754d9e14a6e4"}, "config": {"enabled": true, "alias": null, "schema": "stg_denver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "{{ env_var('BQ_DATASET_STG', 'stg_denver') }}"}, "created_at": 1761260990.626663, "relation_name": "`whyline-denver`.`stg_denver`.`int_headway_adherence`", "raw_code": "{{ config(materialized='view') }}\n\nwith obs as (\n    select\n        route_id,\n        direction_id,\n        stop_id,\n        service_date_mst,\n        event_ts_utc,\n        obs_headway_sec\n    from {{ ref('int_stop_headways_observed') }}\n    where obs_headway_sec is not null\n),\nsch as (\n    select\n        route_id,\n        direction_id,\n        stop_id,\n        service_date_mst,\n        sched_arrival_ts_mst,\n        sch_headway_sec\n    from {{ ref('int_stop_headways_scheduled') }}\n    where sch_headway_sec is not null\n),\nnearest as (\n    select\n        o.route_id,\n        o.direction_id,\n        o.stop_id,\n        o.service_date_mst,\n        o.event_ts_utc,\n        o.obs_headway_sec,\n        s.sch_headway_sec,\n        abs(timestamp_diff(o.event_ts_utc, s.sched_arrival_ts_mst, second)) as dt_abs\n    from obs as o\n    join sch as s\n        on o.route_id = s.route_id\n        and coalesce(o.direction_id, -1) = coalesce(s.direction_id, -1)\n        and o.stop_id = s.stop_id\n        and o.service_date_mst = s.service_date_mst\n    qualify row_number() over (\n        partition by o.route_id, o.direction_id, o.stop_id, o.service_date_mst, o.event_ts_utc\n        order by dt_abs\n    ) = 1\n)\n\nselect\n    route_id,\n    direction_id,\n    stop_id,\n    service_date_mst,\n    event_ts_utc,\n    obs_headway_sec,\n    sch_headway_sec,\n    dt_abs,\n    case\n        when dt_abs <= {{ var('sched_match_tol_sec', 1800) }}\n         and sch_headway_sec > 0\n         and abs(obs_headway_sec - sch_headway_sec) / sch_headway_sec <= {{ var('headway_tol_ratio', 0.5) }}\n        then 1\n        else 0\n    end as headway_adherent\nfrom nearest", "language": "sql", "refs": [{"name": "int_stop_headways_observed", "package": null, "version": null}, {"name": "int_stop_headways_scheduled", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.whylinedenver_dbt.int_stop_headways_observed", "model.whylinedenver_dbt.int_stop_headways_scheduled"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/intermediate/int_headway_adherence.sql", "compiled": true, "compiled_code": "\n\nwith obs as (\n    select\n        route_id,\n        direction_id,\n        stop_id,\n        service_date_mst,\n        event_ts_utc,\n        obs_headway_sec\n    from `whyline-denver`.`stg_denver`.`int_stop_headways_observed`\n    where obs_headway_sec is not null\n),\nsch as (\n    select\n        route_id,\n        direction_id,\n        stop_id,\n        service_date_mst,\n        sched_arrival_ts_mst,\n        sch_headway_sec\n    from `whyline-denver`.`stg_denver`.`int_stop_headways_scheduled`\n    where sch_headway_sec is not null\n),\nnearest as (\n    select\n        o.route_id,\n        o.direction_id,\n        o.stop_id,\n        o.service_date_mst,\n        o.event_ts_utc,\n        o.obs_headway_sec,\n        s.sch_headway_sec,\n        abs(timestamp_diff(o.event_ts_utc, s.sched_arrival_ts_mst, second)) as dt_abs\n    from obs as o\n    join sch as s\n        on o.route_id = s.route_id\n        and coalesce(o.direction_id, -1) = coalesce(s.direction_id, -1)\n        and o.stop_id = s.stop_id\n        and o.service_date_mst = s.service_date_mst\n    qualify row_number() over (\n        partition by o.route_id, o.direction_id, o.stop_id, o.service_date_mst, o.event_ts_utc\n        order by dt_abs\n    ) = 1\n)\n\nselect\n    route_id,\n    direction_id,\n    stop_id,\n    service_date_mst,\n    event_ts_utc,\n    obs_headway_sec,\n    sch_headway_sec,\n    dt_abs,\n    case\n        when dt_abs <= 1800\n         and sch_headway_sec > 0\n         and abs(obs_headway_sec - sch_headway_sec) / sch_headway_sec <= 0.5\n        then 1\n        else 0\n    end as headway_adherent\nfrom nearest", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.int_rt_events_resolved": {"database": "whyline-denver", "schema": "stg_denver", "name": "int_rt_events_resolved", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "intermediate/int_rt_events_resolved.sql", "original_file_path": "models/intermediate/int_rt_events_resolved.sql", "unique_id": "model.whylinedenver_dbt.int_rt_events_resolved", "fqn": ["whylinedenver_dbt", "intermediate", "int_rt_events_resolved"], "alias": "int_rt_events_resolved", "checksum": {"name": "sha256", "checksum": "bd33253bcd71b2ed39d42952ae5ac469878febf265f7102d1900471e225cbdaa"}, "config": {"enabled": true, "alias": null, "schema": "stg_denver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "{{ env_var('BQ_DATASET_STG', 'stg_denver') }}"}, "created_at": 1761260990.6294, "relation_name": "`whyline-denver`.`stg_denver`.`int_rt_events_resolved`", "raw_code": "{{ config(materialized='view') }}\n\nwith base as (\n    select\n        route_id,\n        trip_id,\n        stop_id,\n        direction_id,\n        event_date_mst as service_date_mst,\n        event_hour_mst,\n        event_ts_utc,\n        arrival_delay_sec,\n        departure_delay_sec,\n        coalesce(arrival_delay_sec, departure_delay_sec) as delay_sec_raw,\n        coalesce(arrival_delay_sec, departure_delay_sec, 0) as delay_sec\n    from {{ ref('stg_rt_events') }}\n)\n\nselect\n    route_id,\n    trip_id,\n    stop_id,\n    direction_id,\n    service_date_mst,\n    event_hour_mst,\n    event_ts_utc,\n    delay_sec,\n    delay_sec_raw,\n    case\n        when abs(delay_sec) <= {{ var('on_time_sec', 300) }} then 1\n        else 0\n    end as is_on_time\nfrom base", "language": "sql", "refs": [{"name": "stg_rt_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.whylinedenver_dbt.stg_rt_events"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/intermediate/int_rt_events_resolved.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n    select\n        route_id,\n        trip_id,\n        stop_id,\n        direction_id,\n        event_date_mst as service_date_mst,\n        event_hour_mst,\n        event_ts_utc,\n        arrival_delay_sec,\n        departure_delay_sec,\n        coalesce(arrival_delay_sec, departure_delay_sec) as delay_sec_raw,\n        coalesce(arrival_delay_sec, departure_delay_sec, 0) as delay_sec\n    from `whyline-denver`.`stg_denver`.`stg_rt_events`\n)\n\nselect\n    route_id,\n    trip_id,\n    stop_id,\n    direction_id,\n    service_date_mst,\n    event_hour_mst,\n    event_ts_utc,\n    delay_sec,\n    delay_sec_raw,\n    case\n        when abs(delay_sec) <= 300 then 1\n        else 0\n    end as is_on_time\nfrom base", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.int_stop_headways_scheduled": {"database": "whyline-denver", "schema": "stg_denver", "name": "int_stop_headways_scheduled", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "intermediate/int_stop_headways_scheduled.sql", "original_file_path": "models/intermediate/int_stop_headways_scheduled.sql", "unique_id": "model.whylinedenver_dbt.int_stop_headways_scheduled", "fqn": ["whylinedenver_dbt", "intermediate", "int_stop_headways_scheduled"], "alias": "int_stop_headways_scheduled", "checksum": {"name": "sha256", "checksum": "04a05835347462bfa855bc4b35b0ca2dafb275c392279a865711e4c31090f5c4"}, "config": {"enabled": true, "alias": null, "schema": "stg_denver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "{{ env_var('BQ_DATASET_STG', 'stg_denver') }}"}, "created_at": 1761260990.6330419, "relation_name": "`whyline-denver`.`stg_denver`.`int_stop_headways_scheduled`", "raw_code": "{{ config(materialized='view') }}\n\nwith base as (\n    select\n        route_id,\n        direction_id,\n        stop_id,\n        service_date_mst,\n        sched_arrival_ts_mst\n    from {{ ref('int_scheduled_arrivals') }}\n    where sched_arrival_ts_mst is not null\n),\ndeduped as (\n    select\n        route_id,\n        direction_id,\n        stop_id,\n        service_date_mst,\n        sched_arrival_ts_mst,\n        row_number() over (\n            partition by route_id, direction_id, stop_id, service_date_mst, sched_arrival_ts_mst\n            order by sched_arrival_ts_mst\n        ) as arrival_rank\n    from base\n)\n\nselect\n    route_id,\n    direction_id,\n    stop_id,\n    service_date_mst,\n    sched_arrival_ts_mst,\n    timestamp_diff(\n        sched_arrival_ts_mst,\n        lag(sched_arrival_ts_mst) over (\n            partition by route_id, direction_id, stop_id, service_date_mst\n            order by sched_arrival_ts_mst\n        ),\n        second\n    ) as sch_headway_sec\nfrom deduped\nwhere arrival_rank = 1", "language": "sql", "refs": [{"name": "int_scheduled_arrivals", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.whylinedenver_dbt.int_scheduled_arrivals"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/intermediate/int_stop_headways_scheduled.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n    select\n        route_id,\n        direction_id,\n        stop_id,\n        service_date_mst,\n        sched_arrival_ts_mst\n    from `whyline-denver`.`stg_denver`.`int_scheduled_arrivals`\n    where sched_arrival_ts_mst is not null\n),\ndeduped as (\n    select\n        route_id,\n        direction_id,\n        stop_id,\n        service_date_mst,\n        sched_arrival_ts_mst,\n        row_number() over (\n            partition by route_id, direction_id, stop_id, service_date_mst, sched_arrival_ts_mst\n            order by sched_arrival_ts_mst\n        ) as arrival_rank\n    from base\n)\n\nselect\n    route_id,\n    direction_id,\n    stop_id,\n    service_date_mst,\n    sched_arrival_ts_mst,\n    timestamp_diff(\n        sched_arrival_ts_mst,\n        lag(sched_arrival_ts_mst) over (\n            partition by route_id, direction_id, stop_id, service_date_mst\n            order by sched_arrival_ts_mst\n        ),\n        second\n    ) as sch_headway_sec\nfrom deduped\nwhere arrival_rank = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.int_scheduled_arrivals": {"database": "whyline-denver", "schema": "stg_denver", "name": "int_scheduled_arrivals", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "intermediate/int_scheduled_arrivals.sql", "original_file_path": "models/intermediate/int_scheduled_arrivals.sql", "unique_id": "model.whylinedenver_dbt.int_scheduled_arrivals", "fqn": ["whylinedenver_dbt", "intermediate", "int_scheduled_arrivals"], "alias": "int_scheduled_arrivals", "checksum": {"name": "sha256", "checksum": "bb471577f9196a2b0ef7fd9494237f7fc28ebe49eafe5d833253d70f443dc4c5"}, "config": {"enabled": true, "alias": null, "schema": "stg_denver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "{{ env_var('BQ_DATASET_STG', 'stg_denver') }}"}, "created_at": 1761260990.6341171, "relation_name": "`whyline-denver`.`stg_denver`.`int_scheduled_arrivals`", "raw_code": "{{ config(materialized='view') }}\n\nwith st as (\n    select\n        trip_id,\n        stop_id,\n        stop_sequence,\n        nullif(arrival_time, '') as arrival_time,\n        nullif(departure_time, '') as departure_time\n    from {{ ref('stg_gtfs_stop_times') }}\n),\ntr as (\n    select\n        trip_id,\n        route_id,\n        direction_id,\n        case\n            when start_date is null or start_date = '' then null\n            else parse_date('%Y%m%d', start_date)\n        end as service_start_date\n    from {{ ref('stg_gtfs_trips') }}\n),\njoined as (\n    select\n        st.trip_id,\n        st.stop_id,\n        st.stop_sequence,\n        tr.route_id,\n        tr.direction_id,\n        case\n            when st.arrival_time is not null and tr.service_start_date is not null then\n                {{ gtfs_time_to_ts(\"tr.service_start_date\", \"st.arrival_time\") }}\n        end as sched_arrival_ts_mst,\n        case\n            when st.departure_time is not null and tr.service_start_date is not null then\n                {{ gtfs_time_to_ts(\"tr.service_start_date\", \"st.departure_time\") }}\n        end as sched_departure_ts_mst\n    from st\n    join tr\n        on st.trip_id = tr.trip_id\n)\n\nselect\n    trip_id,\n    stop_id,\n    stop_sequence,\n    route_id,\n    direction_id,\n    sched_arrival_ts_mst,\n    sched_departure_ts_mst,\n    {{ date_mst('coalesce(sched_arrival_ts_mst, sched_departure_ts_mst)') }} as service_date_mst\nfrom joined", "language": "sql", "refs": [{"name": "stg_gtfs_stop_times", "package": null, "version": null}, {"name": "stg_gtfs_trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.gtfs_time_to_ts", "macro.whylinedenver_dbt.date_mst"], "nodes": ["model.whylinedenver_dbt.stg_gtfs_stop_times", "model.whylinedenver_dbt.stg_gtfs_trips"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/intermediate/int_scheduled_arrivals.sql", "compiled": true, "compiled_code": "\n\nwith st as (\n    select\n        trip_id,\n        stop_id,\n        stop_sequence,\n        nullif(arrival_time, '') as arrival_time,\n        nullif(departure_time, '') as departure_time\n    from `whyline-denver`.`stg_denver`.`stg_gtfs_stop_times`\n),\ntr as (\n    select\n        trip_id,\n        route_id,\n        direction_id,\n        case\n            when start_date is null or start_date = '' then null\n            else parse_date('%Y%m%d', start_date)\n        end as service_start_date\n    from `whyline-denver`.`stg_denver`.`stg_gtfs_trips`\n),\njoined as (\n    select\n        st.trip_id,\n        st.stop_id,\n        st.stop_sequence,\n        tr.route_id,\n        tr.direction_id,\n        case\n            when st.arrival_time is not null and tr.service_start_date is not null then\n                \ntimestamp(\n    datetime(\n        date_add(\n            tr.service_start_date,\n            interval cast(floor(\n                safe_cast(split(st.arrival_time, ':')[offset(0)] as int64) / 24\n            ) as int64) day\n        ),\n        time(\n            mod(\n                safe_cast(split(st.arrival_time, ':')[offset(0)] as int64),\n                24\n            ),\n            safe_cast(split(st.arrival_time, ':')[offset(1)] as int64),\n            safe_cast(split(st.arrival_time, ':')[offset(2)] as int64)\n        )\n    ),\n    \"America/Denver\"\n)\n\n        end as sched_arrival_ts_mst,\n        case\n            when st.departure_time is not null and tr.service_start_date is not null then\n                \ntimestamp(\n    datetime(\n        date_add(\n            tr.service_start_date,\n            interval cast(floor(\n                safe_cast(split(st.departure_time, ':')[offset(0)] as int64) / 24\n            ) as int64) day\n        ),\n        time(\n            mod(\n                safe_cast(split(st.departure_time, ':')[offset(0)] as int64),\n                24\n            ),\n            safe_cast(split(st.departure_time, ':')[offset(1)] as int64),\n            safe_cast(split(st.departure_time, ':')[offset(2)] as int64)\n        )\n    ),\n    \"America/Denver\"\n)\n\n        end as sched_departure_ts_mst\n    from st\n    join tr\n        on st.trip_id = tr.trip_id\n)\n\nselect\n    trip_id,\n    stop_id,\n    stop_sequence,\n    route_id,\n    direction_id,\n    sched_arrival_ts_mst,\n    sched_departure_ts_mst,\n    \n    DATE(coalesce(sched_arrival_ts_mst, sched_departure_ts_mst), \"America/Denver\")\n as service_date_mst\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.int_weather_by_date": {"database": "whyline-denver", "schema": "stg_denver", "name": "int_weather_by_date", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "intermediate/int_weather_by_date.sql", "original_file_path": "models/intermediate/int_weather_by_date.sql", "unique_id": "model.whylinedenver_dbt.int_weather_by_date", "fqn": ["whylinedenver_dbt", "intermediate", "int_weather_by_date"], "alias": "int_weather_by_date", "checksum": {"name": "sha256", "checksum": "a3c8d72f3965bcf389b7c0f32d5a5b33f7ad49f47c17e959a62d3c13fae4efaa"}, "config": {"enabled": true, "alias": null, "schema": "stg_denver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "{{ env_var('BQ_DATASET_STG', 'stg_denver') }}"}, "created_at": 1761260990.6374578, "relation_name": "`whyline-denver`.`stg_denver`.`int_weather_by_date`", "raw_code": "{{ config(materialized='view') }}\n\nwith base as (\n    select\n        date,\n        station,\n        snow_day,\n        precip_bin,\n        precip_mm\n    from {{ ref('stg_weather') }}\n    {% if var('weather_station', none) is not none %}\n        where station = '{{ var(\"weather_station\") }}'\n    {% endif %}\n),\naggregated as (\n    select\n        date as service_date_mst,\n        max(coalesce(snow_day, 0)) as snow_day_flag,\n        array_agg(\n            precip_bin\n            ignore nulls\n            order by precip_mm desc\n        )[offset(0)] as precip_bin\n    from base\n    group by service_date_mst\n)\n\nselect\n    service_date_mst,\n    snow_day_flag > 0 as snow_day,\n    precip_bin\nfrom aggregated", "language": "sql", "refs": [{"name": "stg_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.whylinedenver_dbt.stg_weather"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/intermediate/int_weather_by_date.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n    select\n        date,\n        station,\n        snow_day,\n        precip_bin,\n        precip_mm\n    from `whyline-denver`.`stg_denver`.`stg_weather`\n    \n        where station = 'USW00023062'\n    \n),\naggregated as (\n    select\n        date as service_date_mst,\n        max(coalesce(snow_day, 0)) as snow_day_flag,\n        array_agg(\n            precip_bin\n            ignore nulls\n            order by precip_mm desc\n        )[offset(0)] as precip_bin\n    from base\n    group by service_date_mst\n)\n\nselect\n    service_date_mst,\n    snow_day_flag > 0 as snow_day,\n    precip_bin\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.whylinedenver_dbt.int_rt_daily_coverage": {"database": "whyline-denver", "schema": "stg_denver", "name": "int_rt_daily_coverage", "resource_type": "model", "package_name": "whylinedenver_dbt", "path": "intermediate/int_rt_daily_coverage.sql", "original_file_path": "models/intermediate/int_rt_daily_coverage.sql", "unique_id": "model.whylinedenver_dbt.int_rt_daily_coverage", "fqn": ["whylinedenver_dbt", "intermediate", "int_rt_daily_coverage"], "alias": "int_rt_daily_coverage", "checksum": {"name": "sha256", "checksum": "d49e13e54f0855910991716262c94ef12726ac150bcc10a899be9e1f57fc1660"}, "config": {"enabled": true, "alias": null, "schema": "stg_denver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "{{ env_var('BQ_DATASET_STG', 'stg_denver') }}"}, "created_at": 1761260990.6398458, "relation_name": "`whyline-denver`.`stg_denver`.`int_rt_daily_coverage`", "raw_code": "{{ config(materialized='view') }}\n\nselect\n    feed_date_mst,\n    event_rows,\n    trips_observed,\n    routes_observed,\n    current_timestamp() as build_run_at\nfrom {{ ref('stg_rt_events_daily_stats') }}", "language": "sql", "refs": [{"name": "stg_rt_events_daily_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.whylinedenver_dbt.stg_rt_events_daily_stats"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/intermediate/int_rt_daily_coverage.sql", "compiled": true, "compiled_code": "\n\nselect\n    feed_date_mst,\n    event_rows,\n    trips_observed,\n    routes_observed,\n    current_timestamp() as build_run_at\nfrom `whyline-denver`.`stg_denver`.`stg_rt_events_daily_stats`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.whylinedenver_dbt.not_null_stg_gtfs_routes_route_id.90a121a58c": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_stg_gtfs_routes_route_id", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_stg_gtfs_routes_route_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_stg_gtfs_routes_route_id.90a121a58c", "fqn": ["whylinedenver_dbt", "staging", "not_null_stg_gtfs_routes_route_id"], "alias": "not_null_stg_gtfs_routes_route_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.760287, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_gtfs_routes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_gtfs_routes"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/not_null_stg_gtfs_routes_route_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect route_id\nfrom `whyline-denver`.`stg_denver`.`stg_gtfs_routes`\nwhere route_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "route_id", "file_key_name": "models.stg_gtfs_routes", "attached_node": "model.whylinedenver_dbt.stg_gtfs_routes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "route_id", "model": "{{ get_where_subquery(ref('stg_gtfs_routes')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.unique_combination_stg_gtfs_routes_route_id.9084187a60": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "unique_combination_stg_gtfs_routes_route_id", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "unique_combination_stg_gtfs_routes_route_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.unique_combination_stg_gtfs_routes_route_id.9084187a60", "fqn": ["whylinedenver_dbt", "staging", "unique_combination_stg_gtfs_routes_route_id"], "alias": "unique_combination_stg_gtfs_routes_route_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.761038, "relation_name": null, "raw_code": "{{ test_unique_combination(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_gtfs_routes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.test_unique_combination", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_gtfs_routes"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/unique_combination_stg_gtfs_routes_route_id.sql", "compiled": true, "compiled_code": "\n    select\n        route_id\n    from `whyline-denver`.`stg_denver`.`stg_gtfs_routes`\n    group by route_id\n    having count(*) > 1\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_gtfs_routes", "attached_node": "model.whylinedenver_dbt.stg_gtfs_routes", "test_metadata": {"name": "unique_combination", "kwargs": {"column_names": ["route_id"], "model": "{{ get_where_subquery(ref('stg_gtfs_routes')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_stg_gtfs_stops_stop_id.c41a0f2d33": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_stg_gtfs_stops_stop_id", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_stg_gtfs_stops_stop_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_stg_gtfs_stops_stop_id.c41a0f2d33", "fqn": ["whylinedenver_dbt", "staging", "not_null_stg_gtfs_stops_stop_id"], "alias": "not_null_stg_gtfs_stops_stop_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.7686222, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_gtfs_stops", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_gtfs_stops"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/not_null_stg_gtfs_stops_stop_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect stop_id\nfrom `whyline-denver`.`stg_denver`.`stg_gtfs_stops`\nwhere stop_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stop_id", "file_key_name": "models.stg_gtfs_stops", "attached_node": "model.whylinedenver_dbt.stg_gtfs_stops", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stop_id", "model": "{{ get_where_subquery(ref('stg_gtfs_stops')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.unique_stg_gtfs_stops_stop_id.583c0cfb05": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "unique_stg_gtfs_stops_stop_id", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "unique_stg_gtfs_stops_stop_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.unique_stg_gtfs_stops_stop_id.583c0cfb05", "fqn": ["whylinedenver_dbt", "staging", "unique_stg_gtfs_stops_stop_id"], "alias": "unique_stg_gtfs_stops_stop_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.769205, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_gtfs_stops", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_gtfs_stops"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/unique_stg_gtfs_stops_stop_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select stop_id as unique_field\n  from `whyline-denver`.`stg_denver`.`stg_gtfs_stops`\n  where stop_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stop_id", "file_key_name": "models.stg_gtfs_stops", "attached_node": "model.whylinedenver_dbt.stg_gtfs_stops", "test_metadata": {"name": "unique", "kwargs": {"column_name": "stop_id", "model": "{{ get_where_subquery(ref('stg_gtfs_stops')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_stg_gtfs_stops_geom.0cd728f20a": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_stg_gtfs_stops_geom", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_stg_gtfs_stops_geom.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_stg_gtfs_stops_geom.0cd728f20a", "fqn": ["whylinedenver_dbt", "staging", "not_null_stg_gtfs_stops_geom"], "alias": "not_null_stg_gtfs_stops_geom", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.769789, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_gtfs_stops", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_gtfs_stops"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/not_null_stg_gtfs_stops_geom.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect geom\nfrom `whyline-denver`.`stg_denver`.`stg_gtfs_stops`\nwhere geom is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "geom", "file_key_name": "models.stg_gtfs_stops", "attached_node": "model.whylinedenver_dbt.stg_gtfs_stops", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "geom", "model": "{{ get_where_subquery(ref('stg_gtfs_stops')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_stg_gtfs_trips_trip_id.8fdc26c92c": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_stg_gtfs_trips_trip_id", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_stg_gtfs_trips_trip_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_stg_gtfs_trips_trip_id.8fdc26c92c", "fqn": ["whylinedenver_dbt", "staging", "not_null_stg_gtfs_trips_trip_id"], "alias": "not_null_stg_gtfs_trips_trip_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.7704582, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_gtfs_trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_gtfs_trips"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/not_null_stg_gtfs_trips_trip_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect trip_id\nfrom `whyline-denver`.`stg_denver`.`stg_gtfs_trips`\nwhere trip_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "trip_id", "file_key_name": "models.stg_gtfs_trips", "attached_node": "model.whylinedenver_dbt.stg_gtfs_trips", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "trip_id", "model": "{{ get_where_subquery(ref('stg_gtfs_trips')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.relationships_stg_gtfs_trips_route_id__route_id__ref_stg_gtfs_routes_.6ddfbb4248": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "relationships_stg_gtfs_trips_route_id__route_id__ref_stg_gtfs_routes_", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "relationships_stg_gtfs_trips_2dde58285d17422efc7442576dd5abe5.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.relationships_stg_gtfs_trips_route_id__route_id__ref_stg_gtfs_routes_.6ddfbb4248", "fqn": ["whylinedenver_dbt", "staging", "relationships_stg_gtfs_trips_route_id__route_id__ref_stg_gtfs_routes_"], "alias": "relationships_stg_gtfs_trips_2dde58285d17422efc7442576dd5abe5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_gtfs_trips_2dde58285d17422efc7442576dd5abe5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_gtfs_trips_2dde58285d17422efc7442576dd5abe5"}, "created_at": 1761260990.7710452, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_gtfs_trips_2dde58285d17422efc7442576dd5abe5\") }}", "language": "sql", "refs": [{"name": "stg_gtfs_routes", "package": null, "version": null}, {"name": "stg_gtfs_trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_gtfs_routes", "model.whylinedenver_dbt.stg_gtfs_trips"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/relationships_stg_gtfs_trips_2dde58285d17422efc7442576dd5abe5.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select route_id as from_field\n    from `whyline-denver`.`stg_denver`.`stg_gtfs_trips`\n    where route_id is not null\n),\n\nparent as (\n    select route_id as to_field\n    from `whyline-denver`.`stg_denver`.`stg_gtfs_routes`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "route_id", "file_key_name": "models.stg_gtfs_trips", "attached_node": "model.whylinedenver_dbt.stg_gtfs_trips", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_gtfs_routes')", "field": "route_id", "column_name": "route_id", "model": "{{ get_where_subquery(ref('stg_gtfs_trips')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_stg_gtfs_stop_times_trip_id.aff3052922": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_stg_gtfs_stop_times_trip_id", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_stg_gtfs_stop_times_trip_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_stg_gtfs_stop_times_trip_id.aff3052922", "fqn": ["whylinedenver_dbt", "staging", "not_null_stg_gtfs_stop_times_trip_id"], "alias": "not_null_stg_gtfs_stop_times_trip_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.77403, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_gtfs_stop_times", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_gtfs_stop_times"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/not_null_stg_gtfs_stop_times_trip_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect trip_id\nfrom `whyline-denver`.`stg_denver`.`stg_gtfs_stop_times`\nwhere trip_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "trip_id", "file_key_name": "models.stg_gtfs_stop_times", "attached_node": "model.whylinedenver_dbt.stg_gtfs_stop_times", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "trip_id", "model": "{{ get_where_subquery(ref('stg_gtfs_stop_times')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_stg_gtfs_stop_times_stop_id.2ed25f210c": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_stg_gtfs_stop_times_stop_id", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_stg_gtfs_stop_times_stop_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_stg_gtfs_stop_times_stop_id.2ed25f210c", "fqn": ["whylinedenver_dbt", "staging", "not_null_stg_gtfs_stop_times_stop_id"], "alias": "not_null_stg_gtfs_stop_times_stop_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.7747278, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_gtfs_stop_times", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_gtfs_stop_times"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/not_null_stg_gtfs_stop_times_stop_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect stop_id\nfrom `whyline-denver`.`stg_denver`.`stg_gtfs_stop_times`\nwhere stop_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stop_id", "file_key_name": "models.stg_gtfs_stop_times", "attached_node": "model.whylinedenver_dbt.stg_gtfs_stop_times", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stop_id", "model": "{{ get_where_subquery(ref('stg_gtfs_stop_times')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_stg_rt_events_feed_ts_utc.775d390db9": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_stg_rt_events_feed_ts_utc", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_stg_rt_events_feed_ts_utc.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_stg_rt_events_feed_ts_utc.775d390db9", "fqn": ["whylinedenver_dbt", "staging", "not_null_stg_rt_events_feed_ts_utc"], "alias": "not_null_stg_rt_events_feed_ts_utc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.775297, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_rt_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_rt_events"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/not_null_stg_rt_events_feed_ts_utc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect feed_ts_utc\nfrom `whyline-denver`.`stg_denver`.`stg_rt_events`\nwhere feed_ts_utc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "feed_ts_utc", "file_key_name": "models.stg_rt_events", "attached_node": "model.whylinedenver_dbt.stg_rt_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "feed_ts_utc", "model": "{{ get_where_subquery(ref('stg_rt_events')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_stg_rt_events_route_id.0a55159ab0": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_stg_rt_events_route_id", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_stg_rt_events_route_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_stg_rt_events_route_id.0a55159ab0", "fqn": ["whylinedenver_dbt", "staging", "not_null_stg_rt_events_route_id"], "alias": "not_null_stg_rt_events_route_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.775856, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_rt_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_rt_events"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/not_null_stg_rt_events_route_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect route_id\nfrom `whyline-denver`.`stg_denver`.`stg_rt_events`\nwhere route_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "route_id", "file_key_name": "models.stg_rt_events", "attached_node": "model.whylinedenver_dbt.stg_rt_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "route_id", "model": "{{ get_where_subquery(ref('stg_rt_events')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.relationships_stg_rt_events_route_id__route_id__ref_stg_gtfs_routes_.ad52082e1f": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "relationships_stg_rt_events_route_id__route_id__ref_stg_gtfs_routes_", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "relationships_stg_rt_events_5616abdcfab0b57a95b8c6f4e94354d0.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.relationships_stg_rt_events_route_id__route_id__ref_stg_gtfs_routes_.ad52082e1f", "fqn": ["whylinedenver_dbt", "staging", "relationships_stg_rt_events_route_id__route_id__ref_stg_gtfs_routes_"], "alias": "relationships_stg_rt_events_5616abdcfab0b57a95b8c6f4e94354d0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_rt_events_5616abdcfab0b57a95b8c6f4e94354d0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_rt_events_5616abdcfab0b57a95b8c6f4e94354d0"}, "created_at": 1761260990.7764301, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_rt_events_5616abdcfab0b57a95b8c6f4e94354d0\") }}", "language": "sql", "refs": [{"name": "stg_gtfs_routes", "package": null, "version": null}, {"name": "stg_rt_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_gtfs_routes", "model.whylinedenver_dbt.stg_rt_events"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/relationships_stg_rt_events_5616abdcfab0b57a95b8c6f4e94354d0.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select route_id as from_field\n    from `whyline-denver`.`stg_denver`.`stg_rt_events`\n    where route_id is not null\n),\n\nparent as (\n    select route_id as to_field\n    from `whyline-denver`.`stg_denver`.`stg_gtfs_routes`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "route_id", "file_key_name": "models.stg_rt_events", "attached_node": "model.whylinedenver_dbt.stg_rt_events", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_gtfs_routes')", "field": "route_id", "column_name": "route_id", "model": "{{ get_where_subquery(ref('stg_rt_events')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_stg_rt_events_trip_id.f684dd299f": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_stg_rt_events_trip_id", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_stg_rt_events_trip_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_stg_rt_events_trip_id.f684dd299f", "fqn": ["whylinedenver_dbt", "staging", "not_null_stg_rt_events_trip_id"], "alias": "not_null_stg_rt_events_trip_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.778284, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_rt_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_rt_events"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/not_null_stg_rt_events_trip_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect trip_id\nfrom `whyline-denver`.`stg_denver`.`stg_rt_events`\nwhere trip_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "trip_id", "file_key_name": "models.stg_rt_events", "attached_node": "model.whylinedenver_dbt.stg_rt_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "trip_id", "model": "{{ get_where_subquery(ref('stg_rt_events')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_stg_rt_events_event_ts_utc.f22cf61748": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_stg_rt_events_event_ts_utc", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_stg_rt_events_event_ts_utc.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_stg_rt_events_event_ts_utc.f22cf61748", "fqn": ["whylinedenver_dbt", "staging", "not_null_stg_rt_events_event_ts_utc"], "alias": "not_null_stg_rt_events_event_ts_utc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.7788448, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_rt_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_rt_events"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/not_null_stg_rt_events_event_ts_utc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_ts_utc\nfrom `whyline-denver`.`stg_denver`.`stg_rt_events`\nwhere event_ts_utc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "event_ts_utc", "file_key_name": "models.stg_rt_events", "attached_node": "model.whylinedenver_dbt.stg_rt_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_ts_utc", "model": "{{ get_where_subquery(ref('stg_rt_events')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_stg_denver_crashes_crash_id.2d4abfa048": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_stg_denver_crashes_crash_id", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_stg_denver_crashes_crash_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_stg_denver_crashes_crash_id.2d4abfa048", "fqn": ["whylinedenver_dbt", "staging", "not_null_stg_denver_crashes_crash_id"], "alias": "not_null_stg_denver_crashes_crash_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.779409, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_denver_crashes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_denver_crashes"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/not_null_stg_denver_crashes_crash_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect crash_id\nfrom `whyline-denver`.`stg_denver`.`stg_denver_crashes`\nwhere crash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "crash_id", "file_key_name": "models.stg_denver_crashes", "attached_node": "model.whylinedenver_dbt.stg_denver_crashes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "crash_id", "model": "{{ get_where_subquery(ref('stg_denver_crashes')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.unique_stg_denver_crashes_crash_id.3a8a6a41c9": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "unique_stg_denver_crashes_crash_id", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "unique_stg_denver_crashes_crash_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.unique_stg_denver_crashes_crash_id.3a8a6a41c9", "fqn": ["whylinedenver_dbt", "staging", "unique_stg_denver_crashes_crash_id"], "alias": "unique_stg_denver_crashes_crash_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.779959, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_denver_crashes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_denver_crashes"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/unique_stg_denver_crashes_crash_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select crash_id as unique_field\n  from `whyline-denver`.`stg_denver`.`stg_denver_crashes`\n  where crash_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "crash_id", "file_key_name": "models.stg_denver_crashes", "attached_node": "model.whylinedenver_dbt.stg_denver_crashes", "test_metadata": {"name": "unique", "kwargs": {"column_name": "crash_id", "model": "{{ get_where_subquery(ref('stg_denver_crashes')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_stg_denver_crashes_event_ts_utc.f0325f0894": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_stg_denver_crashes_event_ts_utc", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_stg_denver_crashes_event_ts_utc.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_stg_denver_crashes_event_ts_utc.f0325f0894", "fqn": ["whylinedenver_dbt", "staging", "not_null_stg_denver_crashes_event_ts_utc"], "alias": "not_null_stg_denver_crashes_event_ts_utc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.780509, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_denver_crashes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_denver_crashes"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/not_null_stg_denver_crashes_event_ts_utc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_ts_utc\nfrom `whyline-denver`.`stg_denver`.`stg_denver_crashes`\nwhere event_ts_utc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "event_ts_utc", "file_key_name": "models.stg_denver_crashes", "attached_node": "model.whylinedenver_dbt.stg_denver_crashes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_ts_utc", "model": "{{ get_where_subquery(ref('stg_denver_crashes')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_stg_denver_crashes_geom.46d75afae2": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_stg_denver_crashes_geom", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_stg_denver_crashes_geom.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_stg_denver_crashes_geom.46d75afae2", "fqn": ["whylinedenver_dbt", "staging", "not_null_stg_denver_crashes_geom"], "alias": "not_null_stg_denver_crashes_geom", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.781114, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_denver_crashes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_denver_crashes"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/not_null_stg_denver_crashes_geom.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect geom\nfrom `whyline-denver`.`stg_denver`.`stg_denver_crashes`\nwhere geom is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "geom", "file_key_name": "models.stg_denver_crashes", "attached_node": "model.whylinedenver_dbt.stg_denver_crashes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "geom", "model": "{{ get_where_subquery(ref('stg_denver_crashes')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_stg_sidewalks_sidewalk_id.a2404992b6": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_stg_sidewalks_sidewalk_id", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_stg_sidewalks_sidewalk_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_stg_sidewalks_sidewalk_id.a2404992b6", "fqn": ["whylinedenver_dbt", "staging", "not_null_stg_sidewalks_sidewalk_id"], "alias": "not_null_stg_sidewalks_sidewalk_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.781677, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sidewalks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_sidewalks"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/not_null_stg_sidewalks_sidewalk_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sidewalk_id\nfrom `whyline-denver`.`stg_denver`.`stg_sidewalks`\nwhere sidewalk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sidewalk_id", "file_key_name": "models.stg_sidewalks", "attached_node": "model.whylinedenver_dbt.stg_sidewalks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sidewalk_id", "model": "{{ get_where_subquery(ref('stg_sidewalks')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_stg_sidewalks_geom.4b37ed0d6c": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_stg_sidewalks_geom", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_stg_sidewalks_geom.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_stg_sidewalks_geom.4b37ed0d6c", "fqn": ["whylinedenver_dbt", "staging", "not_null_stg_sidewalks_geom"], "alias": "not_null_stg_sidewalks_geom", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.782222, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sidewalks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_sidewalks"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/not_null_stg_sidewalks_geom.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect geom\nfrom `whyline-denver`.`stg_denver`.`stg_sidewalks`\nwhere geom is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "geom", "file_key_name": "models.stg_sidewalks", "attached_node": "model.whylinedenver_dbt.stg_sidewalks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "geom", "model": "{{ get_where_subquery(ref('stg_sidewalks')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.accepted_range_stg_sidewalks_length_m__True__0.64eabe607d": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "accepted_range_stg_sidewalks_length_m__True__0", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "accepted_range_stg_sidewalks_length_m__True__0.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.accepted_range_stg_sidewalks_length_m__True__0.64eabe607d", "fqn": ["whylinedenver_dbt", "staging", "accepted_range_stg_sidewalks_length_m__True__0"], "alias": "accepted_range_stg_sidewalks_length_m__True__0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.782777, "relation_name": null, "raw_code": "{{ test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sidewalks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_sidewalks"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/accepted_range_stg_sidewalks_length_m__True__0.sql", "compiled": true, "compiled_code": "\n    select\n        length_m as value\n    from `whyline-denver`.`stg_denver`.`stg_sidewalks`\n    where 1 = 1\n        and length_m <= 0\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "length_m", "file_key_name": "models.stg_sidewalks", "attached_node": "model.whylinedenver_dbt.stg_sidewalks", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "exclusive_min": true, "column_name": "length_m", "model": "{{ get_where_subquery(ref('stg_sidewalks')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_stg_weather_date.2c564dee75": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_stg_weather_date", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_stg_weather_date.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_stg_weather_date.2c564dee75", "fqn": ["whylinedenver_dbt", "staging", "not_null_stg_weather_date"], "alias": "not_null_stg_weather_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.785355, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_weather"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/not_null_stg_weather_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `whyline-denver`.`stg_denver`.`stg_weather`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.stg_weather", "attached_node": "model.whylinedenver_dbt.stg_weather", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_weather')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_stg_weather_station.e234422657": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_stg_weather_station", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_stg_weather_station.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_stg_weather_station.e234422657", "fqn": ["whylinedenver_dbt", "staging", "not_null_stg_weather_station"], "alias": "not_null_stg_weather_station", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.785917, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_weather"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/not_null_stg_weather_station.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect station\nfrom `whyline-denver`.`stg_denver`.`stg_weather`\nwhere station is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "station", "file_key_name": "models.stg_weather", "attached_node": "model.whylinedenver_dbt.stg_weather", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "station", "model": "{{ get_where_subquery(ref('stg_weather')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.unique_combination_stg_weather_date__station.06c87a9009": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "unique_combination_stg_weather_date__station", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "unique_combination_stg_weather_date__station.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.unique_combination_stg_weather_date__station.06c87a9009", "fqn": ["whylinedenver_dbt", "staging", "unique_combination_stg_weather_date__station"], "alias": "unique_combination_stg_weather_date__station", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.786488, "relation_name": null, "raw_code": "{{ test_unique_combination(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.test_unique_combination", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_weather"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/unique_combination_stg_weather_date__station.sql", "compiled": true, "compiled_code": "\n    select\n        date, station\n    from `whyline-denver`.`stg_denver`.`stg_weather`\n    group by date, station\n    having count(*) > 1\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_weather", "attached_node": "model.whylinedenver_dbt.stg_weather", "test_metadata": {"name": "unique_combination", "kwargs": {"column_names": ["date", "station"], "model": "{{ get_where_subquery(ref('stg_weather')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_stg_acs_geo_geoid.e06639a503": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_stg_acs_geo_geoid", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_stg_acs_geo_geoid.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_stg_acs_geo_geoid.e06639a503", "fqn": ["whylinedenver_dbt", "staging", "not_null_stg_acs_geo_geoid"], "alias": "not_null_stg_acs_geo_geoid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.787946, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_acs_geo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_acs_geo"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/not_null_stg_acs_geo_geoid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect geoid\nfrom `whyline-denver`.`stg_denver`.`stg_acs_geo`\nwhere geoid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "geoid", "file_key_name": "models.stg_acs_geo", "attached_node": "model.whylinedenver_dbt.stg_acs_geo", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "geoid", "model": "{{ get_where_subquery(ref('stg_acs_geo')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.unique_stg_acs_geo_geoid.15e2f3f645": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "unique_stg_acs_geo_geoid", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "unique_stg_acs_geo_geoid.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.unique_stg_acs_geo_geoid.15e2f3f645", "fqn": ["whylinedenver_dbt", "staging", "unique_stg_acs_geo_geoid"], "alias": "unique_stg_acs_geo_geoid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.788513, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_acs_geo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_acs_geo"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/unique_stg_acs_geo_geoid.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select geoid as unique_field\n  from `whyline-denver`.`stg_denver`.`stg_acs_geo`\n  where geoid is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "geoid", "file_key_name": "models.stg_acs_geo", "attached_node": "model.whylinedenver_dbt.stg_acs_geo", "test_metadata": {"name": "unique", "kwargs": {"column_name": "geoid", "model": "{{ get_where_subquery(ref('stg_acs_geo')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.accepted_range_stg_acs_geo_pct_hh_no_vehicle__1__0.bb26d27cf8": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "accepted_range_stg_acs_geo_pct_hh_no_vehicle__1__0", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "accepted_range_stg_acs_geo_pct_hh_no_vehicle__1__0.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.accepted_range_stg_acs_geo_pct_hh_no_vehicle__1__0.bb26d27cf8", "fqn": ["whylinedenver_dbt", "staging", "accepted_range_stg_acs_geo_pct_hh_no_vehicle__1__0"], "alias": "accepted_range_stg_acs_geo_pct_hh_no_vehicle__1__0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.7891068, "relation_name": null, "raw_code": "{{ test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_acs_geo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_acs_geo"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/accepted_range_stg_acs_geo_pct_hh_no_vehicle__1__0.sql", "compiled": true, "compiled_code": "\n    select\n        pct_hh_no_vehicle as value\n    from `whyline-denver`.`stg_denver`.`stg_acs_geo`\n    where 1 = 1\n        and pct_hh_no_vehicle < 0\n        and pct_hh_no_vehicle > 1\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_hh_no_vehicle", "file_key_name": "models.stg_acs_geo", "attached_node": "model.whylinedenver_dbt.stg_acs_geo", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_hh_no_vehicle", "model": "{{ get_where_subquery(ref('stg_acs_geo')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.accepted_range_stg_acs_geo_pct_transit_commute__1__0.54a46fa8b6": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "accepted_range_stg_acs_geo_pct_transit_commute__1__0", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "accepted_range_stg_acs_geo_pct_transit_commute__1__0.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.accepted_range_stg_acs_geo_pct_transit_commute__1__0.54a46fa8b6", "fqn": ["whylinedenver_dbt", "staging", "accepted_range_stg_acs_geo_pct_transit_commute__1__0"], "alias": "accepted_range_stg_acs_geo_pct_transit_commute__1__0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.790499, "relation_name": null, "raw_code": "{{ test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_acs_geo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_acs_geo"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/accepted_range_stg_acs_geo_pct_transit_commute__1__0.sql", "compiled": true, "compiled_code": "\n    select\n        pct_transit_commute as value\n    from `whyline-denver`.`stg_denver`.`stg_acs_geo`\n    where 1 = 1\n        and pct_transit_commute < 0\n        and pct_transit_commute > 1\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_transit_commute", "file_key_name": "models.stg_acs_geo", "attached_node": "model.whylinedenver_dbt.stg_acs_geo", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_transit_commute", "model": "{{ get_where_subquery(ref('stg_acs_geo')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.accepted_range_stg_acs_geo_pct_poverty__1__0.c2276b8664": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "accepted_range_stg_acs_geo_pct_poverty__1__0", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "accepted_range_stg_acs_geo_pct_poverty__1__0.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.accepted_range_stg_acs_geo_pct_poverty__1__0.c2276b8664", "fqn": ["whylinedenver_dbt", "staging", "accepted_range_stg_acs_geo_pct_poverty__1__0"], "alias": "accepted_range_stg_acs_geo_pct_poverty__1__0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.7919428, "relation_name": null, "raw_code": "{{ test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_acs_geo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_acs_geo"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/accepted_range_stg_acs_geo_pct_poverty__1__0.sql", "compiled": true, "compiled_code": "\n    select\n        pct_poverty as value\n    from `whyline-denver`.`stg_denver`.`stg_acs_geo`\n    where 1 = 1\n        and pct_poverty < 0\n        and pct_poverty > 1\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_poverty", "file_key_name": "models.stg_acs_geo", "attached_node": "model.whylinedenver_dbt.stg_acs_geo", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_poverty", "model": "{{ get_where_subquery(ref('stg_acs_geo')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_stg_denver_tracts_geoid.12a4276960": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_stg_denver_tracts_geoid", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_stg_denver_tracts_geoid.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_stg_denver_tracts_geoid.12a4276960", "fqn": ["whylinedenver_dbt", "staging", "not_null_stg_denver_tracts_geoid"], "alias": "not_null_stg_denver_tracts_geoid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.7932959, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_denver_tracts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_denver_tracts"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/not_null_stg_denver_tracts_geoid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect geoid\nfrom `whyline-denver`.`stg_denver`.`stg_denver_tracts`\nwhere geoid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "geoid", "file_key_name": "models.stg_denver_tracts", "attached_node": "model.whylinedenver_dbt.stg_denver_tracts", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "geoid", "model": "{{ get_where_subquery(ref('stg_denver_tracts')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.unique_stg_denver_tracts_geoid.41744673c0": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "unique_stg_denver_tracts_geoid", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "unique_stg_denver_tracts_geoid.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.unique_stg_denver_tracts_geoid.41744673c0", "fqn": ["whylinedenver_dbt", "staging", "unique_stg_denver_tracts_geoid"], "alias": "unique_stg_denver_tracts_geoid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.793945, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_denver_tracts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_denver_tracts"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/unique_stg_denver_tracts_geoid.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select geoid as unique_field\n  from `whyline-denver`.`stg_denver`.`stg_denver_tracts`\n  where geoid is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "geoid", "file_key_name": "models.stg_denver_tracts", "attached_node": "model.whylinedenver_dbt.stg_denver_tracts", "test_metadata": {"name": "unique", "kwargs": {"column_name": "geoid", "model": "{{ get_where_subquery(ref('stg_denver_tracts')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_stg_denver_tracts_name.73c03e7de3": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_stg_denver_tracts_name", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_stg_denver_tracts_name.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_stg_denver_tracts_name.73c03e7de3", "fqn": ["whylinedenver_dbt", "staging", "not_null_stg_denver_tracts_name"], "alias": "not_null_stg_denver_tracts_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.7944992, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_denver_tracts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_denver_tracts"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/not_null_stg_denver_tracts_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom `whyline-denver`.`stg_denver`.`stg_denver_tracts`\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.stg_denver_tracts", "attached_node": "model.whylinedenver_dbt.stg_denver_tracts", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('stg_denver_tracts')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_stg_denver_tracts_aland_m2.d22cd1914e": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_stg_denver_tracts_aland_m2", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_stg_denver_tracts_aland_m2.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_stg_denver_tracts_aland_m2.d22cd1914e", "fqn": ["whylinedenver_dbt", "staging", "not_null_stg_denver_tracts_aland_m2"], "alias": "not_null_stg_denver_tracts_aland_m2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.795043, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_denver_tracts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_denver_tracts"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/not_null_stg_denver_tracts_aland_m2.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect aland_m2\nfrom `whyline-denver`.`stg_denver`.`stg_denver_tracts`\nwhere aland_m2 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "aland_m2", "file_key_name": "models.stg_denver_tracts", "attached_node": "model.whylinedenver_dbt.stg_denver_tracts", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "aland_m2", "model": "{{ get_where_subquery(ref('stg_denver_tracts')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_stg_denver_tracts_geom.45f12da7f2": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_stg_denver_tracts_geom", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_stg_denver_tracts_geom.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_stg_denver_tracts_geom.45f12da7f2", "fqn": ["whylinedenver_dbt", "staging", "not_null_stg_denver_tracts_geom"], "alias": "not_null_stg_denver_tracts_geom", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.795587, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_denver_tracts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_denver_tracts"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/staging/schema.yml/not_null_stg_denver_tracts_geom.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect geom\nfrom `whyline-denver`.`stg_denver`.`stg_denver_tracts`\nwhere geom is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "geom", "file_key_name": "models.stg_denver_tracts", "attached_node": "model.whylinedenver_dbt.stg_denver_tracts", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "geom", "model": "{{ get_where_subquery(ref('stg_denver_tracts')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_mart_reliability_by_route_day_route_id.b843d7f52f": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_mart_reliability_by_route_day_route_id", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_mart_reliability_by_route_day_route_id.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_mart_reliability_by_route_day_route_id.b843d7f52f", "fqn": ["whylinedenver_dbt", "marts", "not_null_mart_reliability_by_route_day_route_id"], "alias": "not_null_mart_reliability_by_route_day_route_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.8002439, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_reliability_by_route_day", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_reliability_by_route_day"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/not_null_mart_reliability_by_route_day_route_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect route_id\nfrom `whyline-denver`.`mart_denver`.`mart_reliability_by_route_day`\nwhere route_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "route_id", "file_key_name": "models.mart_reliability_by_route_day", "attached_node": "model.whylinedenver_dbt.mart_reliability_by_route_day", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "route_id", "model": "{{ get_where_subquery(ref('mart_reliability_by_route_day')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.relationships_mart_reliability_by_route_day_route_id__route_id__ref_stg_gtfs_routes_.e3178fa75e": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "relationships_mart_reliability_by_route_day_route_id__route_id__ref_stg_gtfs_routes_", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "relationships_mart_reliability_22d92b58b816ed73a1490d8417307b2b.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.relationships_mart_reliability_by_route_day_route_id__route_id__ref_stg_gtfs_routes_.e3178fa75e", "fqn": ["whylinedenver_dbt", "marts", "relationships_mart_reliability_by_route_day_route_id__route_id__ref_stg_gtfs_routes_"], "alias": "relationships_mart_reliability_22d92b58b816ed73a1490d8417307b2b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_mart_reliability_22d92b58b816ed73a1490d8417307b2b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_mart_reliability_22d92b58b816ed73a1490d8417307b2b"}, "created_at": 1761260990.800836, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_mart_reliability_22d92b58b816ed73a1490d8417307b2b\") }}", "language": "sql", "refs": [{"name": "stg_gtfs_routes", "package": null, "version": null}, {"name": "mart_reliability_by_route_day", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_gtfs_routes", "model.whylinedenver_dbt.mart_reliability_by_route_day"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/relationships_mart_reliability_22d92b58b816ed73a1490d8417307b2b.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select route_id as from_field\n    from `whyline-denver`.`mart_denver`.`mart_reliability_by_route_day`\n    where route_id is not null\n),\n\nparent as (\n    select route_id as to_field\n    from `whyline-denver`.`stg_denver`.`stg_gtfs_routes`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "route_id", "file_key_name": "models.mart_reliability_by_route_day", "attached_node": "model.whylinedenver_dbt.mart_reliability_by_route_day", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_gtfs_routes')", "field": "route_id", "column_name": "route_id", "model": "{{ get_where_subquery(ref('mart_reliability_by_route_day')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_mart_reliability_by_route_day_service_date_mst.17009ac7e5": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_mart_reliability_by_route_day_service_date_mst", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_mart_reliability_by_route_day_service_date_mst.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_mart_reliability_by_route_day_service_date_mst.17009ac7e5", "fqn": ["whylinedenver_dbt", "marts", "not_null_mart_reliability_by_route_day_service_date_mst"], "alias": "not_null_mart_reliability_by_route_day_service_date_mst", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.802669, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_reliability_by_route_day", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_reliability_by_route_day"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/not_null_mart_reliability_by_route_day_service_date_mst.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect service_date_mst\nfrom `whyline-denver`.`mart_denver`.`mart_reliability_by_route_day`\nwhere service_date_mst is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "service_date_mst", "file_key_name": "models.mart_reliability_by_route_day", "attached_node": "model.whylinedenver_dbt.mart_reliability_by_route_day", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "service_date_mst", "model": "{{ get_where_subquery(ref('mart_reliability_by_route_day')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_mart_reliability_by_route_day_precip_bin.6430d0982c": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_mart_reliability_by_route_day_precip_bin", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_mart_reliability_by_route_day_precip_bin.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_mart_reliability_by_route_day_precip_bin.6430d0982c", "fqn": ["whylinedenver_dbt", "marts", "not_null_mart_reliability_by_route_day_precip_bin"], "alias": "not_null_mart_reliability_by_route_day_precip_bin", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.803244, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_reliability_by_route_day", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_reliability_by_route_day"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/not_null_mart_reliability_by_route_day_precip_bin.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect precip_bin\nfrom `whyline-denver`.`mart_denver`.`mart_reliability_by_route_day`\nwhere precip_bin is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "precip_bin", "file_key_name": "models.mart_reliability_by_route_day", "attached_node": "model.whylinedenver_dbt.mart_reliability_by_route_day", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "precip_bin", "model": "{{ get_where_subquery(ref('mart_reliability_by_route_day')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.accepted_range_mart_reliability_by_route_day_pct_on_time__1__0.bce527d1c7": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "accepted_range_mart_reliability_by_route_day_pct_on_time__1__0", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "accepted_range_mart_reliability_by_route_day_pct_on_time__1__0.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.accepted_range_mart_reliability_by_route_day_pct_on_time__1__0.bce527d1c7", "fqn": ["whylinedenver_dbt", "marts", "accepted_range_mart_reliability_by_route_day_pct_on_time__1__0"], "alias": "accepted_range_mart_reliability_by_route_day_pct_on_time__1__0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.803808, "relation_name": null, "raw_code": "{{ test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_reliability_by_route_day", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_reliability_by_route_day"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/accepted_range_mart_reliability_by_route_day_pct_on_time__1__0.sql", "compiled": true, "compiled_code": "\n    select\n        pct_on_time as value\n    from `whyline-denver`.`mart_denver`.`mart_reliability_by_route_day`\n    where 1 = 1\n        and pct_on_time < 0\n        and pct_on_time > 1\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_on_time", "file_key_name": "models.mart_reliability_by_route_day", "attached_node": "model.whylinedenver_dbt.mart_reliability_by_route_day", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_on_time", "model": "{{ get_where_subquery(ref('mart_reliability_by_route_day')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_mart_reliability_by_stop_hour_stop_id.fd67b3e72f": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_mart_reliability_by_stop_hour_stop_id", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_mart_reliability_by_stop_hour_stop_id.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_mart_reliability_by_stop_hour_stop_id.fd67b3e72f", "fqn": ["whylinedenver_dbt", "marts", "not_null_mart_reliability_by_stop_hour_stop_id"], "alias": "not_null_mart_reliability_by_stop_hour_stop_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.80525, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_reliability_by_stop_hour", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_reliability_by_stop_hour"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/not_null_mart_reliability_by_stop_hour_stop_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect stop_id\nfrom `whyline-denver`.`mart_denver`.`mart_reliability_by_stop_hour`\nwhere stop_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stop_id", "file_key_name": "models.mart_reliability_by_stop_hour", "attached_node": "model.whylinedenver_dbt.mart_reliability_by_stop_hour", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stop_id", "model": "{{ get_where_subquery(ref('mart_reliability_by_stop_hour')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.relationships_mart_reliability_by_stop_hour_stop_id__stop_id__ref_stg_gtfs_stops_.dcfe963153": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "relationships_mart_reliability_by_stop_hour_stop_id__stop_id__ref_stg_gtfs_stops_", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "relationships_mart_reliability_1b9dabc1dc3c1da314c9d22aa5d07535.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.relationships_mart_reliability_by_stop_hour_stop_id__stop_id__ref_stg_gtfs_stops_.dcfe963153", "fqn": ["whylinedenver_dbt", "marts", "relationships_mart_reliability_by_stop_hour_stop_id__stop_id__ref_stg_gtfs_stops_"], "alias": "relationships_mart_reliability_1b9dabc1dc3c1da314c9d22aa5d07535", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_mart_reliability_1b9dabc1dc3c1da314c9d22aa5d07535", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_mart_reliability_1b9dabc1dc3c1da314c9d22aa5d07535"}, "created_at": 1761260990.805828, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_mart_reliability_1b9dabc1dc3c1da314c9d22aa5d07535\") }}", "language": "sql", "refs": [{"name": "stg_gtfs_stops", "package": null, "version": null}, {"name": "mart_reliability_by_stop_hour", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_gtfs_stops", "model.whylinedenver_dbt.mart_reliability_by_stop_hour"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/relationships_mart_reliability_1b9dabc1dc3c1da314c9d22aa5d07535.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select stop_id as from_field\n    from `whyline-denver`.`mart_denver`.`mart_reliability_by_stop_hour`\n    where stop_id is not null\n),\n\nparent as (\n    select stop_id as to_field\n    from `whyline-denver`.`stg_denver`.`stg_gtfs_stops`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stop_id", "file_key_name": "models.mart_reliability_by_stop_hour", "attached_node": "model.whylinedenver_dbt.mart_reliability_by_stop_hour", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_gtfs_stops')", "field": "stop_id", "column_name": "stop_id", "model": "{{ get_where_subquery(ref('mart_reliability_by_stop_hour')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_mart_reliability_by_stop_hour_service_date_mst.8b2405888c": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_mart_reliability_by_stop_hour_service_date_mst", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_mart_reliability_by_stop_hour_service_date_mst.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_mart_reliability_by_stop_hour_service_date_mst.8b2405888c", "fqn": ["whylinedenver_dbt", "marts", "not_null_mart_reliability_by_stop_hour_service_date_mst"], "alias": "not_null_mart_reliability_by_stop_hour_service_date_mst", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.8078852, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_reliability_by_stop_hour", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_reliability_by_stop_hour"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/not_null_mart_reliability_by_stop_hour_service_date_mst.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect service_date_mst\nfrom `whyline-denver`.`mart_denver`.`mart_reliability_by_stop_hour`\nwhere service_date_mst is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "service_date_mst", "file_key_name": "models.mart_reliability_by_stop_hour", "attached_node": "model.whylinedenver_dbt.mart_reliability_by_stop_hour", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "service_date_mst", "model": "{{ get_where_subquery(ref('mart_reliability_by_stop_hour')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_mart_reliability_by_stop_hour_event_hour_mst.92b3494c69": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_mart_reliability_by_stop_hour_event_hour_mst", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_mart_reliability_by_stop_hour_event_hour_mst.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_mart_reliability_by_stop_hour_event_hour_mst.92b3494c69", "fqn": ["whylinedenver_dbt", "marts", "not_null_mart_reliability_by_stop_hour_event_hour_mst"], "alias": "not_null_mart_reliability_by_stop_hour_event_hour_mst", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.808459, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_reliability_by_stop_hour", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_reliability_by_stop_hour"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/not_null_mart_reliability_by_stop_hour_event_hour_mst.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_hour_mst\nfrom `whyline-denver`.`mart_denver`.`mart_reliability_by_stop_hour`\nwhere event_hour_mst is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "event_hour_mst", "file_key_name": "models.mart_reliability_by_stop_hour", "attached_node": "model.whylinedenver_dbt.mart_reliability_by_stop_hour", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_hour_mst", "model": "{{ get_where_subquery(ref('mart_reliability_by_stop_hour')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.accepted_range_mart_reliability_by_stop_hour_pct_on_time__1__0.10f5fdfaa3": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "accepted_range_mart_reliability_by_stop_hour_pct_on_time__1__0", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "accepted_range_mart_reliability_by_stop_hour_pct_on_time__1__0.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.accepted_range_mart_reliability_by_stop_hour_pct_on_time__1__0.10f5fdfaa3", "fqn": ["whylinedenver_dbt", "marts", "accepted_range_mart_reliability_by_stop_hour_pct_on_time__1__0"], "alias": "accepted_range_mart_reliability_by_stop_hour_pct_on_time__1__0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.8090198, "relation_name": null, "raw_code": "{{ test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_reliability_by_stop_hour", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_reliability_by_stop_hour"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/accepted_range_mart_reliability_by_stop_hour_pct_on_time__1__0.sql", "compiled": true, "compiled_code": "\n    select\n        pct_on_time as value\n    from `whyline-denver`.`mart_denver`.`mart_reliability_by_stop_hour`\n    where 1 = 1\n        and pct_on_time < 0\n        and pct_on_time > 1\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_on_time", "file_key_name": "models.mart_reliability_by_stop_hour", "attached_node": "model.whylinedenver_dbt.mart_reliability_by_stop_hour", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_on_time", "model": "{{ get_where_subquery(ref('mart_reliability_by_stop_hour')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_mart_crash_proximity_by_stop_stop_id.1cacc1f770": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_mart_crash_proximity_by_stop_stop_id", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_mart_crash_proximity_by_stop_stop_id.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_mart_crash_proximity_by_stop_stop_id.1cacc1f770", "fqn": ["whylinedenver_dbt", "marts", "not_null_mart_crash_proximity_by_stop_stop_id"], "alias": "not_null_mart_crash_proximity_by_stop_stop_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.810389, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_crash_proximity_by_stop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_crash_proximity_by_stop"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/not_null_mart_crash_proximity_by_stop_stop_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect stop_id\nfrom `whyline-denver`.`mart_denver`.`mart_crash_proximity_by_stop`\nwhere stop_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stop_id", "file_key_name": "models.mart_crash_proximity_by_stop", "attached_node": "model.whylinedenver_dbt.mart_crash_proximity_by_stop", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stop_id", "model": "{{ get_where_subquery(ref('mart_crash_proximity_by_stop')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.unique_mart_crash_proximity_by_stop_stop_id.2ca1c54c3d": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "unique_mart_crash_proximity_by_stop_stop_id", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "unique_mart_crash_proximity_by_stop_stop_id.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.unique_mart_crash_proximity_by_stop_stop_id.2ca1c54c3d", "fqn": ["whylinedenver_dbt", "marts", "unique_mart_crash_proximity_by_stop_stop_id"], "alias": "unique_mart_crash_proximity_by_stop_stop_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.811028, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_crash_proximity_by_stop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_crash_proximity_by_stop"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/unique_mart_crash_proximity_by_stop_stop_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select stop_id as unique_field\n  from `whyline-denver`.`mart_denver`.`mart_crash_proximity_by_stop`\n  where stop_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stop_id", "file_key_name": "models.mart_crash_proximity_by_stop", "attached_node": "model.whylinedenver_dbt.mart_crash_proximity_by_stop", "test_metadata": {"name": "unique", "kwargs": {"column_name": "stop_id", "model": "{{ get_where_subquery(ref('mart_crash_proximity_by_stop')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.relationships_mart_crash_proximity_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_.de23f2bf57": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "relationships_mart_crash_proximity_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "relationships_mart_crash_proxi_4e75abaf8c97307eef7808b9023a15e3.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.relationships_mart_crash_proximity_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_.de23f2bf57", "fqn": ["whylinedenver_dbt", "marts", "relationships_mart_crash_proximity_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_"], "alias": "relationships_mart_crash_proxi_4e75abaf8c97307eef7808b9023a15e3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_mart_crash_proxi_4e75abaf8c97307eef7808b9023a15e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_mart_crash_proxi_4e75abaf8c97307eef7808b9023a15e3"}, "created_at": 1761260990.811598, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_mart_crash_proxi_4e75abaf8c97307eef7808b9023a15e3\") }}", "language": "sql", "refs": [{"name": "stg_gtfs_stops", "package": null, "version": null}, {"name": "mart_crash_proximity_by_stop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_gtfs_stops", "model.whylinedenver_dbt.mart_crash_proximity_by_stop"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/relationships_mart_crash_proxi_4e75abaf8c97307eef7808b9023a15e3.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select stop_id as from_field\n    from `whyline-denver`.`mart_denver`.`mart_crash_proximity_by_stop`\n    where stop_id is not null\n),\n\nparent as (\n    select stop_id as to_field\n    from `whyline-denver`.`stg_denver`.`stg_gtfs_stops`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stop_id", "file_key_name": "models.mart_crash_proximity_by_stop", "attached_node": "model.whylinedenver_dbt.mart_crash_proximity_by_stop", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_gtfs_stops')", "field": "stop_id", "column_name": "stop_id", "model": "{{ get_where_subquery(ref('mart_crash_proximity_by_stop')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.accepted_range_mart_crash_proximity_by_stop_crash_100m_cnt__0.df522297e2": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "accepted_range_mart_crash_proximity_by_stop_crash_100m_cnt__0", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "accepted_range_mart_crash_proximity_by_stop_crash_100m_cnt__0.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.accepted_range_mart_crash_proximity_by_stop_crash_100m_cnt__0.df522297e2", "fqn": ["whylinedenver_dbt", "marts", "accepted_range_mart_crash_proximity_by_stop_crash_100m_cnt__0"], "alias": "accepted_range_mart_crash_proximity_by_stop_crash_100m_cnt__0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.813303, "relation_name": null, "raw_code": "{{ test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_crash_proximity_by_stop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_crash_proximity_by_stop"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/accepted_range_mart_crash_proximity_by_stop_crash_100m_cnt__0.sql", "compiled": true, "compiled_code": "\n    select\n        crash_100m_cnt as value\n    from `whyline-denver`.`mart_denver`.`mart_crash_proximity_by_stop`\n    where 1 = 1\n        and crash_100m_cnt < 0\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "crash_100m_cnt", "file_key_name": "models.mart_crash_proximity_by_stop", "attached_node": "model.whylinedenver_dbt.mart_crash_proximity_by_stop", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "column_name": "crash_100m_cnt", "model": "{{ get_where_subquery(ref('mart_crash_proximity_by_stop')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.accepted_range_mart_crash_proximity_by_stop_crash_250m_cnt__0.d6dc980d04": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "accepted_range_mart_crash_proximity_by_stop_crash_250m_cnt__0", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "accepted_range_mart_crash_proximity_by_stop_crash_250m_cnt__0.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.accepted_range_mart_crash_proximity_by_stop_crash_250m_cnt__0.d6dc980d04", "fqn": ["whylinedenver_dbt", "marts", "accepted_range_mart_crash_proximity_by_stop_crash_250m_cnt__0"], "alias": "accepted_range_mart_crash_proximity_by_stop_crash_250m_cnt__0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.814739, "relation_name": null, "raw_code": "{{ test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_crash_proximity_by_stop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_crash_proximity_by_stop"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/accepted_range_mart_crash_proximity_by_stop_crash_250m_cnt__0.sql", "compiled": true, "compiled_code": "\n    select\n        crash_250m_cnt as value\n    from `whyline-denver`.`mart_denver`.`mart_crash_proximity_by_stop`\n    where 1 = 1\n        and crash_250m_cnt < 0\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "crash_250m_cnt", "file_key_name": "models.mart_crash_proximity_by_stop", "attached_node": "model.whylinedenver_dbt.mart_crash_proximity_by_stop", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "column_name": "crash_250m_cnt", "model": "{{ get_where_subquery(ref('mart_crash_proximity_by_stop')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_mart_access_score_by_stop_stop_id.2857f24b3b": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_mart_access_score_by_stop_stop_id", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_mart_access_score_by_stop_stop_id.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_mart_access_score_by_stop_stop_id.2857f24b3b", "fqn": ["whylinedenver_dbt", "marts", "not_null_mart_access_score_by_stop_stop_id"], "alias": "not_null_mart_access_score_by_stop_stop_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.816087, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_access_score_by_stop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_access_score_by_stop"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/not_null_mart_access_score_by_stop_stop_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect stop_id\nfrom `whyline-denver`.`mart_denver`.`mart_access_score_by_stop`\nwhere stop_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stop_id", "file_key_name": "models.mart_access_score_by_stop", "attached_node": "model.whylinedenver_dbt.mart_access_score_by_stop", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stop_id", "model": "{{ get_where_subquery(ref('mart_access_score_by_stop')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.unique_mart_access_score_by_stop_stop_id.5561394fc8": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "unique_mart_access_score_by_stop_stop_id", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "unique_mart_access_score_by_stop_stop_id.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.unique_mart_access_score_by_stop_stop_id.5561394fc8", "fqn": ["whylinedenver_dbt", "marts", "unique_mart_access_score_by_stop_stop_id"], "alias": "unique_mart_access_score_by_stop_stop_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.816642, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_access_score_by_stop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_access_score_by_stop"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/unique_mart_access_score_by_stop_stop_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select stop_id as unique_field\n  from `whyline-denver`.`mart_denver`.`mart_access_score_by_stop`\n  where stop_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stop_id", "file_key_name": "models.mart_access_score_by_stop", "attached_node": "model.whylinedenver_dbt.mart_access_score_by_stop", "test_metadata": {"name": "unique", "kwargs": {"column_name": "stop_id", "model": "{{ get_where_subquery(ref('mart_access_score_by_stop')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.relationships_mart_access_score_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_.fa0fce6e1a": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "relationships_mart_access_score_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "relationships_mart_access_scor_cfef612b14978cad9b1b98c3018149f9.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.relationships_mart_access_score_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_.fa0fce6e1a", "fqn": ["whylinedenver_dbt", "marts", "relationships_mart_access_score_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_"], "alias": "relationships_mart_access_scor_cfef612b14978cad9b1b98c3018149f9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_mart_access_scor_cfef612b14978cad9b1b98c3018149f9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_mart_access_scor_cfef612b14978cad9b1b98c3018149f9"}, "created_at": 1761260990.817307, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_mart_access_scor_cfef612b14978cad9b1b98c3018149f9\") }}", "language": "sql", "refs": [{"name": "stg_gtfs_stops", "package": null, "version": null}, {"name": "mart_access_score_by_stop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_gtfs_stops", "model.whylinedenver_dbt.mart_access_score_by_stop"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/relationships_mart_access_scor_cfef612b14978cad9b1b98c3018149f9.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select stop_id as from_field\n    from `whyline-denver`.`mart_denver`.`mart_access_score_by_stop`\n    where stop_id is not null\n),\n\nparent as (\n    select stop_id as to_field\n    from `whyline-denver`.`stg_denver`.`stg_gtfs_stops`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stop_id", "file_key_name": "models.mart_access_score_by_stop", "attached_node": "model.whylinedenver_dbt.mart_access_score_by_stop", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_gtfs_stops')", "field": "stop_id", "column_name": "stop_id", "model": "{{ get_where_subquery(ref('mart_access_score_by_stop')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.accepted_range_mart_access_score_by_stop_sidewalk_len_m_within_200m__0.930c03fe52": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "accepted_range_mart_access_score_by_stop_sidewalk_len_m_within_200m__0", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "accepted_range_mart_access_sco_e396685e46cfd33b615f07d2ed5f4647.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.accepted_range_mart_access_score_by_stop_sidewalk_len_m_within_200m__0.930c03fe52", "fqn": ["whylinedenver_dbt", "marts", "accepted_range_mart_access_score_by_stop_sidewalk_len_m_within_200m__0"], "alias": "accepted_range_mart_access_sco_e396685e46cfd33b615f07d2ed5f4647", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_range_mart_access_sco_e396685e46cfd33b615f07d2ed5f4647", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_range_mart_access_sco_e396685e46cfd33b615f07d2ed5f4647"}, "created_at": 1761260990.819017, "relation_name": null, "raw_code": "{{ test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_range_mart_access_sco_e396685e46cfd33b615f07d2ed5f4647\") }}", "language": "sql", "refs": [{"name": "mart_access_score_by_stop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_access_score_by_stop"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/accepted_range_mart_access_sco_e396685e46cfd33b615f07d2ed5f4647.sql", "compiled": true, "compiled_code": "\n    select\n        sidewalk_len_m_within_200m as value\n    from `whyline-denver`.`mart_denver`.`mart_access_score_by_stop`\n    where 1 = 1\n        and sidewalk_len_m_within_200m < 0\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sidewalk_len_m_within_200m", "file_key_name": "models.mart_access_score_by_stop", "attached_node": "model.whylinedenver_dbt.mart_access_score_by_stop", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "column_name": "sidewalk_len_m_within_200m", "model": "{{ get_where_subquery(ref('mart_access_score_by_stop')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.accepted_range_mart_access_score_by_stop_access_score_0_100__100__0.8ce7af875f": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "accepted_range_mart_access_score_by_stop_access_score_0_100__100__0", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "accepted_range_mart_access_sco_f891442bcb869c37a9ffdc1b5fa4e82b.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.accepted_range_mart_access_score_by_stop_access_score_0_100__100__0.8ce7af875f", "fqn": ["whylinedenver_dbt", "marts", "accepted_range_mart_access_score_by_stop_access_score_0_100__100__0"], "alias": "accepted_range_mart_access_sco_f891442bcb869c37a9ffdc1b5fa4e82b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_range_mart_access_sco_f891442bcb869c37a9ffdc1b5fa4e82b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_range_mart_access_sco_f891442bcb869c37a9ffdc1b5fa4e82b"}, "created_at": 1761260990.8206122, "relation_name": null, "raw_code": "{{ test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_range_mart_access_sco_f891442bcb869c37a9ffdc1b5fa4e82b\") }}", "language": "sql", "refs": [{"name": "mart_access_score_by_stop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_access_score_by_stop"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/accepted_range_mart_access_sco_f891442bcb869c37a9ffdc1b5fa4e82b.sql", "compiled": true, "compiled_code": "\n    select\n        access_score_0_100 as value\n    from `whyline-denver`.`mart_denver`.`mart_access_score_by_stop`\n    where 1 = 1\n        and access_score_0_100 < 0\n        and access_score_0_100 > 100\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "access_score_0_100", "file_key_name": "models.mart_access_score_by_stop", "attached_node": "model.whylinedenver_dbt.mart_access_score_by_stop", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 100, "column_name": "access_score_0_100", "model": "{{ get_where_subquery(ref('mart_access_score_by_stop')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_mart_vulnerability_by_stop_stop_id.89d4da8beb": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_mart_vulnerability_by_stop_stop_id", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_mart_vulnerability_by_stop_stop_id.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_mart_vulnerability_by_stop_stop_id.89d4da8beb", "fqn": ["whylinedenver_dbt", "marts", "not_null_mart_vulnerability_by_stop_stop_id"], "alias": "not_null_mart_vulnerability_by_stop_stop_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.822168, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_vulnerability_by_stop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_vulnerability_by_stop"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/not_null_mart_vulnerability_by_stop_stop_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect stop_id\nfrom `whyline-denver`.`mart_denver`.`mart_vulnerability_by_stop`\nwhere stop_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stop_id", "file_key_name": "models.mart_vulnerability_by_stop", "attached_node": "model.whylinedenver_dbt.mart_vulnerability_by_stop", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stop_id", "model": "{{ get_where_subquery(ref('mart_vulnerability_by_stop')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.unique_mart_vulnerability_by_stop_stop_id.353b4e9688": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "unique_mart_vulnerability_by_stop_stop_id", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "unique_mart_vulnerability_by_stop_stop_id.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.unique_mart_vulnerability_by_stop_stop_id.353b4e9688", "fqn": ["whylinedenver_dbt", "marts", "unique_mart_vulnerability_by_stop_stop_id"], "alias": "unique_mart_vulnerability_by_stop_stop_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.822761, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_vulnerability_by_stop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_vulnerability_by_stop"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/unique_mart_vulnerability_by_stop_stop_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select stop_id as unique_field\n  from `whyline-denver`.`mart_denver`.`mart_vulnerability_by_stop`\n  where stop_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stop_id", "file_key_name": "models.mart_vulnerability_by_stop", "attached_node": "model.whylinedenver_dbt.mart_vulnerability_by_stop", "test_metadata": {"name": "unique", "kwargs": {"column_name": "stop_id", "model": "{{ get_where_subquery(ref('mart_vulnerability_by_stop')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.relationships_mart_vulnerability_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_.78e02832b6": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "relationships_mart_vulnerability_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "relationships_mart_vulnerabili_4b9c1eefabca3e23a37395ede597ebd7.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.relationships_mart_vulnerability_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_.78e02832b6", "fqn": ["whylinedenver_dbt", "marts", "relationships_mart_vulnerability_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_"], "alias": "relationships_mart_vulnerabili_4b9c1eefabca3e23a37395ede597ebd7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_mart_vulnerabili_4b9c1eefabca3e23a37395ede597ebd7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_mart_vulnerabili_4b9c1eefabca3e23a37395ede597ebd7"}, "created_at": 1761260990.8234591, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_mart_vulnerabili_4b9c1eefabca3e23a37395ede597ebd7\") }}", "language": "sql", "refs": [{"name": "stg_gtfs_stops", "package": null, "version": null}, {"name": "mart_vulnerability_by_stop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_gtfs_stops", "model.whylinedenver_dbt.mart_vulnerability_by_stop"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/relationships_mart_vulnerabili_4b9c1eefabca3e23a37395ede597ebd7.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select stop_id as from_field\n    from `whyline-denver`.`mart_denver`.`mart_vulnerability_by_stop`\n    where stop_id is not null\n),\n\nparent as (\n    select stop_id as to_field\n    from `whyline-denver`.`stg_denver`.`stg_gtfs_stops`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stop_id", "file_key_name": "models.mart_vulnerability_by_stop", "attached_node": "model.whylinedenver_dbt.mart_vulnerability_by_stop", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_gtfs_stops')", "field": "stop_id", "column_name": "stop_id", "model": "{{ get_where_subquery(ref('mart_vulnerability_by_stop')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.accepted_range_mart_vulnerability_by_stop_pct_hh_no_vehicle_w__1__0.37a410496f": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "accepted_range_mart_vulnerability_by_stop_pct_hh_no_vehicle_w__1__0", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "accepted_range_mart_vulnerabil_035957cb4f4ae373f42de7adf5957beb.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.accepted_range_mart_vulnerability_by_stop_pct_hh_no_vehicle_w__1__0.37a410496f", "fqn": ["whylinedenver_dbt", "marts", "accepted_range_mart_vulnerability_by_stop_pct_hh_no_vehicle_w__1__0"], "alias": "accepted_range_mart_vulnerabil_035957cb4f4ae373f42de7adf5957beb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_range_mart_vulnerabil_035957cb4f4ae373f42de7adf5957beb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "accepted_range_mart_vulnerabil_035957cb4f4ae373f42de7adf5957beb"}, "created_at": 1761260990.825446, "relation_name": null, "raw_code": "{{ test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"accepted_range_mart_vulnerabil_035957cb4f4ae373f42de7adf5957beb\") }}", "language": "sql", "refs": [{"name": "mart_vulnerability_by_stop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_vulnerability_by_stop"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/accepted_range_mart_vulnerabil_035957cb4f4ae373f42de7adf5957beb.sql", "compiled": true, "compiled_code": "\n    select\n        pct_hh_no_vehicle_w as value\n    from `whyline-denver`.`mart_denver`.`mart_vulnerability_by_stop`\n    where 1 = 1\n        and pct_hh_no_vehicle_w < 0\n        and pct_hh_no_vehicle_w > 1\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_hh_no_vehicle_w", "file_key_name": "models.mart_vulnerability_by_stop", "attached_node": "model.whylinedenver_dbt.mart_vulnerability_by_stop", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_hh_no_vehicle_w", "model": "{{ get_where_subquery(ref('mart_vulnerability_by_stop')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.accepted_range_mart_vulnerability_by_stop_pct_transit_commute_w__1__0.e9cf34d391": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "accepted_range_mart_vulnerability_by_stop_pct_transit_commute_w__1__0", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "accepted_range_mart_vulnerabil_467507b74084c09587996a8c777c794d.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.accepted_range_mart_vulnerability_by_stop_pct_transit_commute_w__1__0.e9cf34d391", "fqn": ["whylinedenver_dbt", "marts", "accepted_range_mart_vulnerability_by_stop_pct_transit_commute_w__1__0"], "alias": "accepted_range_mart_vulnerabil_467507b74084c09587996a8c777c794d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_range_mart_vulnerabil_467507b74084c09587996a8c777c794d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "accepted_range_mart_vulnerabil_467507b74084c09587996a8c777c794d"}, "created_at": 1761260990.827287, "relation_name": null, "raw_code": "{{ test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"accepted_range_mart_vulnerabil_467507b74084c09587996a8c777c794d\") }}", "language": "sql", "refs": [{"name": "mart_vulnerability_by_stop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_vulnerability_by_stop"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/accepted_range_mart_vulnerabil_467507b74084c09587996a8c777c794d.sql", "compiled": true, "compiled_code": "\n    select\n        pct_transit_commute_w as value\n    from `whyline-denver`.`mart_denver`.`mart_vulnerability_by_stop`\n    where 1 = 1\n        and pct_transit_commute_w < 0\n        and pct_transit_commute_w > 1\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_transit_commute_w", "file_key_name": "models.mart_vulnerability_by_stop", "attached_node": "model.whylinedenver_dbt.mart_vulnerability_by_stop", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_transit_commute_w", "model": "{{ get_where_subquery(ref('mart_vulnerability_by_stop')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.accepted_range_mart_vulnerability_by_stop_pct_poverty_w__1__0.91b92829ee": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "accepted_range_mart_vulnerability_by_stop_pct_poverty_w__1__0", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "accepted_range_mart_vulnerability_by_stop_pct_poverty_w__1__0.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.accepted_range_mart_vulnerability_by_stop_pct_poverty_w__1__0.91b92829ee", "fqn": ["whylinedenver_dbt", "marts", "accepted_range_mart_vulnerability_by_stop_pct_poverty_w__1__0"], "alias": "accepted_range_mart_vulnerability_by_stop_pct_poverty_w__1__0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1761260990.8289201, "relation_name": null, "raw_code": "{{ test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "mart_vulnerability_by_stop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_vulnerability_by_stop"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/accepted_range_mart_vulnerability_by_stop_pct_poverty_w__1__0.sql", "compiled": true, "compiled_code": "\n    select\n        pct_poverty_w as value\n    from `whyline-denver`.`mart_denver`.`mart_vulnerability_by_stop`\n    where 1 = 1\n        and pct_poverty_w < 0\n        and pct_poverty_w > 1\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_poverty_w", "file_key_name": "models.mart_vulnerability_by_stop", "attached_node": "model.whylinedenver_dbt.mart_vulnerability_by_stop", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_poverty_w", "model": "{{ get_where_subquery(ref('mart_vulnerability_by_stop')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.accepted_range_mart_vulnerability_by_stop_vuln_score_0_100__100__0.6d82af62c0": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "accepted_range_mart_vulnerability_by_stop_vuln_score_0_100__100__0", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "accepted_range_mart_vulnerabil_2b5f491753a840859056a5d011d52465.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.accepted_range_mart_vulnerability_by_stop_vuln_score_0_100__100__0.6d82af62c0", "fqn": ["whylinedenver_dbt", "marts", "accepted_range_mart_vulnerability_by_stop_vuln_score_0_100__100__0"], "alias": "accepted_range_mart_vulnerabil_2b5f491753a840859056a5d011d52465", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_range_mart_vulnerabil_2b5f491753a840859056a5d011d52465", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_range_mart_vulnerabil_2b5f491753a840859056a5d011d52465"}, "created_at": 1761260990.83056, "relation_name": null, "raw_code": "{{ test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_range_mart_vulnerabil_2b5f491753a840859056a5d011d52465\") }}", "language": "sql", "refs": [{"name": "mart_vulnerability_by_stop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_vulnerability_by_stop"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/accepted_range_mart_vulnerabil_2b5f491753a840859056a5d011d52465.sql", "compiled": true, "compiled_code": "\n    select\n        vuln_score_0_100 as value\n    from `whyline-denver`.`mart_denver`.`mart_vulnerability_by_stop`\n    where 1 = 1\n        and vuln_score_0_100 < 0\n        and vuln_score_0_100 > 100\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "vuln_score_0_100", "file_key_name": "models.mart_vulnerability_by_stop", "attached_node": "model.whylinedenver_dbt.mart_vulnerability_by_stop", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 100, "column_name": "vuln_score_0_100", "model": "{{ get_where_subquery(ref('mart_vulnerability_by_stop')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_mart_priority_hotspots_stop_id.cc9cb33d13": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_mart_priority_hotspots_stop_id", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_mart_priority_hotspots_stop_id.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_mart_priority_hotspots_stop_id.cc9cb33d13", "fqn": ["whylinedenver_dbt", "marts", "not_null_mart_priority_hotspots_stop_id"], "alias": "not_null_mart_priority_hotspots_stop_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.832105, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_priority_hotspots", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_priority_hotspots"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/not_null_mart_priority_hotspots_stop_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect stop_id\nfrom `whyline-denver`.`mart_denver`.`mart_priority_hotspots`\nwhere stop_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stop_id", "file_key_name": "models.mart_priority_hotspots", "attached_node": "model.whylinedenver_dbt.mart_priority_hotspots", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stop_id", "model": "{{ get_where_subquery(ref('mart_priority_hotspots')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.unique_mart_priority_hotspots_stop_id.3b0b820133": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "unique_mart_priority_hotspots_stop_id", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "unique_mart_priority_hotspots_stop_id.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.unique_mart_priority_hotspots_stop_id.3b0b820133", "fqn": ["whylinedenver_dbt", "marts", "unique_mart_priority_hotspots_stop_id"], "alias": "unique_mart_priority_hotspots_stop_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.8326871, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_priority_hotspots", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_priority_hotspots"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/unique_mart_priority_hotspots_stop_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select stop_id as unique_field\n  from `whyline-denver`.`mart_denver`.`mart_priority_hotspots`\n  where stop_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stop_id", "file_key_name": "models.mart_priority_hotspots", "attached_node": "model.whylinedenver_dbt.mart_priority_hotspots", "test_metadata": {"name": "unique", "kwargs": {"column_name": "stop_id", "model": "{{ get_where_subquery(ref('mart_priority_hotspots')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.relationships_mart_priority_hotspots_stop_id__stop_id__ref_stg_gtfs_stops_.ba07faf7e4": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "relationships_mart_priority_hotspots_stop_id__stop_id__ref_stg_gtfs_stops_", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "relationships_mart_priority_ho_e1247d27974da448e5afb2a96c1db553.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.relationships_mart_priority_hotspots_stop_id__stop_id__ref_stg_gtfs_stops_.ba07faf7e4", "fqn": ["whylinedenver_dbt", "marts", "relationships_mart_priority_hotspots_stop_id__stop_id__ref_stg_gtfs_stops_"], "alias": "relationships_mart_priority_ho_e1247d27974da448e5afb2a96c1db553", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_mart_priority_ho_e1247d27974da448e5afb2a96c1db553", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_mart_priority_ho_e1247d27974da448e5afb2a96c1db553"}, "created_at": 1761260990.833369, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_mart_priority_ho_e1247d27974da448e5afb2a96c1db553\") }}", "language": "sql", "refs": [{"name": "stg_gtfs_stops", "package": null, "version": null}, {"name": "mart_priority_hotspots", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_gtfs_stops", "model.whylinedenver_dbt.mart_priority_hotspots"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/relationships_mart_priority_ho_e1247d27974da448e5afb2a96c1db553.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select stop_id as from_field\n    from `whyline-denver`.`mart_denver`.`mart_priority_hotspots`\n    where stop_id is not null\n),\n\nparent as (\n    select stop_id as to_field\n    from `whyline-denver`.`stg_denver`.`stg_gtfs_stops`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stop_id", "file_key_name": "models.mart_priority_hotspots", "attached_node": "model.whylinedenver_dbt.mart_priority_hotspots", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_gtfs_stops')", "field": "stop_id", "column_name": "stop_id", "model": "{{ get_where_subquery(ref('mart_priority_hotspots')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.accepted_range_mart_priority_hotspots_priority_score__0.2fe9aa30be": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "accepted_range_mart_priority_hotspots_priority_score__0", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "accepted_range_mart_priority_hotspots_priority_score__0.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.accepted_range_mart_priority_hotspots_priority_score__0.2fe9aa30be", "fqn": ["whylinedenver_dbt", "marts", "accepted_range_mart_priority_hotspots_priority_score__0"], "alias": "accepted_range_mart_priority_hotspots_priority_score__0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.8351731, "relation_name": null, "raw_code": "{{ test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_priority_hotspots", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_priority_hotspots"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/accepted_range_mart_priority_hotspots_priority_score__0.sql", "compiled": true, "compiled_code": "\n    select\n        priority_score as value\n    from `whyline-denver`.`mart_denver`.`mart_priority_hotspots`\n    where 1 = 1\n        and priority_score < 0\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "priority_score", "file_key_name": "models.mart_priority_hotspots", "attached_node": "model.whylinedenver_dbt.mart_priority_hotspots", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "column_name": "priority_score", "model": "{{ get_where_subquery(ref('mart_priority_hotspots')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_mart_weather_impacts_route_id.d198f5d6bc": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_mart_weather_impacts_route_id", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_mart_weather_impacts_route_id.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_mart_weather_impacts_route_id.d198f5d6bc", "fqn": ["whylinedenver_dbt", "marts", "not_null_mart_weather_impacts_route_id"], "alias": "not_null_mart_weather_impacts_route_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.836683, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_weather_impacts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_weather_impacts"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/not_null_mart_weather_impacts_route_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect route_id\nfrom `whyline-denver`.`mart_denver`.`mart_weather_impacts`\nwhere route_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "route_id", "file_key_name": "models.mart_weather_impacts", "attached_node": "model.whylinedenver_dbt.mart_weather_impacts", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "route_id", "model": "{{ get_where_subquery(ref('mart_weather_impacts')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.relationships_mart_weather_impacts_route_id__route_id__ref_stg_gtfs_routes_.6b4c0cd147": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "relationships_mart_weather_impacts_route_id__route_id__ref_stg_gtfs_routes_", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "relationships_mart_weather_imp_abff922feda1b8268c48e0733993f2d7.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.relationships_mart_weather_impacts_route_id__route_id__ref_stg_gtfs_routes_.6b4c0cd147", "fqn": ["whylinedenver_dbt", "marts", "relationships_mart_weather_impacts_route_id__route_id__ref_stg_gtfs_routes_"], "alias": "relationships_mart_weather_imp_abff922feda1b8268c48e0733993f2d7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_mart_weather_imp_abff922feda1b8268c48e0733993f2d7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_mart_weather_imp_abff922feda1b8268c48e0733993f2d7"}, "created_at": 1761260990.8372679, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_mart_weather_imp_abff922feda1b8268c48e0733993f2d7\") }}", "language": "sql", "refs": [{"name": "stg_gtfs_routes", "package": null, "version": null}, {"name": "mart_weather_impacts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.stg_gtfs_routes", "model.whylinedenver_dbt.mart_weather_impacts"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/relationships_mart_weather_imp_abff922feda1b8268c48e0733993f2d7.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select route_id as from_field\n    from `whyline-denver`.`mart_denver`.`mart_weather_impacts`\n    where route_id is not null\n),\n\nparent as (\n    select route_id as to_field\n    from `whyline-denver`.`stg_denver`.`stg_gtfs_routes`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "route_id", "file_key_name": "models.mart_weather_impacts", "attached_node": "model.whylinedenver_dbt.mart_weather_impacts", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_gtfs_routes')", "field": "route_id", "column_name": "route_id", "model": "{{ get_where_subquery(ref('mart_weather_impacts')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.not_null_mart_weather_impacts_precip_bin.1398fc6d5c": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "not_null_mart_weather_impacts_precip_bin", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "not_null_mart_weather_impacts_precip_bin.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.not_null_mart_weather_impacts_precip_bin.1398fc6d5c", "fqn": ["whylinedenver_dbt", "marts", "not_null_mart_weather_impacts_precip_bin"], "alias": "not_null_mart_weather_impacts_precip_bin", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.839222, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_weather_impacts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_weather_impacts"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/not_null_mart_weather_impacts_precip_bin.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect precip_bin\nfrom `whyline-denver`.`mart_denver`.`mart_weather_impacts`\nwhere precip_bin is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "precip_bin", "file_key_name": "models.mart_weather_impacts", "attached_node": "model.whylinedenver_dbt.mart_weather_impacts", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "precip_bin", "model": "{{ get_where_subquery(ref('mart_weather_impacts')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.accepted_range_mart_weather_impacts_pct_on_time_avg__1__0.4786f9d34d": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "accepted_range_mart_weather_impacts_pct_on_time_avg__1__0", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "accepted_range_mart_weather_impacts_pct_on_time_avg__1__0.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.accepted_range_mart_weather_impacts_pct_on_time_avg__1__0.4786f9d34d", "fqn": ["whylinedenver_dbt", "marts", "accepted_range_mart_weather_impacts_pct_on_time_avg__1__0"], "alias": "accepted_range_mart_weather_impacts_pct_on_time_avg__1__0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.839836, "relation_name": null, "raw_code": "{{ test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_weather_impacts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_weather_impacts"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/accepted_range_mart_weather_impacts_pct_on_time_avg__1__0.sql", "compiled": true, "compiled_code": "\n    select\n        pct_on_time_avg as value\n    from `whyline-denver`.`mart_denver`.`mart_weather_impacts`\n    where 1 = 1\n        and pct_on_time_avg < 0\n        and pct_on_time_avg > 1\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_on_time_avg", "file_key_name": "models.mart_weather_impacts", "attached_node": "model.whylinedenver_dbt.mart_weather_impacts", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_on_time_avg", "model": "{{ get_where_subquery(ref('mart_weather_impacts')) }}"}, "namespace": null}}, "test.whylinedenver_dbt.accepted_range_mart_weather_impacts_pct_on_time_normal__1__0.5267f458d5": {"database": "whyline-denver", "schema": "dbt_test__audit", "name": "accepted_range_mart_weather_impacts_pct_on_time_normal__1__0", "resource_type": "test", "package_name": "whylinedenver_dbt", "path": "accepted_range_mart_weather_impacts_pct_on_time_normal__1__0.sql", "original_file_path": "models/marts/schema.yml", "unique_id": "test.whylinedenver_dbt.accepted_range_mart_weather_impacts_pct_on_time_normal__1__0.5267f458d5", "fqn": ["whylinedenver_dbt", "marts", "accepted_range_mart_weather_impacts_pct_on_time_normal__1__0"], "alias": "accepted_range_mart_weather_impacts_pct_on_time_normal__1__0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1761260990.841303, "relation_name": null, "raw_code": "{{ test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_weather_impacts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.whylinedenver_dbt.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.whylinedenver_dbt.mart_weather_impacts"]}, "compiled_path": "target/compiled/whylinedenver_dbt/models/marts/schema.yml/accepted_range_mart_weather_impacts_pct_on_time_normal__1__0.sql", "compiled": true, "compiled_code": "\n    select\n        pct_on_time_normal as value\n    from `whyline-denver`.`mart_denver`.`mart_weather_impacts`\n    where 1 = 1\n        and pct_on_time_normal < 0\n        and pct_on_time_normal > 1\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_on_time_normal", "file_key_name": "models.mart_weather_impacts", "attached_node": "model.whylinedenver_dbt.mart_weather_impacts", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_on_time_normal", "model": "{{ get_where_subquery(ref('mart_weather_impacts')) }}"}, "namespace": null}}}, "sources": {"source.whylinedenver_dbt.raw.raw_gtfsrt_trip_updates": {"database": "whyline-denver", "schema": "raw_denver", "name": "raw_gtfsrt_trip_updates", "resource_type": "source", "package_name": "whylinedenver_dbt", "path": "models/sources_raw.yml", "original_file_path": "models/sources_raw.yml", "unique_id": "source.whylinedenver_dbt.raw.raw_gtfsrt_trip_updates", "fqn": ["whylinedenver_dbt", "raw", "raw_gtfsrt_trip_updates"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "raw_gtfsrt_trip_updates", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_ingested_at", "freshness": {"warn_after": {"count": 2, "period": "day"}, "error_after": {"count": 5, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`whyline-denver`.`raw_denver`.`raw_gtfsrt_trip_updates`", "created_at": 1761260990.8442261}, "source.whylinedenver_dbt.raw.raw_gtfsrt_vehicle_positions": {"database": "whyline-denver", "schema": "raw_denver", "name": "raw_gtfsrt_vehicle_positions", "resource_type": "source", "package_name": "whylinedenver_dbt", "path": "models/sources_raw.yml", "original_file_path": "models/sources_raw.yml", "unique_id": "source.whylinedenver_dbt.raw.raw_gtfsrt_vehicle_positions", "fqn": ["whylinedenver_dbt", "raw", "raw_gtfsrt_vehicle_positions"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "raw_gtfsrt_vehicle_positions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_ingested_at", "freshness": {"warn_after": {"count": 2, "period": "day"}, "error_after": {"count": 5, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`whyline-denver`.`raw_denver`.`raw_gtfsrt_vehicle_positions`", "created_at": 1761260990.844775}, "source.whylinedenver_dbt.raw.raw_crashes": {"database": "whyline-denver", "schema": "raw_denver", "name": "raw_crashes", "resource_type": "source", "package_name": "whylinedenver_dbt", "path": "models/sources_raw.yml", "original_file_path": "models/sources_raw.yml", "unique_id": "source.whylinedenver_dbt.raw.raw_crashes", "fqn": ["whylinedenver_dbt", "raw", "raw_crashes"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "raw_crashes", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_ingested_at", "freshness": {"warn_after": {"count": 2, "period": "day"}, "error_after": {"count": 5, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`whyline-denver`.`raw_denver`.`raw_crashes`", "created_at": 1761260990.844851}, "source.whylinedenver_dbt.raw.raw_sidewalks": {"database": "whyline-denver", "schema": "raw_denver", "name": "raw_sidewalks", "resource_type": "source", "package_name": "whylinedenver_dbt", "path": "models/sources_raw.yml", "original_file_path": "models/sources_raw.yml", "unique_id": "source.whylinedenver_dbt.raw.raw_sidewalks", "fqn": ["whylinedenver_dbt", "raw", "raw_sidewalks"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "raw_sidewalks", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_ingested_at", "freshness": {"warn_after": {"count": 2, "period": "day"}, "error_after": {"count": 5, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`whyline-denver`.`raw_denver`.`raw_sidewalks`", "created_at": 1761260990.8449202}, "source.whylinedenver_dbt.raw.raw_denver_tracts": {"database": "whyline-denver", "schema": "raw_denver", "name": "raw_denver_tracts", "resource_type": "source", "package_name": "whylinedenver_dbt", "path": "models/sources_raw.yml", "original_file_path": "models/sources_raw.yml", "unique_id": "source.whylinedenver_dbt.raw.raw_denver_tracts", "fqn": ["whylinedenver_dbt", "raw", "raw_denver_tracts"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "raw_denver_tracts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_ingested_at", "freshness": {"warn_after": {"count": 2, "period": "day"}, "error_after": {"count": 5, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`whyline-denver`.`raw_denver`.`raw_denver_tracts`", "created_at": 1761260990.84499}, "source.whylinedenver_dbt.raw.raw_weather_daily": {"database": "whyline-denver", "schema": "raw_denver", "name": "raw_weather_daily", "resource_type": "source", "package_name": "whylinedenver_dbt", "path": "models/sources_raw.yml", "original_file_path": "models/sources_raw.yml", "unique_id": "source.whylinedenver_dbt.raw.raw_weather_daily", "fqn": ["whylinedenver_dbt", "raw", "raw_weather_daily"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "raw_weather_daily", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_ingested_at", "freshness": {"warn_after": {"count": 2, "period": "day"}, "error_after": {"count": 5, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`whyline-denver`.`raw_denver`.`raw_weather_daily`", "created_at": 1761260990.8450508}, "source.whylinedenver_dbt.raw.raw_acs_tract": {"database": "whyline-denver", "schema": "raw_denver", "name": "raw_acs_tract", "resource_type": "source", "package_name": "whylinedenver_dbt", "path": "models/sources_raw.yml", "original_file_path": "models/sources_raw.yml", "unique_id": "source.whylinedenver_dbt.raw.raw_acs_tract", "fqn": ["whylinedenver_dbt", "raw", "raw_acs_tract"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "raw_acs_tract", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_ingested_at", "freshness": {"warn_after": {"count": 2, "period": "day"}, "error_after": {"count": 5, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`whyline-denver`.`raw_denver`.`raw_acs_tract`", "created_at": 1761260990.8451142}, "source.whylinedenver_dbt.raw.raw_gtfs_stops": {"database": "whyline-denver", "schema": "raw_denver", "name": "raw_gtfs_stops", "resource_type": "source", "package_name": "whylinedenver_dbt", "path": "models/sources_raw.yml", "original_file_path": "models/sources_raw.yml", "unique_id": "source.whylinedenver_dbt.raw.raw_gtfs_stops", "fqn": ["whylinedenver_dbt", "raw", "raw_gtfs_stops"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "raw_gtfs_stops", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 2, "period": "day"}, "error_after": {"count": 5, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`whyline-denver`.`raw_denver`.`raw_gtfs_stops`", "created_at": 1761260990.845185}, "source.whylinedenver_dbt.raw.raw_gtfs_routes": {"database": "whyline-denver", "schema": "raw_denver", "name": "raw_gtfs_routes", "resource_type": "source", "package_name": "whylinedenver_dbt", "path": "models/sources_raw.yml", "original_file_path": "models/sources_raw.yml", "unique_id": "source.whylinedenver_dbt.raw.raw_gtfs_routes", "fqn": ["whylinedenver_dbt", "raw", "raw_gtfs_routes"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "raw_gtfs_routes", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 2, "period": "day"}, "error_after": {"count": 5, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`whyline-denver`.`raw_denver`.`raw_gtfs_routes`", "created_at": 1761260990.8452532}, "source.whylinedenver_dbt.raw.raw_gtfs_trips": {"database": "whyline-denver", "schema": "raw_denver", "name": "raw_gtfs_trips", "resource_type": "source", "package_name": "whylinedenver_dbt", "path": "models/sources_raw.yml", "original_file_path": "models/sources_raw.yml", "unique_id": "source.whylinedenver_dbt.raw.raw_gtfs_trips", "fqn": ["whylinedenver_dbt", "raw", "raw_gtfs_trips"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "raw_gtfs_trips", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 2, "period": "day"}, "error_after": {"count": 5, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`whyline-denver`.`raw_denver`.`raw_gtfs_trips`", "created_at": 1761260990.845313}, "source.whylinedenver_dbt.raw.raw_gtfs_stop_times": {"database": "whyline-denver", "schema": "raw_denver", "name": "raw_gtfs_stop_times", "resource_type": "source", "package_name": "whylinedenver_dbt", "path": "models/sources_raw.yml", "original_file_path": "models/sources_raw.yml", "unique_id": "source.whylinedenver_dbt.raw.raw_gtfs_stop_times", "fqn": ["whylinedenver_dbt", "raw", "raw_gtfs_stop_times"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "raw_gtfs_stop_times", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 2, "period": "day"}, "error_after": {"count": 5, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`whyline-denver`.`raw_denver`.`raw_gtfs_stop_times`", "created_at": 1761260990.845372}, "source.whylinedenver_dbt.raw.raw_gtfs_calendar": {"database": "whyline-denver", "schema": "raw_denver", "name": "raw_gtfs_calendar", "resource_type": "source", "package_name": "whylinedenver_dbt", "path": "models/sources_raw.yml", "original_file_path": "models/sources_raw.yml", "unique_id": "source.whylinedenver_dbt.raw.raw_gtfs_calendar", "fqn": ["whylinedenver_dbt", "raw", "raw_gtfs_calendar"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "raw_gtfs_calendar", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 2, "period": "day"}, "error_after": {"count": 5, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`whyline-denver`.`raw_denver`.`raw_gtfs_calendar`", "created_at": 1761260990.84543}, "source.whylinedenver_dbt.raw.raw_gtfs_calendar_dates": {"database": "whyline-denver", "schema": "raw_denver", "name": "raw_gtfs_calendar_dates", "resource_type": "source", "package_name": "whylinedenver_dbt", "path": "models/sources_raw.yml", "original_file_path": "models/sources_raw.yml", "unique_id": "source.whylinedenver_dbt.raw.raw_gtfs_calendar_dates", "fqn": ["whylinedenver_dbt", "raw", "raw_gtfs_calendar_dates"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "raw_gtfs_calendar_dates", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 2, "period": "day"}, "error_after": {"count": 5, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`whyline-denver`.`raw_denver`.`raw_gtfs_calendar_dates`", "created_at": 1761260990.845488}}, "macros": {"macro.whylinedenver_dbt.make_point": {"name": "make_point", "resource_type": "macro", "package_name": "whylinedenver_dbt", "path": "macros/geo.sql", "original_file_path": "macros/geo.sql", "unique_id": "macro.whylinedenver_dbt.make_point", "macro_sql": "{% macro make_point(lon, lat) %}\n    ST_GEOGPOINT(CAST({{ lon }} AS FLOAT64), CAST({{ lat }} AS FLOAT64))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2200398, "supported_languages": null}, "macro.whylinedenver_dbt.as_mst": {"name": "as_mst", "resource_type": "macro", "package_name": "whylinedenver_dbt", "path": "macros/time.sql", "original_file_path": "macros/time.sql", "unique_id": "macro.whylinedenver_dbt.as_mst", "macro_sql": "{% macro as_mst(ts_utc) %}\n    DATETIME({{ ts_utc }}, \"America/Denver\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.220299, "supported_languages": null}, "macro.whylinedenver_dbt.date_mst": {"name": "date_mst", "resource_type": "macro", "package_name": "whylinedenver_dbt", "path": "macros/time.sql", "original_file_path": "macros/time.sql", "unique_id": "macro.whylinedenver_dbt.date_mst", "macro_sql": "{% macro date_mst(ts_utc) %}\n    DATE({{ ts_utc }}, \"America/Denver\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2203898, "supported_languages": null}, "macro.whylinedenver_dbt.hour_mst": {"name": "hour_mst", "resource_type": "macro", "package_name": "whylinedenver_dbt", "path": "macros/time.sql", "original_file_path": "macros/time.sql", "unique_id": "macro.whylinedenver_dbt.hour_mst", "macro_sql": "{% macro hour_mst(ts_utc) %}\n    EXTRACT(HOUR FROM DATETIME({{ ts_utc }}, \"America/Denver\"))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2204769, "supported_languages": null}, "macro.whylinedenver_dbt.gtfs_time_to_ts": {"name": "gtfs_time_to_ts", "resource_type": "macro", "package_name": "whylinedenver_dbt", "path": "macros/time.sql", "original_file_path": "macros/time.sql", "unique_id": "macro.whylinedenver_dbt.gtfs_time_to_ts", "macro_sql": "{% macro gtfs_time_to_ts(service_date, hhmmss, tz=\"America/Denver\") %}\ntimestamp(\n    datetime(\n        date_add(\n            {{ service_date }},\n            interval cast(floor(\n                safe_cast(split({{ hhmmss }}, ':')[offset(0)] as int64) / 24\n            ) as int64) day\n        ),\n        time(\n            mod(\n                safe_cast(split({{ hhmmss }}, ':')[offset(0)] as int64),\n                24\n            ),\n            safe_cast(split({{ hhmmss }}, ':')[offset(1)] as int64),\n            safe_cast(split({{ hhmmss }}, ':')[offset(2)] as int64)\n        )\n    ),\n    \"{{ tz }}\"\n)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.220685, "supported_languages": null}, "macro.whylinedenver_dbt.safe_int": {"name": "safe_int", "resource_type": "macro", "package_name": "whylinedenver_dbt", "path": "macros/safe.sql", "original_file_path": "macros/safe.sql", "unique_id": "macro.whylinedenver_dbt.safe_int", "macro_sql": "{% macro safe_int(value) %}\n    SAFE_CAST({{ value }} AS INT64)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2208169, "supported_languages": null}, "macro.whylinedenver_dbt.safe_float": {"name": "safe_float", "resource_type": "macro", "package_name": "whylinedenver_dbt", "path": "macros/safe.sql", "original_file_path": "macros/safe.sql", "unique_id": "macro.whylinedenver_dbt.safe_float", "macro_sql": "{% macro safe_float(value) %}\n    SAFE_CAST({{ value }} AS FLOAT64)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.220901, "supported_languages": null}, "macro.whylinedenver_dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "whylinedenver_dbt", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "unique_id": "macro.whylinedenver_dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {%- if custom_schema_name is none or custom_schema_name == '' -%}\n        {{ target.schema }}\n    {%- else -%}\n        {{ custom_schema_name }}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.221187, "supported_languages": null}, "macro.whylinedenver_dbt.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "whylinedenver_dbt", "path": "macros/tests/accepted_range.sql", "original_file_path": "macros/tests/accepted_range.sql", "unique_id": "macro.whylinedenver_dbt.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=None, max_value=None, exclusive_min=False, exclusive_max=False) %}\n    select\n        {{ column_name }} as value\n    from {{ model }}\n    where 1 = 1\n    {%- if min_value is not none %}\n        and {{ column_name }} {{ '<=' if exclusive_min else '<' }} {{ min_value }}\n    {%- endif %}\n    {%- if max_value is not none %}\n        and {{ column_name }} {{ '>=' if exclusive_max else '>' }} {{ max_value }}\n    {%- endif %}\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.221733, "supported_languages": null}, "macro.whylinedenver_dbt.test_unique_combination": {"name": "test_unique_combination", "resource_type": "macro", "package_name": "whylinedenver_dbt", "path": "macros/tests/unique_combination.sql", "original_file_path": "macros/tests/unique_combination.sql", "unique_id": "macro.whylinedenver_dbt.test_unique_combination", "macro_sql": "{% test unique_combination(model, column_names) %}\n    select\n        {{ column_names | join(', ') }}\n    from {{ model }}\n    group by {{ column_names | join(', ') }}\n    having count(*) > 1\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2219572, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.222163, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.22232, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2225149, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.224617, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.224973, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.225069, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.225173, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.225332, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.225458, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.225597, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.225804, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.225922, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.226217, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.226487, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.226974, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.227108, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.227317, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2275782, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.227701, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2282538, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2285922, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = bigquery__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2293382, "supported_languages": ["sql"]}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2310212, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n{%- set raw_partition_by = config.get('partition_by', none) -%}\n{%- set raw_cluster_by = config.get('cluster_by', none) -%}\n{%- set enable_list_inference = config.get('enable_list_inference', true) -%}\n{%- set intermediate_format = config.get('intermediate_format', none) -%}\n\n{%- set partition_config = adapter.parse_partition_by(raw_partition_by) %}\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\nspark.conf.set(\"enableListInference\", \"{{ enable_list_inference }}\")\n{% if intermediate_format %}\nspark.conf.set(\"intermediateFormat\", \"{{ intermediate_format }}\")\n{% endif %}\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"indirect\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  {%- if partition_config is not none %}\n  {%- if partition_config.data_type | lower in ('date','timestamp','datetime') %}\n  .option(\"partitionField\", \"{{- partition_config.field -}}\") \\\n  {%- if partition_config.granularity is not none %}\n  .option(\"partitionType\", \"{{- partition_config.granularity| upper -}}\") \\\n  {%- endif %}\n  {%- endif %}\n  {%- endif %}\n  {%- if raw_cluster_by is not none %}\n  .option(\"clusteredFields\", \"{{- raw_cluster_by | join(',') -}}\") \\\n  {%- endif %}\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.231881, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(ref_table.get('package'), ref_table.name, version=ref_table.get('version'))) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2327712, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.23386, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.23406, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.23457, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.235008, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy != 'insert_overwrite' %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.238197, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.238544, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.238671, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.238775, "supported_languages": null}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2389278, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.239032, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set avoid_require_partition_filter = predicate_for_avoid_require_partition_filter() -%}\n    {%- if avoid_require_partition_filter is not none -%}\n        {% do predicates.append(avoid_require_partition_filter) %}\n    {%- endif -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.239912, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.240383, "supported_languages": null}, "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter": {"name": "predicate_for_avoid_require_partition_filter", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter", "macro_sql": "{% macro predicate_for_avoid_require_partition_filter(target='DBT_INTERNAL_DEST') %}\n\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- set predicate = none -%}\n\n    {% if partition_config and config.get('require_partition_filter') -%}\n        {%- set partition_field = partition_config.time_partitioning_field() if partition_config.time_ingestion_partitioning else partition_config.field -%}\n        {% set predicate %}\n            (\n                `{{ target }}`.`{{ partition_field }}` is null\n                or `{{ target }}`.`{{ partition_field }}` is not null\n            )\n        {% endset %}\n    {%- endif -%}\n\n    {{ return(predicate) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.240832, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.241987, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.data_type == 'int64' %}\n      {% set partition = partition | as_text %}\n    {% elif partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2428732, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.243281, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif %}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.243988, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {%- if tmp_relation_exists is false -%}\n  {# We run temp table creation in a separated script to move to partitions copy if it doesn't already exist #}\n    {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n      {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n    }}\n    {%- endcall %}\n  {%- endif -%}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.244498, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.245327, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.245787, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.246083, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.246262, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.246729, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2469819, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n    {% do adapter.drop_relation(relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.247116, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/options.sql", "original_file_path": "macros/relations/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.247427, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/cluster.sql", "original_file_path": "macros/relations/cluster.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.247761, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.247904, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/partition.sql", "original_file_path": "macros/relations/partition.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.248629, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_materialized_view": {"name": "bigquery__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_materialized_view", "macro_sql": "{% macro bigquery__drop_materialized_view(relation) %}\n    drop materialized view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.248767, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql": {"name": "bigquery__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_replace_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create or replace materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.249215, "supported_languages": null}, "macro.dbt_bigquery.bigquery__refresh_materialized_view": {"name": "bigquery__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_bigquery.bigquery__refresh_materialized_view", "macro_sql": "{% macro bigquery__refresh_materialized_view(relation) %}\n    call bq.refresh_materialized_view('{{ relation.database }}.{{ relation.schema }}.{{ relation.identifier }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.249383, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql": {"name": "bigquery__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n    {% else %}\n\n        alter materialized view {{ relation }}\n            set {{ bigquery_options(configuration_changes.options.context.as_ddl_dict()) }}\n\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.249734, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes": {"name": "bigquery__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes", "macro_sql": "{% macro bigquery__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = adapter.describe_relation(existing_relation) %}\n    {% set _configuration_changes = existing_relation.materialized_view_config_changeset(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2499452, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql": {"name": "bigquery__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_create_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2503731, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_table": {"name": "bigquery__drop_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_table", "macro_sql": "{% macro bigquery__drop_table(relation) %}\n    drop table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.250477, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/options.sql", "original_file_path": "macros/relations/table/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2506828, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_table_sql": {"name": "bigquery__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_table_sql", "macro_sql": "{%- macro bigquery__get_rename_table_sql(relation, new_name) -%}\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.250804, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_view": {"name": "bigquery__drop_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_view", "macro_sql": "{% macro bigquery__drop_view(relation) %}\n    drop view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2508988, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_view": {"name": "bigquery__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_view", "macro_sql": "{% macro bigquery__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt_bigquery.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.251877, "supported_languages": null}, "macro.dbt_bigquery.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.252015, "supported_languages": null}, "macro.dbt_bigquery.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.252168, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/options.sql", "original_file_path": "macros/relations/view/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.252362, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_view_sql": {"name": "bigquery__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_view_sql", "macro_sql": "{%- macro bigquery__get_rename_view_sql(relation, new_name) -%}\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.252486, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog_relations": {"name": "bigquery__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_relation.sql", "original_file_path": "macros/catalog/by_relation.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog_relations", "macro_sql": "{% macro bigquery__get_catalog_relations(information_schema, relations) -%}\n\n    {%- if (relations | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards_stage as ({{ _bigquery__get_table_shards_sql(information_schema) }}),\n                table_shards as (\n                    select * from table_shards_stage\n                    where (\n                        {%- for relation in relations -%}\n                            (\n                                upper(table_schema) = upper('{{ relation.schema }}')\n                            and upper(table_name) = upper('{{ relation.identifier }}')\n                            )\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.253153, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_shards_sql": {"name": "_bigquery__get_table_shards_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro_sql": "{% macro _bigquery__get_table_shards_sql(information_schema) %}\n    select\n        tables.project_id as table_catalog,\n        tables.dataset_id as table_schema,\n        coalesce(REGEXP_EXTRACT(tables.table_id, '^(.+)[0-9]{8}$'), tables.table_id) as table_name,\n        tables.table_id as shard_name,\n        REGEXP_EXTRACT(tables.table_id, '^.+([0-9]{8})$') as shard_index,\n        REGEXP_CONTAINS(tables.table_id, '^.+[0-9]{8}$') and tables.type = 1 as is_date_shard,\n        case\n            when materialized_views.table_name is not null then 'materialized view'\n            when tables.type = 1 then 'table'\n            when tables.type = 2 then 'view'\n            else 'external'\n        end as table_type,\n        tables.type = 1 as is_table,\n        JSON_VALUE(table_description.option_value) as table_comment,\n        tables.size_bytes,\n        tables.row_count\n    from {{ information_schema.replace(information_schema_view='__TABLES__') }} tables\n    left join {{ information_schema.replace(information_schema_view='MATERIALIZED_VIEWS') }} materialized_views\n        on materialized_views.table_catalog = tables.project_id\n        and materialized_views.table_schema = tables.dataset_id\n        and materialized_views.table_name = tables.table_id\n    left join {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }} table_description\n        on table_description.table_catalog = tables.project_id\n        and table_description.table_schema = tables.dataset_id\n        and table_description.table_name = tables.table_id\n        and table_description.option_name = 'description'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.253779, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_tables_sql": {"name": "_bigquery__get_tables_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_tables_sql", "macro_sql": "{% macro _bigquery__get_tables_sql() %}\n    select distinct\n        table_catalog,\n        table_schema,\n        table_name,\n        is_date_shard,\n        table_type,\n        is_table,\n        table_comment\n    from table_shards\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2538471, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_stats_sql": {"name": "_bigquery__get_table_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro_sql": "{% macro _bigquery__get_table_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        table_name,\n        max(shard_name) as latest_shard_name,\n        min(shard_index) as shard_min,\n        max(shard_index) as shard_max,\n        count(shard_index) as shard_count,\n        sum(size_bytes) as size_bytes,\n        sum(row_count) as row_count\n    from table_shards\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.253917, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_columns_sql": {"name": "_bigquery__get_columns_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_columns_sql", "macro_sql": "{% macro _bigquery__get_columns_sql(information_schema) %}\n    select\n        columns.table_catalog,\n        columns.table_schema,\n        columns.table_name as shard_name,\n        coalesce(paths.field_path, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields\n        -- BQ does not treat these nested properties as independent fields\n        row_number() over (\n            partition by\n                columns.table_catalog,\n                columns.table_schema,\n                columns.table_name\n            order by\n                columns.ordinal_position,\n                paths.field_path\n        ) as column_index,\n        coalesce(paths.data_type, '<unknown>') as column_type,\n        paths.description as column_comment,\n        case when columns.is_partitioning_column = 'YES' then 1 else 0 end as is_partitioning_column,\n        case when columns.is_partitioning_column = 'YES' then paths.field_path end as partition_column,\n        case when columns.clustering_ordinal_position is not null then 1 else 0 end as is_clustering_column,\n        case when columns.clustering_ordinal_position is not null then paths.field_path end as cluster_column,\n        columns.clustering_ordinal_position\n    from {{ information_schema.replace(information_schema_view='COLUMNS') }} columns\n    join {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }} paths\n        on paths.table_catalog = columns.table_catalog\n        and paths.table_schema = columns.table_schema\n        and paths.table_name = columns.table_name\n        and paths.column_name = columns.column_name\n    where columns.ordinal_position is not null\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.254124, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_column_stats_sql": {"name": "_bigquery__get_column_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro_sql": "{% macro _bigquery__get_column_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        shard_name,\n        max(is_partitioning_column) = 1 as is_partitioned,\n        max(partition_column) as partition_column,\n        max(is_clustering_column) = 1 as is_clustered,\n        array_to_string(\n            array_agg(\n                cluster_column ignore nulls\n                order by clustering_ordinal_position\n            ), ', '\n        ) as clustering_columns\n    from columns\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2542028, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_extended_catalog_sql": {"name": "_bigquery__get_extended_catalog_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro_sql": "{% macro _bigquery__get_extended_catalog_sql() %}\n    select\n        tables.table_catalog as table_database,\n        tables.table_schema,\n        case\n            when tables.is_date_shard then concat(tables.table_name, '*')\n            else tables.table_name\n        end as table_name,\n        tables.table_type,\n        tables.table_comment,\n        -- coalesce column metadata fields to ensure they are non-null for catalog generation\n        -- external table columns are not present in COLUMN_FIELD_PATHS\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        coalesce(columns.column_index, 1) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        coalesce(columns.column_comment, '') as column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_stats.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        tables.is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_stats.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        tables.is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_stats.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        tables.is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        table_stats.row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        tables.is_table as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        table_stats.size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        tables.is_table as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        column_stats.partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        column_stats.is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        column_stats.clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        column_stats.is_clustered as `stats__clustering_fields__include`\n\n    from tables\n    join table_stats\n        on table_stats.table_catalog = tables.table_catalog\n        and table_stats.table_schema = tables.table_schema\n        and table_stats.table_name = tables.table_name\n    left join column_stats\n        on column_stats.table_catalog = tables.table_catalog\n        and column_stats.table_schema = tables.table_schema\n        and column_stats.shard_name = table_stats.latest_shard_name\n    left join columns\n        on columns.table_catalog = tables.table_catalog\n        and columns.table_schema = tables.table_schema\n        and columns.shard_name = table_stats.latest_shard_name\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.254428, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_schema.sql", "original_file_path": "macros/catalog/by_schema.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n    {%- if (schemas | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards as (\n                    {{ _bigquery__get_table_shards_sql(information_schema) }}\n                    where (\n                        {%- for schema in schemas -%}\n                            upper(tables.dataset_id) = upper('{{ schema }}')\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2550452, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.255126, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2552772, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.255389, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.255816, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.255873, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.25595, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.256085, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.256532, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2569358, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.257057, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.257403, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2575612, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.25782, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.258144, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n{%- if type.lower().startswith('array') and field is iterable and (field is not string and field is not mapping) and field | length > 0 -%}\n    {#-- Extract nested type from 'array<nested_type>' --#}\n    {% set nested_type = type.lower()[6:-1] %}\n    {#-- BigQuery does not support direct casts to arrays. instead, each element must be cast individually + reaggregated into an array --#}\n    {%- if cast_from_string_unsupported_for(nested_type)  %}\n        (select array_agg(safe_cast(i as {{ nested_type }})) from unnest([\n            {%- for nested_field in field %}\n                {{ nested_field.strip('\"').strip(\"'\") }}{{ ',' if not loop.last }}\n            {%- endfor %}\n        ]) i)\n    {%- else -%}\n        (select array_agg(safe_cast(i as {{nested_type}})) from unnest({{field}}) i)\n    {%- endif -%}\n\n{%- elif type.lower() == 'json' and field is mapping -%}\n    safe_cast(json {{ dbt.string_literal(tojson(field)) }} as json)\n{%- elif cast_from_string_unsupported_for(type) and field is string -%}\n    safe_cast({{field.strip('\"').strip(\"'\")}} as {{type}})\n{%- else -%}\n    safe_cast({{field}} as {{type}})\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.cast_from_string_unsupported_for", "macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.259146, "supported_languages": null}, "macro.dbt_bigquery.cast_from_string_unsupported_for": {"name": "cast_from_string_unsupported_for", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.cast_from_string_unsupported_for", "macro_sql": "{% macro cast_from_string_unsupported_for(type) %}\n    {{ return(type.lower().startswith('struct') or type.lower() == 'geography') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.259321, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.259449, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.259582, "supported_languages": null}, "macro.dbt_bigquery.bigquery__string_literal": {"name": "bigquery__string_literal", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/string_literal.sql", "original_file_path": "macros/utils/string_literal.sql", "unique_id": "macro.dbt_bigquery.bigquery__string_literal", "macro_sql": "{%- macro bigquery__string_literal(value) -%}\n    '''{{ value }}'''\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.259679, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2598028, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.259899, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.26025, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.260375, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.260587, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2607338, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.261104, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2612748, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.261439, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_subquery_sql": {"name": "bigquery__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_subquery_sql", "macro_sql": "{% macro bigquery__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false and current_timestamp() = current_timestamp()\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.261635, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2618072, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.262491, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.262629, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.26273, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.262828, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.262927, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.263134, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.263341, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.263547, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.263842, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n       and (DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }} or\n            DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null)\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2643368, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2658188, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2659378, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.266096, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes') or false %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2667232, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.26686, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2669902, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.267956, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes') or false %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2690141, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.270207, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.270415, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.270545, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.270611, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.270711, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2707891, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.270932, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2711082, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n               {# Check for either dbt_valid_to_current OR null, in order to correctly update records with nulls #}\n               ( {{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }} or {{ columns.dbt_valid_to }} is null)\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and ({{ strategy.row_changed }})\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.unique_key_fields", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.272457, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.272595, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2728782, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2731678, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2735739, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.273875, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.274067, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.274304, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ identifier }}.dbt_unique_key_{{ loop.index }} = {{ from_identifier }}.dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2745988, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.27474, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2748852, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.valid_snapshot_target(target_relation, columns) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.277807, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.279291, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.279688, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.279899, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.280045, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.280471, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2806962, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2809532, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.282007, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2831402, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2834089, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.28362, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.284509, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.284669, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.285107, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2865741, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.288026, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.288621, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.288987, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.289441, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.289602, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2900941, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2909708, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.292156, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.29234, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.293028, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.293215, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.293665, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2940748, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.294533, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2946901, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.294815, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2950132, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.295136, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.295331, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.295458, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2956328, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.295755, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.295855, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2959812, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2960918, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2962801, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.2991848, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.300073, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.300919, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3017962, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.302418, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.302589, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.302669, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.302868, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3029828, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.304681, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3064268, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.307132, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3077388, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3079019, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3082361, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.308364, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.308455, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.308587, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.308675, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.308788, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3088682, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.309191, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.309319, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.31022, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.310501, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.31076, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.311081, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.311265, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.311457, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.311712, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.311893, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.312206, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3124669, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3125918, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3127282, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3128588, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.313262, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.314067, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3143091, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.314486, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.314668, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.314815, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.31503, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3151739, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.315496, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.315788, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.315928, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3161302, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.316343, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.316596, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.316891, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3172019, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3174138, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.317555, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.317727, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.317811, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.317993, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.318094, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.318298, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3183901, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.318576, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.318677, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.319061, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.31919, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.319382, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3194828, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3196669, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.319767, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3203049, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.320388, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3207529, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3208692, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3209631, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.321909, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.322169, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.322403, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.322577, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3226619, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.322846, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.322947, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3231301, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3232288, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.323669, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.323794, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.324084, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.324547, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3248608, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.324992, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.325114, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3252952, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.325378, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.325748, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.325855, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.326613, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.326747, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.326913, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3270998, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3272, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.327452, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.327559, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.32768, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.328049, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3282602, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.328466, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.328628, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3290198, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.329914, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.330303, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3305001, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3310301, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3318279, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.332334, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3324952, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.332654, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3327081, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3330681, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.333469, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3336499, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.333923, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3341491, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.334344, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.334583, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3346949, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.334867, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.334951, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.335258, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.335615, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.335747, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3361, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.336278, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.336352, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.336565, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3366778, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.336833, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.336889, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.337076, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.337172, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.337366, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3374631, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3377762, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.338058, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.338274, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.33839, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.338588, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3386838, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.33886, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.338973, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3391402, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3392482, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3394392, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.339526, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3396952, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.339776, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.339967, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.340132, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.340302, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.340373, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.340891, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3409941, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.341105, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3412101, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3413172, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.341417, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3415282, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3416462, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.341755, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.341861, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3419762, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3420749, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.342185, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.342283, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3424692, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.34256, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.342727, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3428009, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.343015, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.343194, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.343294, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3435571, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3436701, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.34382, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3442, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.344291, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3445492, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.344712, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3449101, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.345016, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3452349, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3453598, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.34547, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.345593, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3459241, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.346027, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.346127, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.346198, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.default__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3464808, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3465998, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.346656, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.346772, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3468852, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3472278, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.347323, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.347428, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.347698, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.347828, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.347923, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.348029, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3481832, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.348657, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.348772, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.348918, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3491158, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.349279, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.349499, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3496199, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3497422, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3499122, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.350288, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3504481, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.350543, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.350797, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.35108, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.351269, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.35142, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3522592, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3523378, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3524532, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.35253, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.352766, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.352895, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3529758, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.353129, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.353336, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.353493, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.353639, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.353794, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3542569, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.35439, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.354559, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.354719, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3555012, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3557749, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.355901, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ compiled_code }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.35603, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3563352, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3564548, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.356596, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.356714, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.356896, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3572202, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3578188, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3579981, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3581371, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.35831, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.358433, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3585489, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3586729, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.358906, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.359048, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.359253, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.359381, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3594902, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3596108, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3597262, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.359835, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3599381, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3600771, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.360194, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.361009, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3611178, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3613272, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.361475, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.361616, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3617358, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.362525, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.362766, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.362891, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.363126, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.363282, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.363731, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.363908, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3645172, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.366242, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3666282, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3674319, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.367579, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.367647, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3681421, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.368248, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3688068, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.36909, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3694909, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.369819, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.369869, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.370183, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.370359, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.370572, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761260990.3707762, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {"exposure.whylinedenver_dbt.whylinedenver_app": {"name": "whylinedenver_app", "resource_type": "exposure", "package_name": "whylinedenver_dbt", "path": "exposures.yml", "original_file_path": "models/exposures.yml", "unique_id": "exposure.whylinedenver_dbt.whylinedenver_app", "fqn": ["whylinedenver_dbt", "whylinedenver_app"], "type": "application", "owner": {"email": "team@example.com", "name": "WhyLine Team"}, "description": "Streamlit application powering WhyLine Denver insights; depends on curated mart models.\n", "label": null, "maturity": "low", "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "url": "https://whylinedenver.com", "depends_on": {"macros": [], "nodes": ["model.whylinedenver_dbt.mart_reliability_by_route_day", "model.whylinedenver_dbt.mart_reliability_by_stop_hour", "model.whylinedenver_dbt.mart_crash_proximity_by_stop", "model.whylinedenver_dbt.mart_access_score_by_stop", "model.whylinedenver_dbt.mart_vulnerability_by_stop", "model.whylinedenver_dbt.mart_priority_hotspots", "model.whylinedenver_dbt.mart_weather_impacts"]}, "refs": [{"name": "mart_reliability_by_route_day", "package": null, "version": null}, {"name": "mart_reliability_by_stop_hour", "package": null, "version": null}, {"name": "mart_crash_proximity_by_stop", "package": null, "version": null}, {"name": "mart_access_score_by_stop", "package": null, "version": null}, {"name": "mart_vulnerability_by_stop", "package": null, "version": null}, {"name": "mart_priority_hotspots", "package": null, "version": null}, {"name": "mart_weather_impacts", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1761260990.663536}}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.whylinedenver_dbt.stg_denver_tracts": ["source.whylinedenver_dbt.raw.raw_denver_tracts"], "model.whylinedenver_dbt.stg_weather": ["source.whylinedenver_dbt.raw.raw_weather_daily"], "model.whylinedenver_dbt.stg_sidewalks": ["source.whylinedenver_dbt.raw.raw_sidewalks"], "model.whylinedenver_dbt.stg_denver_crashes": ["source.whylinedenver_dbt.raw.raw_crashes"], "model.whylinedenver_dbt.stg_gtfs_trips": ["source.whylinedenver_dbt.raw.raw_gtfs_calendar", "source.whylinedenver_dbt.raw.raw_gtfs_calendar_dates", "source.whylinedenver_dbt.raw.raw_gtfs_trips"], "model.whylinedenver_dbt.stg_gtfs_routes": ["source.whylinedenver_dbt.raw.raw_gtfs_routes"], "model.whylinedenver_dbt.stg_rt_events_daily_stats": ["model.whylinedenver_dbt.stg_rt_events"], "model.whylinedenver_dbt.stg_rt_events": ["model.whylinedenver_dbt.stg_gtfs_trips", "source.whylinedenver_dbt.raw.raw_gtfsrt_trip_updates", "source.whylinedenver_dbt.raw.raw_gtfsrt_vehicle_positions"], "model.whylinedenver_dbt.stg_gtfs_stops": ["source.whylinedenver_dbt.raw.raw_gtfs_stops"], "model.whylinedenver_dbt.stg_gtfs_stop_times": ["source.whylinedenver_dbt.raw.raw_gtfs_stop_times"], "model.whylinedenver_dbt.stg_acs_geo": ["source.whylinedenver_dbt.raw.raw_acs_tract"], "model.whylinedenver_dbt.mart_access_score_by_stop": ["model.whylinedenver_dbt.stg_gtfs_stops", "model.whylinedenver_dbt.stg_sidewalks"], "model.whylinedenver_dbt.mart_crash_proximity_by_stop": ["model.whylinedenver_dbt.stg_denver_crashes", "model.whylinedenver_dbt.stg_gtfs_stops"], "model.whylinedenver_dbt.mart_reliability_by_route_day": ["model.whylinedenver_dbt.int_rt_events_resolved", "model.whylinedenver_dbt.int_weather_by_date"], "model.whylinedenver_dbt.mart_weather_impacts": ["model.whylinedenver_dbt.mart_reliability_by_route_day"], "model.whylinedenver_dbt.mart_reliability_by_stop_hour": ["model.whylinedenver_dbt.int_headway_adherence", "model.whylinedenver_dbt.int_rt_events_resolved"], "model.whylinedenver_dbt.mart_priority_hotspots": ["model.whylinedenver_dbt.mart_crash_proximity_by_stop", "model.whylinedenver_dbt.mart_reliability_by_stop_hour", "model.whylinedenver_dbt.mart_vulnerability_by_stop"], "model.whylinedenver_dbt.mart_vulnerability_by_stop": ["model.whylinedenver_dbt.stg_acs_geo", "model.whylinedenver_dbt.stg_denver_tracts", "model.whylinedenver_dbt.stg_gtfs_stops"], "model.whylinedenver_dbt.int_stop_headways_observed": ["model.whylinedenver_dbt.int_rt_events_resolved"], "model.whylinedenver_dbt.int_headway_adherence": ["model.whylinedenver_dbt.int_stop_headways_observed", "model.whylinedenver_dbt.int_stop_headways_scheduled"], "model.whylinedenver_dbt.int_rt_events_resolved": ["model.whylinedenver_dbt.stg_rt_events"], "model.whylinedenver_dbt.int_stop_headways_scheduled": ["model.whylinedenver_dbt.int_scheduled_arrivals"], "model.whylinedenver_dbt.int_scheduled_arrivals": ["model.whylinedenver_dbt.stg_gtfs_stop_times", "model.whylinedenver_dbt.stg_gtfs_trips"], "model.whylinedenver_dbt.int_weather_by_date": ["model.whylinedenver_dbt.stg_weather"], "model.whylinedenver_dbt.int_rt_daily_coverage": ["model.whylinedenver_dbt.stg_rt_events_daily_stats"], "test.whylinedenver_dbt.not_null_stg_gtfs_routes_route_id.90a121a58c": ["model.whylinedenver_dbt.stg_gtfs_routes"], "test.whylinedenver_dbt.unique_combination_stg_gtfs_routes_route_id.9084187a60": ["model.whylinedenver_dbt.stg_gtfs_routes"], "test.whylinedenver_dbt.not_null_stg_gtfs_stops_stop_id.c41a0f2d33": ["model.whylinedenver_dbt.stg_gtfs_stops"], "test.whylinedenver_dbt.unique_stg_gtfs_stops_stop_id.583c0cfb05": ["model.whylinedenver_dbt.stg_gtfs_stops"], "test.whylinedenver_dbt.not_null_stg_gtfs_stops_geom.0cd728f20a": ["model.whylinedenver_dbt.stg_gtfs_stops"], "test.whylinedenver_dbt.not_null_stg_gtfs_trips_trip_id.8fdc26c92c": ["model.whylinedenver_dbt.stg_gtfs_trips"], "test.whylinedenver_dbt.relationships_stg_gtfs_trips_route_id__route_id__ref_stg_gtfs_routes_.6ddfbb4248": ["model.whylinedenver_dbt.stg_gtfs_routes", "model.whylinedenver_dbt.stg_gtfs_trips"], "test.whylinedenver_dbt.not_null_stg_gtfs_stop_times_trip_id.aff3052922": ["model.whylinedenver_dbt.stg_gtfs_stop_times"], "test.whylinedenver_dbt.not_null_stg_gtfs_stop_times_stop_id.2ed25f210c": ["model.whylinedenver_dbt.stg_gtfs_stop_times"], "test.whylinedenver_dbt.not_null_stg_rt_events_feed_ts_utc.775d390db9": ["model.whylinedenver_dbt.stg_rt_events"], "test.whylinedenver_dbt.not_null_stg_rt_events_route_id.0a55159ab0": ["model.whylinedenver_dbt.stg_rt_events"], "test.whylinedenver_dbt.relationships_stg_rt_events_route_id__route_id__ref_stg_gtfs_routes_.ad52082e1f": ["model.whylinedenver_dbt.stg_gtfs_routes", "model.whylinedenver_dbt.stg_rt_events"], "test.whylinedenver_dbt.not_null_stg_rt_events_trip_id.f684dd299f": ["model.whylinedenver_dbt.stg_rt_events"], "test.whylinedenver_dbt.not_null_stg_rt_events_event_ts_utc.f22cf61748": ["model.whylinedenver_dbt.stg_rt_events"], "test.whylinedenver_dbt.not_null_stg_denver_crashes_crash_id.2d4abfa048": ["model.whylinedenver_dbt.stg_denver_crashes"], "test.whylinedenver_dbt.unique_stg_denver_crashes_crash_id.3a8a6a41c9": ["model.whylinedenver_dbt.stg_denver_crashes"], "test.whylinedenver_dbt.not_null_stg_denver_crashes_event_ts_utc.f0325f0894": ["model.whylinedenver_dbt.stg_denver_crashes"], "test.whylinedenver_dbt.not_null_stg_denver_crashes_geom.46d75afae2": ["model.whylinedenver_dbt.stg_denver_crashes"], "test.whylinedenver_dbt.not_null_stg_sidewalks_sidewalk_id.a2404992b6": ["model.whylinedenver_dbt.stg_sidewalks"], "test.whylinedenver_dbt.not_null_stg_sidewalks_geom.4b37ed0d6c": ["model.whylinedenver_dbt.stg_sidewalks"], "test.whylinedenver_dbt.accepted_range_stg_sidewalks_length_m__True__0.64eabe607d": ["model.whylinedenver_dbt.stg_sidewalks"], "test.whylinedenver_dbt.not_null_stg_weather_date.2c564dee75": ["model.whylinedenver_dbt.stg_weather"], "test.whylinedenver_dbt.not_null_stg_weather_station.e234422657": ["model.whylinedenver_dbt.stg_weather"], "test.whylinedenver_dbt.unique_combination_stg_weather_date__station.06c87a9009": ["model.whylinedenver_dbt.stg_weather"], "test.whylinedenver_dbt.not_null_stg_acs_geo_geoid.e06639a503": ["model.whylinedenver_dbt.stg_acs_geo"], "test.whylinedenver_dbt.unique_stg_acs_geo_geoid.15e2f3f645": ["model.whylinedenver_dbt.stg_acs_geo"], "test.whylinedenver_dbt.accepted_range_stg_acs_geo_pct_hh_no_vehicle__1__0.bb26d27cf8": ["model.whylinedenver_dbt.stg_acs_geo"], "test.whylinedenver_dbt.accepted_range_stg_acs_geo_pct_transit_commute__1__0.54a46fa8b6": ["model.whylinedenver_dbt.stg_acs_geo"], "test.whylinedenver_dbt.accepted_range_stg_acs_geo_pct_poverty__1__0.c2276b8664": ["model.whylinedenver_dbt.stg_acs_geo"], "test.whylinedenver_dbt.not_null_stg_denver_tracts_geoid.12a4276960": ["model.whylinedenver_dbt.stg_denver_tracts"], "test.whylinedenver_dbt.unique_stg_denver_tracts_geoid.41744673c0": ["model.whylinedenver_dbt.stg_denver_tracts"], "test.whylinedenver_dbt.not_null_stg_denver_tracts_name.73c03e7de3": ["model.whylinedenver_dbt.stg_denver_tracts"], "test.whylinedenver_dbt.not_null_stg_denver_tracts_aland_m2.d22cd1914e": ["model.whylinedenver_dbt.stg_denver_tracts"], "test.whylinedenver_dbt.not_null_stg_denver_tracts_geom.45f12da7f2": ["model.whylinedenver_dbt.stg_denver_tracts"], "test.whylinedenver_dbt.not_null_mart_reliability_by_route_day_route_id.b843d7f52f": ["model.whylinedenver_dbt.mart_reliability_by_route_day"], "test.whylinedenver_dbt.relationships_mart_reliability_by_route_day_route_id__route_id__ref_stg_gtfs_routes_.e3178fa75e": ["model.whylinedenver_dbt.mart_reliability_by_route_day", "model.whylinedenver_dbt.stg_gtfs_routes"], "test.whylinedenver_dbt.not_null_mart_reliability_by_route_day_service_date_mst.17009ac7e5": ["model.whylinedenver_dbt.mart_reliability_by_route_day"], "test.whylinedenver_dbt.not_null_mart_reliability_by_route_day_precip_bin.6430d0982c": ["model.whylinedenver_dbt.mart_reliability_by_route_day"], "test.whylinedenver_dbt.accepted_range_mart_reliability_by_route_day_pct_on_time__1__0.bce527d1c7": ["model.whylinedenver_dbt.mart_reliability_by_route_day"], "test.whylinedenver_dbt.not_null_mart_reliability_by_stop_hour_stop_id.fd67b3e72f": ["model.whylinedenver_dbt.mart_reliability_by_stop_hour"], "test.whylinedenver_dbt.relationships_mart_reliability_by_stop_hour_stop_id__stop_id__ref_stg_gtfs_stops_.dcfe963153": ["model.whylinedenver_dbt.mart_reliability_by_stop_hour", "model.whylinedenver_dbt.stg_gtfs_stops"], "test.whylinedenver_dbt.not_null_mart_reliability_by_stop_hour_service_date_mst.8b2405888c": ["model.whylinedenver_dbt.mart_reliability_by_stop_hour"], "test.whylinedenver_dbt.not_null_mart_reliability_by_stop_hour_event_hour_mst.92b3494c69": ["model.whylinedenver_dbt.mart_reliability_by_stop_hour"], "test.whylinedenver_dbt.accepted_range_mart_reliability_by_stop_hour_pct_on_time__1__0.10f5fdfaa3": ["model.whylinedenver_dbt.mart_reliability_by_stop_hour"], "test.whylinedenver_dbt.not_null_mart_crash_proximity_by_stop_stop_id.1cacc1f770": ["model.whylinedenver_dbt.mart_crash_proximity_by_stop"], "test.whylinedenver_dbt.unique_mart_crash_proximity_by_stop_stop_id.2ca1c54c3d": ["model.whylinedenver_dbt.mart_crash_proximity_by_stop"], "test.whylinedenver_dbt.relationships_mart_crash_proximity_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_.de23f2bf57": ["model.whylinedenver_dbt.mart_crash_proximity_by_stop", "model.whylinedenver_dbt.stg_gtfs_stops"], "test.whylinedenver_dbt.accepted_range_mart_crash_proximity_by_stop_crash_100m_cnt__0.df522297e2": ["model.whylinedenver_dbt.mart_crash_proximity_by_stop"], "test.whylinedenver_dbt.accepted_range_mart_crash_proximity_by_stop_crash_250m_cnt__0.d6dc980d04": ["model.whylinedenver_dbt.mart_crash_proximity_by_stop"], "test.whylinedenver_dbt.not_null_mart_access_score_by_stop_stop_id.2857f24b3b": ["model.whylinedenver_dbt.mart_access_score_by_stop"], "test.whylinedenver_dbt.unique_mart_access_score_by_stop_stop_id.5561394fc8": ["model.whylinedenver_dbt.mart_access_score_by_stop"], "test.whylinedenver_dbt.relationships_mart_access_score_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_.fa0fce6e1a": ["model.whylinedenver_dbt.mart_access_score_by_stop", "model.whylinedenver_dbt.stg_gtfs_stops"], "test.whylinedenver_dbt.accepted_range_mart_access_score_by_stop_sidewalk_len_m_within_200m__0.930c03fe52": ["model.whylinedenver_dbt.mart_access_score_by_stop"], "test.whylinedenver_dbt.accepted_range_mart_access_score_by_stop_access_score_0_100__100__0.8ce7af875f": ["model.whylinedenver_dbt.mart_access_score_by_stop"], "test.whylinedenver_dbt.not_null_mart_vulnerability_by_stop_stop_id.89d4da8beb": ["model.whylinedenver_dbt.mart_vulnerability_by_stop"], "test.whylinedenver_dbt.unique_mart_vulnerability_by_stop_stop_id.353b4e9688": ["model.whylinedenver_dbt.mart_vulnerability_by_stop"], "test.whylinedenver_dbt.relationships_mart_vulnerability_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_.78e02832b6": ["model.whylinedenver_dbt.mart_vulnerability_by_stop", "model.whylinedenver_dbt.stg_gtfs_stops"], "test.whylinedenver_dbt.accepted_range_mart_vulnerability_by_stop_pct_hh_no_vehicle_w__1__0.37a410496f": ["model.whylinedenver_dbt.mart_vulnerability_by_stop"], "test.whylinedenver_dbt.accepted_range_mart_vulnerability_by_stop_pct_transit_commute_w__1__0.e9cf34d391": ["model.whylinedenver_dbt.mart_vulnerability_by_stop"], "test.whylinedenver_dbt.accepted_range_mart_vulnerability_by_stop_pct_poverty_w__1__0.91b92829ee": ["model.whylinedenver_dbt.mart_vulnerability_by_stop"], "test.whylinedenver_dbt.accepted_range_mart_vulnerability_by_stop_vuln_score_0_100__100__0.6d82af62c0": ["model.whylinedenver_dbt.mart_vulnerability_by_stop"], "test.whylinedenver_dbt.not_null_mart_priority_hotspots_stop_id.cc9cb33d13": ["model.whylinedenver_dbt.mart_priority_hotspots"], "test.whylinedenver_dbt.unique_mart_priority_hotspots_stop_id.3b0b820133": ["model.whylinedenver_dbt.mart_priority_hotspots"], "test.whylinedenver_dbt.relationships_mart_priority_hotspots_stop_id__stop_id__ref_stg_gtfs_stops_.ba07faf7e4": ["model.whylinedenver_dbt.mart_priority_hotspots", "model.whylinedenver_dbt.stg_gtfs_stops"], "test.whylinedenver_dbt.accepted_range_mart_priority_hotspots_priority_score__0.2fe9aa30be": ["model.whylinedenver_dbt.mart_priority_hotspots"], "test.whylinedenver_dbt.not_null_mart_weather_impacts_route_id.d198f5d6bc": ["model.whylinedenver_dbt.mart_weather_impacts"], "test.whylinedenver_dbt.relationships_mart_weather_impacts_route_id__route_id__ref_stg_gtfs_routes_.6b4c0cd147": ["model.whylinedenver_dbt.mart_weather_impacts", "model.whylinedenver_dbt.stg_gtfs_routes"], "test.whylinedenver_dbt.not_null_mart_weather_impacts_precip_bin.1398fc6d5c": ["model.whylinedenver_dbt.mart_weather_impacts"], "test.whylinedenver_dbt.accepted_range_mart_weather_impacts_pct_on_time_avg__1__0.4786f9d34d": ["model.whylinedenver_dbt.mart_weather_impacts"], "test.whylinedenver_dbt.accepted_range_mart_weather_impacts_pct_on_time_normal__1__0.5267f458d5": ["model.whylinedenver_dbt.mart_weather_impacts"], "source.whylinedenver_dbt.raw.raw_gtfsrt_trip_updates": [], "source.whylinedenver_dbt.raw.raw_gtfsrt_vehicle_positions": [], "source.whylinedenver_dbt.raw.raw_crashes": [], "source.whylinedenver_dbt.raw.raw_sidewalks": [], "source.whylinedenver_dbt.raw.raw_denver_tracts": [], "source.whylinedenver_dbt.raw.raw_weather_daily": [], "source.whylinedenver_dbt.raw.raw_acs_tract": [], "source.whylinedenver_dbt.raw.raw_gtfs_stops": [], "source.whylinedenver_dbt.raw.raw_gtfs_routes": [], "source.whylinedenver_dbt.raw.raw_gtfs_trips": [], "source.whylinedenver_dbt.raw.raw_gtfs_stop_times": [], "source.whylinedenver_dbt.raw.raw_gtfs_calendar": [], "source.whylinedenver_dbt.raw.raw_gtfs_calendar_dates": [], "exposure.whylinedenver_dbt.whylinedenver_app": ["model.whylinedenver_dbt.mart_access_score_by_stop", "model.whylinedenver_dbt.mart_crash_proximity_by_stop", "model.whylinedenver_dbt.mart_priority_hotspots", "model.whylinedenver_dbt.mart_reliability_by_route_day", "model.whylinedenver_dbt.mart_reliability_by_stop_hour", "model.whylinedenver_dbt.mart_vulnerability_by_stop", "model.whylinedenver_dbt.mart_weather_impacts"]}, "child_map": {"model.whylinedenver_dbt.stg_denver_tracts": ["model.whylinedenver_dbt.mart_vulnerability_by_stop", "test.whylinedenver_dbt.not_null_stg_denver_tracts_aland_m2.d22cd1914e", "test.whylinedenver_dbt.not_null_stg_denver_tracts_geoid.12a4276960", "test.whylinedenver_dbt.not_null_stg_denver_tracts_geom.45f12da7f2", "test.whylinedenver_dbt.not_null_stg_denver_tracts_name.73c03e7de3", "test.whylinedenver_dbt.unique_stg_denver_tracts_geoid.41744673c0"], "model.whylinedenver_dbt.stg_weather": ["model.whylinedenver_dbt.int_weather_by_date", "test.whylinedenver_dbt.not_null_stg_weather_date.2c564dee75", "test.whylinedenver_dbt.not_null_stg_weather_station.e234422657", "test.whylinedenver_dbt.unique_combination_stg_weather_date__station.06c87a9009"], "model.whylinedenver_dbt.stg_sidewalks": ["model.whylinedenver_dbt.mart_access_score_by_stop", "test.whylinedenver_dbt.accepted_range_stg_sidewalks_length_m__True__0.64eabe607d", "test.whylinedenver_dbt.not_null_stg_sidewalks_geom.4b37ed0d6c", "test.whylinedenver_dbt.not_null_stg_sidewalks_sidewalk_id.a2404992b6"], "model.whylinedenver_dbt.stg_denver_crashes": ["model.whylinedenver_dbt.mart_crash_proximity_by_stop", "test.whylinedenver_dbt.not_null_stg_denver_crashes_crash_id.2d4abfa048", "test.whylinedenver_dbt.not_null_stg_denver_crashes_event_ts_utc.f0325f0894", "test.whylinedenver_dbt.not_null_stg_denver_crashes_geom.46d75afae2", "test.whylinedenver_dbt.unique_stg_denver_crashes_crash_id.3a8a6a41c9"], "model.whylinedenver_dbt.stg_gtfs_trips": ["model.whylinedenver_dbt.int_scheduled_arrivals", "model.whylinedenver_dbt.stg_rt_events", "test.whylinedenver_dbt.not_null_stg_gtfs_trips_trip_id.8fdc26c92c", "test.whylinedenver_dbt.relationships_stg_gtfs_trips_route_id__route_id__ref_stg_gtfs_routes_.6ddfbb4248"], "model.whylinedenver_dbt.stg_gtfs_routes": ["test.whylinedenver_dbt.not_null_stg_gtfs_routes_route_id.90a121a58c", "test.whylinedenver_dbt.relationships_mart_reliability_by_route_day_route_id__route_id__ref_stg_gtfs_routes_.e3178fa75e", "test.whylinedenver_dbt.relationships_mart_weather_impacts_route_id__route_id__ref_stg_gtfs_routes_.6b4c0cd147", "test.whylinedenver_dbt.relationships_stg_gtfs_trips_route_id__route_id__ref_stg_gtfs_routes_.6ddfbb4248", "test.whylinedenver_dbt.relationships_stg_rt_events_route_id__route_id__ref_stg_gtfs_routes_.ad52082e1f", "test.whylinedenver_dbt.unique_combination_stg_gtfs_routes_route_id.9084187a60"], "model.whylinedenver_dbt.stg_rt_events_daily_stats": ["model.whylinedenver_dbt.int_rt_daily_coverage"], "model.whylinedenver_dbt.stg_rt_events": ["model.whylinedenver_dbt.int_rt_events_resolved", "model.whylinedenver_dbt.stg_rt_events_daily_stats", "test.whylinedenver_dbt.not_null_stg_rt_events_event_ts_utc.f22cf61748", "test.whylinedenver_dbt.not_null_stg_rt_events_feed_ts_utc.775d390db9", "test.whylinedenver_dbt.not_null_stg_rt_events_route_id.0a55159ab0", "test.whylinedenver_dbt.not_null_stg_rt_events_trip_id.f684dd299f", "test.whylinedenver_dbt.relationships_stg_rt_events_route_id__route_id__ref_stg_gtfs_routes_.ad52082e1f"], "model.whylinedenver_dbt.stg_gtfs_stops": ["model.whylinedenver_dbt.mart_access_score_by_stop", "model.whylinedenver_dbt.mart_crash_proximity_by_stop", "model.whylinedenver_dbt.mart_vulnerability_by_stop", "test.whylinedenver_dbt.not_null_stg_gtfs_stops_geom.0cd728f20a", "test.whylinedenver_dbt.not_null_stg_gtfs_stops_stop_id.c41a0f2d33", "test.whylinedenver_dbt.relationships_mart_access_score_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_.fa0fce6e1a", "test.whylinedenver_dbt.relationships_mart_crash_proximity_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_.de23f2bf57", "test.whylinedenver_dbt.relationships_mart_priority_hotspots_stop_id__stop_id__ref_stg_gtfs_stops_.ba07faf7e4", "test.whylinedenver_dbt.relationships_mart_reliability_by_stop_hour_stop_id__stop_id__ref_stg_gtfs_stops_.dcfe963153", "test.whylinedenver_dbt.relationships_mart_vulnerability_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_.78e02832b6", "test.whylinedenver_dbt.unique_stg_gtfs_stops_stop_id.583c0cfb05"], "model.whylinedenver_dbt.stg_gtfs_stop_times": ["model.whylinedenver_dbt.int_scheduled_arrivals", "test.whylinedenver_dbt.not_null_stg_gtfs_stop_times_stop_id.2ed25f210c", "test.whylinedenver_dbt.not_null_stg_gtfs_stop_times_trip_id.aff3052922"], "model.whylinedenver_dbt.stg_acs_geo": ["model.whylinedenver_dbt.mart_vulnerability_by_stop", "test.whylinedenver_dbt.accepted_range_stg_acs_geo_pct_hh_no_vehicle__1__0.bb26d27cf8", "test.whylinedenver_dbt.accepted_range_stg_acs_geo_pct_poverty__1__0.c2276b8664", "test.whylinedenver_dbt.accepted_range_stg_acs_geo_pct_transit_commute__1__0.54a46fa8b6", "test.whylinedenver_dbt.not_null_stg_acs_geo_geoid.e06639a503", "test.whylinedenver_dbt.unique_stg_acs_geo_geoid.15e2f3f645"], "model.whylinedenver_dbt.mart_access_score_by_stop": ["exposure.whylinedenver_dbt.whylinedenver_app", "test.whylinedenver_dbt.accepted_range_mart_access_score_by_stop_access_score_0_100__100__0.8ce7af875f", "test.whylinedenver_dbt.accepted_range_mart_access_score_by_stop_sidewalk_len_m_within_200m__0.930c03fe52", "test.whylinedenver_dbt.not_null_mart_access_score_by_stop_stop_id.2857f24b3b", "test.whylinedenver_dbt.relationships_mart_access_score_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_.fa0fce6e1a", "test.whylinedenver_dbt.unique_mart_access_score_by_stop_stop_id.5561394fc8"], "model.whylinedenver_dbt.mart_crash_proximity_by_stop": ["exposure.whylinedenver_dbt.whylinedenver_app", "model.whylinedenver_dbt.mart_priority_hotspots", "test.whylinedenver_dbt.accepted_range_mart_crash_proximity_by_stop_crash_100m_cnt__0.df522297e2", "test.whylinedenver_dbt.accepted_range_mart_crash_proximity_by_stop_crash_250m_cnt__0.d6dc980d04", "test.whylinedenver_dbt.not_null_mart_crash_proximity_by_stop_stop_id.1cacc1f770", "test.whylinedenver_dbt.relationships_mart_crash_proximity_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_.de23f2bf57", "test.whylinedenver_dbt.unique_mart_crash_proximity_by_stop_stop_id.2ca1c54c3d"], "model.whylinedenver_dbt.mart_reliability_by_route_day": ["exposure.whylinedenver_dbt.whylinedenver_app", "model.whylinedenver_dbt.mart_weather_impacts", "test.whylinedenver_dbt.accepted_range_mart_reliability_by_route_day_pct_on_time__1__0.bce527d1c7", "test.whylinedenver_dbt.not_null_mart_reliability_by_route_day_precip_bin.6430d0982c", "test.whylinedenver_dbt.not_null_mart_reliability_by_route_day_route_id.b843d7f52f", "test.whylinedenver_dbt.not_null_mart_reliability_by_route_day_service_date_mst.17009ac7e5", "test.whylinedenver_dbt.relationships_mart_reliability_by_route_day_route_id__route_id__ref_stg_gtfs_routes_.e3178fa75e"], "model.whylinedenver_dbt.mart_weather_impacts": ["exposure.whylinedenver_dbt.whylinedenver_app", "test.whylinedenver_dbt.accepted_range_mart_weather_impacts_pct_on_time_avg__1__0.4786f9d34d", "test.whylinedenver_dbt.accepted_range_mart_weather_impacts_pct_on_time_normal__1__0.5267f458d5", "test.whylinedenver_dbt.not_null_mart_weather_impacts_precip_bin.1398fc6d5c", "test.whylinedenver_dbt.not_null_mart_weather_impacts_route_id.d198f5d6bc", "test.whylinedenver_dbt.relationships_mart_weather_impacts_route_id__route_id__ref_stg_gtfs_routes_.6b4c0cd147"], "model.whylinedenver_dbt.mart_reliability_by_stop_hour": ["exposure.whylinedenver_dbt.whylinedenver_app", "model.whylinedenver_dbt.mart_priority_hotspots", "test.whylinedenver_dbt.accepted_range_mart_reliability_by_stop_hour_pct_on_time__1__0.10f5fdfaa3", "test.whylinedenver_dbt.not_null_mart_reliability_by_stop_hour_event_hour_mst.92b3494c69", "test.whylinedenver_dbt.not_null_mart_reliability_by_stop_hour_service_date_mst.8b2405888c", "test.whylinedenver_dbt.not_null_mart_reliability_by_stop_hour_stop_id.fd67b3e72f", "test.whylinedenver_dbt.relationships_mart_reliability_by_stop_hour_stop_id__stop_id__ref_stg_gtfs_stops_.dcfe963153"], "model.whylinedenver_dbt.mart_priority_hotspots": ["exposure.whylinedenver_dbt.whylinedenver_app", "test.whylinedenver_dbt.accepted_range_mart_priority_hotspots_priority_score__0.2fe9aa30be", "test.whylinedenver_dbt.not_null_mart_priority_hotspots_stop_id.cc9cb33d13", "test.whylinedenver_dbt.relationships_mart_priority_hotspots_stop_id__stop_id__ref_stg_gtfs_stops_.ba07faf7e4", "test.whylinedenver_dbt.unique_mart_priority_hotspots_stop_id.3b0b820133"], "model.whylinedenver_dbt.mart_vulnerability_by_stop": ["exposure.whylinedenver_dbt.whylinedenver_app", "model.whylinedenver_dbt.mart_priority_hotspots", "test.whylinedenver_dbt.accepted_range_mart_vulnerability_by_stop_pct_hh_no_vehicle_w__1__0.37a410496f", "test.whylinedenver_dbt.accepted_range_mart_vulnerability_by_stop_pct_poverty_w__1__0.91b92829ee", "test.whylinedenver_dbt.accepted_range_mart_vulnerability_by_stop_pct_transit_commute_w__1__0.e9cf34d391", "test.whylinedenver_dbt.accepted_range_mart_vulnerability_by_stop_vuln_score_0_100__100__0.6d82af62c0", "test.whylinedenver_dbt.not_null_mart_vulnerability_by_stop_stop_id.89d4da8beb", "test.whylinedenver_dbt.relationships_mart_vulnerability_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_.78e02832b6", "test.whylinedenver_dbt.unique_mart_vulnerability_by_stop_stop_id.353b4e9688"], "model.whylinedenver_dbt.int_stop_headways_observed": ["model.whylinedenver_dbt.int_headway_adherence"], "model.whylinedenver_dbt.int_headway_adherence": ["model.whylinedenver_dbt.mart_reliability_by_stop_hour"], "model.whylinedenver_dbt.int_rt_events_resolved": ["model.whylinedenver_dbt.int_stop_headways_observed", "model.whylinedenver_dbt.mart_reliability_by_route_day", "model.whylinedenver_dbt.mart_reliability_by_stop_hour"], "model.whylinedenver_dbt.int_stop_headways_scheduled": ["model.whylinedenver_dbt.int_headway_adherence"], "model.whylinedenver_dbt.int_scheduled_arrivals": ["model.whylinedenver_dbt.int_stop_headways_scheduled"], "model.whylinedenver_dbt.int_weather_by_date": ["model.whylinedenver_dbt.mart_reliability_by_route_day"], "model.whylinedenver_dbt.int_rt_daily_coverage": [], "test.whylinedenver_dbt.not_null_stg_gtfs_routes_route_id.90a121a58c": [], "test.whylinedenver_dbt.unique_combination_stg_gtfs_routes_route_id.9084187a60": [], "test.whylinedenver_dbt.not_null_stg_gtfs_stops_stop_id.c41a0f2d33": [], "test.whylinedenver_dbt.unique_stg_gtfs_stops_stop_id.583c0cfb05": [], "test.whylinedenver_dbt.not_null_stg_gtfs_stops_geom.0cd728f20a": [], "test.whylinedenver_dbt.not_null_stg_gtfs_trips_trip_id.8fdc26c92c": [], "test.whylinedenver_dbt.relationships_stg_gtfs_trips_route_id__route_id__ref_stg_gtfs_routes_.6ddfbb4248": [], "test.whylinedenver_dbt.not_null_stg_gtfs_stop_times_trip_id.aff3052922": [], "test.whylinedenver_dbt.not_null_stg_gtfs_stop_times_stop_id.2ed25f210c": [], "test.whylinedenver_dbt.not_null_stg_rt_events_feed_ts_utc.775d390db9": [], "test.whylinedenver_dbt.not_null_stg_rt_events_route_id.0a55159ab0": [], "test.whylinedenver_dbt.relationships_stg_rt_events_route_id__route_id__ref_stg_gtfs_routes_.ad52082e1f": [], "test.whylinedenver_dbt.not_null_stg_rt_events_trip_id.f684dd299f": [], "test.whylinedenver_dbt.not_null_stg_rt_events_event_ts_utc.f22cf61748": [], "test.whylinedenver_dbt.not_null_stg_denver_crashes_crash_id.2d4abfa048": [], "test.whylinedenver_dbt.unique_stg_denver_crashes_crash_id.3a8a6a41c9": [], "test.whylinedenver_dbt.not_null_stg_denver_crashes_event_ts_utc.f0325f0894": [], "test.whylinedenver_dbt.not_null_stg_denver_crashes_geom.46d75afae2": [], "test.whylinedenver_dbt.not_null_stg_sidewalks_sidewalk_id.a2404992b6": [], "test.whylinedenver_dbt.not_null_stg_sidewalks_geom.4b37ed0d6c": [], "test.whylinedenver_dbt.accepted_range_stg_sidewalks_length_m__True__0.64eabe607d": [], "test.whylinedenver_dbt.not_null_stg_weather_date.2c564dee75": [], "test.whylinedenver_dbt.not_null_stg_weather_station.e234422657": [], "test.whylinedenver_dbt.unique_combination_stg_weather_date__station.06c87a9009": [], "test.whylinedenver_dbt.not_null_stg_acs_geo_geoid.e06639a503": [], "test.whylinedenver_dbt.unique_stg_acs_geo_geoid.15e2f3f645": [], "test.whylinedenver_dbt.accepted_range_stg_acs_geo_pct_hh_no_vehicle__1__0.bb26d27cf8": [], "test.whylinedenver_dbt.accepted_range_stg_acs_geo_pct_transit_commute__1__0.54a46fa8b6": [], "test.whylinedenver_dbt.accepted_range_stg_acs_geo_pct_poverty__1__0.c2276b8664": [], "test.whylinedenver_dbt.not_null_stg_denver_tracts_geoid.12a4276960": [], "test.whylinedenver_dbt.unique_stg_denver_tracts_geoid.41744673c0": [], "test.whylinedenver_dbt.not_null_stg_denver_tracts_name.73c03e7de3": [], "test.whylinedenver_dbt.not_null_stg_denver_tracts_aland_m2.d22cd1914e": [], "test.whylinedenver_dbt.not_null_stg_denver_tracts_geom.45f12da7f2": [], "test.whylinedenver_dbt.not_null_mart_reliability_by_route_day_route_id.b843d7f52f": [], "test.whylinedenver_dbt.relationships_mart_reliability_by_route_day_route_id__route_id__ref_stg_gtfs_routes_.e3178fa75e": [], "test.whylinedenver_dbt.not_null_mart_reliability_by_route_day_service_date_mst.17009ac7e5": [], "test.whylinedenver_dbt.not_null_mart_reliability_by_route_day_precip_bin.6430d0982c": [], "test.whylinedenver_dbt.accepted_range_mart_reliability_by_route_day_pct_on_time__1__0.bce527d1c7": [], "test.whylinedenver_dbt.not_null_mart_reliability_by_stop_hour_stop_id.fd67b3e72f": [], "test.whylinedenver_dbt.relationships_mart_reliability_by_stop_hour_stop_id__stop_id__ref_stg_gtfs_stops_.dcfe963153": [], "test.whylinedenver_dbt.not_null_mart_reliability_by_stop_hour_service_date_mst.8b2405888c": [], "test.whylinedenver_dbt.not_null_mart_reliability_by_stop_hour_event_hour_mst.92b3494c69": [], "test.whylinedenver_dbt.accepted_range_mart_reliability_by_stop_hour_pct_on_time__1__0.10f5fdfaa3": [], "test.whylinedenver_dbt.not_null_mart_crash_proximity_by_stop_stop_id.1cacc1f770": [], "test.whylinedenver_dbt.unique_mart_crash_proximity_by_stop_stop_id.2ca1c54c3d": [], "test.whylinedenver_dbt.relationships_mart_crash_proximity_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_.de23f2bf57": [], "test.whylinedenver_dbt.accepted_range_mart_crash_proximity_by_stop_crash_100m_cnt__0.df522297e2": [], "test.whylinedenver_dbt.accepted_range_mart_crash_proximity_by_stop_crash_250m_cnt__0.d6dc980d04": [], "test.whylinedenver_dbt.not_null_mart_access_score_by_stop_stop_id.2857f24b3b": [], "test.whylinedenver_dbt.unique_mart_access_score_by_stop_stop_id.5561394fc8": [], "test.whylinedenver_dbt.relationships_mart_access_score_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_.fa0fce6e1a": [], "test.whylinedenver_dbt.accepted_range_mart_access_score_by_stop_sidewalk_len_m_within_200m__0.930c03fe52": [], "test.whylinedenver_dbt.accepted_range_mart_access_score_by_stop_access_score_0_100__100__0.8ce7af875f": [], "test.whylinedenver_dbt.not_null_mart_vulnerability_by_stop_stop_id.89d4da8beb": [], "test.whylinedenver_dbt.unique_mart_vulnerability_by_stop_stop_id.353b4e9688": [], "test.whylinedenver_dbt.relationships_mart_vulnerability_by_stop_stop_id__stop_id__ref_stg_gtfs_stops_.78e02832b6": [], "test.whylinedenver_dbt.accepted_range_mart_vulnerability_by_stop_pct_hh_no_vehicle_w__1__0.37a410496f": [], "test.whylinedenver_dbt.accepted_range_mart_vulnerability_by_stop_pct_transit_commute_w__1__0.e9cf34d391": [], "test.whylinedenver_dbt.accepted_range_mart_vulnerability_by_stop_pct_poverty_w__1__0.91b92829ee": [], "test.whylinedenver_dbt.accepted_range_mart_vulnerability_by_stop_vuln_score_0_100__100__0.6d82af62c0": [], "test.whylinedenver_dbt.not_null_mart_priority_hotspots_stop_id.cc9cb33d13": [], "test.whylinedenver_dbt.unique_mart_priority_hotspots_stop_id.3b0b820133": [], "test.whylinedenver_dbt.relationships_mart_priority_hotspots_stop_id__stop_id__ref_stg_gtfs_stops_.ba07faf7e4": [], "test.whylinedenver_dbt.accepted_range_mart_priority_hotspots_priority_score__0.2fe9aa30be": [], "test.whylinedenver_dbt.not_null_mart_weather_impacts_route_id.d198f5d6bc": [], "test.whylinedenver_dbt.relationships_mart_weather_impacts_route_id__route_id__ref_stg_gtfs_routes_.6b4c0cd147": [], "test.whylinedenver_dbt.not_null_mart_weather_impacts_precip_bin.1398fc6d5c": [], "test.whylinedenver_dbt.accepted_range_mart_weather_impacts_pct_on_time_avg__1__0.4786f9d34d": [], "test.whylinedenver_dbt.accepted_range_mart_weather_impacts_pct_on_time_normal__1__0.5267f458d5": [], "source.whylinedenver_dbt.raw.raw_gtfsrt_trip_updates": ["model.whylinedenver_dbt.stg_rt_events"], "source.whylinedenver_dbt.raw.raw_gtfsrt_vehicle_positions": ["model.whylinedenver_dbt.stg_rt_events"], "source.whylinedenver_dbt.raw.raw_crashes": ["model.whylinedenver_dbt.stg_denver_crashes"], "source.whylinedenver_dbt.raw.raw_sidewalks": ["model.whylinedenver_dbt.stg_sidewalks"], "source.whylinedenver_dbt.raw.raw_denver_tracts": ["model.whylinedenver_dbt.stg_denver_tracts"], "source.whylinedenver_dbt.raw.raw_weather_daily": ["model.whylinedenver_dbt.stg_weather"], "source.whylinedenver_dbt.raw.raw_acs_tract": ["model.whylinedenver_dbt.stg_acs_geo"], "source.whylinedenver_dbt.raw.raw_gtfs_stops": ["model.whylinedenver_dbt.stg_gtfs_stops"], "source.whylinedenver_dbt.raw.raw_gtfs_routes": ["model.whylinedenver_dbt.stg_gtfs_routes"], "source.whylinedenver_dbt.raw.raw_gtfs_trips": ["model.whylinedenver_dbt.stg_gtfs_trips"], "source.whylinedenver_dbt.raw.raw_gtfs_stop_times": ["model.whylinedenver_dbt.stg_gtfs_stop_times"], "source.whylinedenver_dbt.raw.raw_gtfs_calendar": ["model.whylinedenver_dbt.stg_gtfs_trips"], "source.whylinedenver_dbt.raw.raw_gtfs_calendar_dates": ["model.whylinedenver_dbt.stg_gtfs_trips"], "exposure.whylinedenver_dbt.whylinedenver_app": []}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}